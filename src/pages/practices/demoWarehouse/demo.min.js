/*! demo 2016-10-31 */
function init(a) {
  (make.Default.path = "./"),
    make.Default.registerObj("park", "1", "obj/park/", {}, !1),
    make.Default.registerObj(
      "building",
      "kufang",
      "obj/building/",
      { name: "建筑" },
      !1
    ),
    make.Default.registerObj("tree", "shu1", "obj/tree/", {}, !1),
    make.Default.registerObj("demo.shelf", "shelf", "./obj/shelfnew/", {}, !1),
    make.Default.registerObj(
      "demo.forklift",
      "chache",
      "./obj/forklift/",
      {},
      !1
    ),
    make.Default.registerObj(
      "demo.miehuoqi",
      "miehuosystem",
      "./obj/miehuoqi/",
      {},
      !1
    ),
    make.Default.registerObj("demo.goods", "goods", "./obj/goods/", {}, !1),
    make.Default.registerObj(
      "demo.singlegoods",
      "singlegoods",
      "./obj/newgoods/",
      {},
      !1
    ),
    make.Default.registerObj("demo.cart", "tuiche", "./obj/cart/", {}, !1),
    make.Default.registerObj(
      "demo.transporter",
      "chuansongtdai",
      "./obj/transporter/",
      {},
      !1
    ),
    make.Default.registerObj(
      "demo.ladder_truck",
      "denggaoche",
      "./obj/ladder_truck/",
      {},
      !1
    ),
    (network = new mono.Network3D()),
    network.setClearColor("#000000"),
    network.setClearAlpha(0),
    network.setBackgroundImage("./res/images/bg_network.jpg");
  var b = network.getDataBox();
  network.isSelectable = function() {
    return !1;
  };
  var c = new mono.PerspectiveCamera(
    45,
    document.documentElement.clientWidth /
      document.documentElement.clientHeight,
    30,
    4e4
  );
  c.setPosition(-19228, 8979, 601),
    c.lookAt(new mono.Vec3(-7346, 99, -574)),
    c.setFar(4e4),
    c.setNear(20),
    network.setCamera(c);
  var d = network.getDefaultInteraction();
  (d.yLowerLimitAngle = (Math.PI / 180) * 2),
    (d.yUpLimitAngle = Math.PI / 2),
    (d.maxDistance = 2e4),
    (d.minDistance = 50),
    (d.zoomSpeed = 3),
    (d.panSpeed = 0.2),
    document.getElementById("3d_view").appendChild(network.getRootView()),
    mono.Utils.autoAdjustNetworkBounds(
      network,
      document.documentElement,
      "clientWidth",
      "clientHeight"
    );
  var e = new mono.PointLight(16777215, 1);
  e.setPosition(8e3, 13e3, 8e3),
    b.add(e),
    b.add(new mono.AmbientLight(16777215));
  var f = function(a, b) {
      var c = a.getElementsByMouseEvent(b);
      if (c.length)
        for (var d = 0; d < c.length; d++) {
          var e = c[d],
            f = e.element;
          if (!(f instanceof mono.Billboard)) return e;
        }
      return null;
    },
    g = function(a, b, c, d, e) {
      var f = a.getPosition().sub(a.getTarget()),
        g = new twaver.Animate({
          from: 0,
          to: 1,
          dur: 500,
          easing: "easeBoth",
          onUpdate: function(e) {
            var g = c.x + (d.x - c.x) * e,
              h = c.y + (d.y - c.y) * e,
              i = c.z + (d.z - c.z) * e,
              j = new mono.Vec3(g, h, i);
            a.lookAt(j), (b.target = j);
            var k = new mono.Vec3().addVectors(f, j);
            a.setPosition(k);
          }
        });
      (g.onDone = e), g.play();
    };
  network.getRootView().addEventListener("dblclick", function(a) {
    var d = f(network, a);
    if (d) {
      var e = d.element;
      if ("building" === e.getClient("objectType"))
        return (
          (loadShelf = !0),
          b.clear(),
          warehouseList.forEach(function(a) {
            b.add(a);
          }),
          c.setPosition(82, 4721, 9070),
          c.lookAt(new mono.Vec3(0, 0, 0)),
          void zoomToOverview()
        );
      var h = c.t(),
        i = d.point,
        j = network.getDefaultInteraction();
      e.getClient("animation")
        ? make.Default.playAnimation(e, e.getClient("animation"))
        : g(c, j, h, i);
    } else if (loadShelf)
      return (
        (loadShelf = !1),
        b.clear(),
        parkList.forEach(function(a) {
          b.add(a);
        }),
        c.setPosition(-11770, 2695, 726),
        void c.lookAt(new mono.Vec3(-7346, 99, -574))
      );
  }),
    (park = ""),
    (building = ""),
    (combo = ""),
    (loadPark = !0);
  var h = !1,
    i = !1;
  make.Default.load("park", function(a) {
    (park = a), (h = !0), parkList.add(a), initScene(parkList, network);
  }),
    make.Default.load("building", function(a) {
      var b = a.clonePrefab();
      b.setPosition(1600, b.getPosition().y + 240, -3300), parkList.add(b);
      var c = a.clonePrefab();
      c.setPosition(-2200, c.getPosition().y + 240, -3300),
        c.setClient("objectType", "building"),
        (board = it.Util.createTextBillboardForNode(
          c,
          "请双击仓库",
          "#003366"
        )),
        board.setClient("objectType", "board"),
        board.setScale(2e3, 1e3, 2e3),
        board.setPosition(-2500, 100, 1500),
        parkList.add(board),
        (building = b),
        (i = !0),
        parkList.add(c);
    }),
    make.Default.load("tree", function(a) {
      var b = [{ x: 1e3, z: 500 }, { x: -1e3, z: 1e3 }, { x: 1e3, z: 1e3 }];
      b.forEach(function(b) {
        var c = a.clonePrefab();
        c.setPosition(b.x, c.getPosition().y, b.z), parkList.add(c);
      });
    }),
    (warehouseList = loadModel(warehouseList));
}
function initScene(a) {
  console.log("get the  init"),
    a.forEach(function(a) {
      network.getDataBox().add(a);
    }),
    (document.getElementById("loading").style.display = "none");
  var b = network.getCamera(),
    c = b.p(),
    d = b.t();
  setTimeout(function() {
    mono.Utils.playCameraAnimation(
      b,
      new mono.Vec3(c.x + 6e3, c.y - 6500, c.z),
      d,
      1e3
    );
  }, 2e3);
}
function zoomToOverview() {
  network.zoomEstimateOverview(45);
  var a = network.getCamera(),
    b = a.p(),
    c = a.t();
  a.setPosition(b.x + 2500, b.y + 3500, b.z + 3500),
    setTimeout(function() {
      mono.Utils.playCameraAnimation(
        a,
        new mono.Vec3(b.x + 500, b.y - 2500, b.z + 500),
        c,
        500
      );
    }, 1e3);
}
function loadModel(a) {
  var b = new mono.Cube(1e4, 2, 6e3);
  return (
    b.setPosition(0, 0, 0),
    b.s({
      "m.texture.image": "res/images/ground.png",
      "m.texture.repeat": new mono.Vec2(3, 3)
    }),
    a.add(b),
    getArea(a),
    getShortShelf(a),
    getHighShelf(a),
    getForkliftArea(a),
    getForklift(a),
    getMiehuoqi(a),
    make.Default.load("demo.ladder_truck", function(b) {
      b.setPosition(-4571, 280, -2183),
        b.setRotationY(Math.PI),
        b.setScale(4, 4, 4),
        a.add(b);
    }),
    make.Default.load("demo.cart", function(b) {
      b.setPosition(-4571, 165, 883),
        b.setRotationY(Math.PI),
        b.setScale(4, 4, 4),
        a.add(b);
      var c = b.clonePrefab();
      c.setPosition(-4571, 165, 1283), a.add(c);
      var d = b.clonePrefab();
      d.setPosition(-4571, 165, 483), a.add(d);
    }),
    make.Default.load("demo.transporter", function(b) {
      b.setPosition(4013, 300, -517),
        b.setRotationY(-Math.PI / 2),
        b.setScale(5, 3, 5),
        a.add(b);
    }),
    make.Default.load("demo.goods", function(b) {
      b.setPosition(-4434, 10, -647),
        b.setRotationY(-Math.PI / 2),
        b.setScale(2, 2, 2),
        a.add(b);
      var c = b.clonePrefab();
      b.setRotationY(Math.PI / 2), c.setPosition(-4434, 10, -247), a.add(c);
      var d = b.clonePrefab();
      d.setPosition(4313, 10, 817), a.add(d);
    }),
    make.Default.load("demo.singlegoods", function(b) {
      b.setPosition(-2871, 680, -2883), b.setScale(2.5, 2.5, 2.5), a.add(b);
      var c = b.clonePrefab();
      c.setPosition(-2271, 380, -2883), a.add(c);
      var d = b.clonePrefab();
      d.setPosition(-2800, 80, -2883), a.add(d);
      var e = b.clonePrefab();
      e.setPosition(-471, 680, -2883), a.add(e);
      var f = b.clonePrefab();
      f.setPosition(-971, 380, -2883), a.add(f);
      var g = b.clonePrefab();
      g.setPosition(-471, 80, -2883), a.add(g);
      var h = b.clonePrefab();
      h.setPosition(2538, 680, -2883), a.add(h);
      var i = b.clonePrefab();
      i.setPosition(2938, 380, -2883), a.add(i);
      var j = b.clonePrefab();
      j.setPosition(2538, 80, -2883), a.add(j);
      var k = b.clonePrefab();
      k.setPosition(1538, 680, -2883), a.add(k);
      var l = b.clonePrefab();
      l.setPosition(938, 380, -2883), a.add(l);
      var m = b.clonePrefab();
      m.setPosition(1538, 80, -2883), a.add(m);
    }),
    a
  );
}
function getMiehuoqi(a) {
  make.Default.load("demo.miehuoqi", function(b) {
    b.setPosition(1815, 140, 2760),
      b.setRotationY(Math.PI / 2),
      b.setScale(2, 2, 2),
      a.add(b);
    var c = b.clonePrefab();
    c.setPosition(1615, 140, 2760), a.add(c);
    var d = b.clonePrefab();
    d.setPosition(1415, 140, 2760), a.add(d);
  });
}
function getArea(a) {
  var b = new mono.Cube(1e3, 1, 800);
  b.s({ "top.m.texture.image": "res/images/keepaway.png" }),
    b.setRotationY(-Math.PI / 2),
    b.setPosition(-4580, 10, 2500),
    a.add(b);
  var c = b.clonePrefab();
  c.setRotationY(Math.PI / 2), c.setPosition(4580, 10, 2500), a.add(c);
}
function getHighShelf(a) {
  var b = setShelf();
  b.setPosition(-2871, 5, -2683), a.add(b);
  var c = b.clonePrefab();
  c.setPosition(-1238, 5, -2683), a.add(c);
  var d = b.clonePrefab();
  d.setPosition(938, 5, -2683), a.add(d);
  var e = b.clonePrefab();
  e.setPosition(2538, 5, -2683), a.add(e);
}
function getShortShelf(a) {
  make.Default.load("demo.shelf", function(b) {
    b.setPosition(-2658, 10, -1262), b.setScale(2, 2, 2);
    var c = b.clonePrefab();
    a.add(c);
    var d = b.clonePrefab();
    d.setPosition(-1758, 10, -1262), a.add(d);
    var e = b.clonePrefab();
    e.setPosition(-858, 10, -1262), a.add(e);
    var f = b.clonePrefab();
    f.setPosition(758, 10, -1262), a.add(f);
    var g = b.clonePrefab();
    g.setPosition(1658, 10, -1262), a.add(g);
    var h = b.clonePrefab();
    h.setPosition(2558, 10, -1262), a.add(h);
    var i = new mono.ComboNode([c, d, e, f, g, h]),
      j = i.clonePrefab();
    j.setPosition(0, 0, 1e3), a.add(j);
    var k = i.clonePrefab();
    k.setPosition(0, 0, 2e3), a.add(k);
  });
}
function getForkliftArea(a) {
  var b = new mono.Cube(4e3, 1, 800);
  b.s({
    "top.m.texture.image": "res/images/xian1.jpg",
    "top.m.texture.repeat": new mono.Vec2(5, 1)
  }),
    b.setPosition(-1156, 10, 2580),
    a.add(b);
  var c = new mono.Cube(40, 2, 780);
  c.s({ "m.color": "#e1c356" }), c.setPosition(-3177, 15, 2585), a.add(c);
  var d = c.clonePrefab();
  d.setPosition(-2377, 15, 2585), a.add(d);
  var e = c.clonePrefab();
  e.setPosition(-1577, 15, 2585), a.add(e);
  var f = c.clonePrefab();
  f.setPosition(-777, 15, 2585), a.add(f);
  var g = c.clonePrefab();
  g.setPosition(23, 15, 2585), a.add(g);
  var h = c.clonePrefab();
  h.setPosition(823, 15, 2585), a.add(h);
}
function getForklift(a) {
  make.Default.load("demo.forklift", function(b) {
    b.setPosition(-2792, 230, 2587),
      b.setScale(0.2, 0.2, 0.2),
      b.setRotation(0, -90, 0),
      a.add(b);
    var c = b.clonePrefab();
    c.setPosition(480, 230, 2587), a.add(c);
    var d = b.clonePrefab();
    d.setPosition(-1992, 230, 2587), a.add(d);
    var e = b.clonePrefab();
    e.setPosition(-1192, 230, 2587), a.add(e);
    var f = b.clonePrefab();
    f.setPosition(-392, 230, 2587), a.add(f);
  });
}
function setShelf() {
  function a(a, b) {
    var c = 1;
    return a % 2 == 0 && (c = -1), parseInt(a / 2) * h * c;
  }
  function b(a) {
    var b = 1,
      c = 1;
    return (
      (a % 4 == 0 || a % 4 == 1) && (b = -1),
      (a % 4 == 1 || a % 4 == 2) && (c = -1),
      new mono.Vec3(
        b * (h / 2 + parseInt(a / 4) * h),
        ((f - 1) * g * 1) / 2 + j,
        c * (i / 2)
      )
    );
  }
  function c(a, b) {
    var c = 1;
    return (
      a % 2 == 0 && (c = -1),
      new mono.Vec3((h / 2 + parseInt(a / 2) * h) * c, j + g * b, 0)
    );
  }
  function d(a, b) {
    var c = 1;
    return a % 2 == 0 && (c = -1), (parseInt(a / 2) * h + h / 2) * c;
  }
  for (
    var e = 1, f = 4, g = 300, h = 1500, i = 300, j = 60, k = [], l = 0;
    f > l;
    l++
  )
    for (var m = 1; e >= m; m++) {
      var n = new mono.Cube(h, 15, 10);
      n.setStyle("m.color", "#C54C37"),
        n.setPosition(new mono.Vec3(a(m, l), j + g * l, i / 2)),
        k.push(n);
      var o = new mono.Cube(h, 15, 10);
      o.setStyle("m.color", "#C54C37"),
        o.setPosition(new mono.Vec3(a(m, l), j + g * l, 0)),
        k.push(o);
      var p = new mono.Cube(h, 15, 10);
      p.setStyle("m.color", "#C54C37"),
        p.setPosition(new mono.Vec3(a(m, l), j + g * l, -i / 2)),
        k.push(p);
    }
  for (var m = 0; 2 * (e + 1) > m; m++) {
    var q = new mono.Cube(20, (f - 1) * g + 2 * j, 20);
    q.setStyle("m.texture.image", "res/images/lizhu.jpg"),
      q.setWrapMode("six-each"),
      q.setPosition(b(m)),
      k.push(q);
  }
  for (var l = 0; f > l; l++)
    for (var m = 0; e >= m; m++) {
      var r = new mono.Cube(10, 15, i);
      r.setStyle("m.texture.image", "res/images/lizhu.jpg"),
        r.setWrapMode("six-each"),
        r.s({ "m.color": "blue", "m.ambient": "blue" }),
        r.setPosition(c(m, l)),
        k.push(r);
    }
  for (
    var s = Math.sqrt(i * i + (g / 2) * (g / 2)),
      t = Math.atan2(g / 2, i),
      l = 0;
    2 * (f - 1) > l;
    l++
  )
    for (var m = 0; e >= m; m++) {
      var u = new mono.Cube(5, 10, s);
      u.setStyle("m.texture.image", "res/images/lizhu.jpg"),
        u.setWrapMode("six-each"),
        u.setRotation(l % 2 == 0 ? t : -t, 0, 0),
        u.setPosition(new mono.Vec3(d(m, l), j + (g * l) / 2 + g / 4, 0)),
        k.push(u);
    }
  var v = new mono.ComboNode(k);
  return v;
}
var parkList = new mono.List(),
  warehouseList = new mono.List(),
  loadShelf = !1;
!(function(a, b) {
  var c = {};
  (a.it = c), (c.version = "0.1.2");
  var d = (c.Util = {});
  (d._debug = !0),
    (d.isDebug = function() {
      return d._debug;
    }),
    (d.checkNotNull = function(a, b) {
      if (null == a) {
        if (b) throw b + "can't be null";
        return !1;
      }
      return !0;
    }),
    (d.translateJson = function(a) {
      if ("string" == typeof a)
        try {
          a = JSON.parse(a);
        } catch (b) {}
      return a;
    }),
    (d.clone = function(a) {
      var b;
      if ("object" == typeof a)
        if (null === a) b = null;
        else if (a instanceof Array) {
          b = [];
          for (var c = 0, e = a.length; e > c; c++) b.push(d.clone(a[c]));
        } else {
          b = {};
          for (var f in a)
            "function" != typeof b[f] &&
              "_alarmState" != f &&
              (b[f] = d.clone(a[f]));
        }
      else b = a;
      return b;
    }),
    (d.getComputedStyle = function(b) {
      return b.currentStyle ? b.currentStyle : a.getComputedStyle(b, null);
    }),
    (d.updateEmptyBillboardContent = function(a, b, c) {
      var c = this.ext(
        {
          contentX: 0,
          contentY: 0,
          contentWidth: a.args.width,
          contentHeight: a.args.height - a.args.arrowHeight
        },
        c
      );
      c = this.ext(a.args, c);
      var d = this.getBillboardContent(c),
        e = d.getContext("2d");
      e.drawImage(b, c.contentX, c.contentY, c.contentWidth, c.contentHeight),
        a.s({ "m.texture.image": d });
    }),
    (d.updateTextBillboardText = function(a, b, d) {
      b = b || "";
      var e = c.Util.getTextBillboardContent(b, d);
      this.updateTextBillboardContent(a, e);
    }),
    (d.updateTextBillboardContent = function(a, b) {
      a.s({ "m.texture.image": b }),
        (a.contentWidth = b.width),
        (a.contentHeight = b.height),
        a.setScale(b.width / 2, b.height / 2, 1);
    }),
    (d.updateTitleBillboardContent = function(a, b) {
      var d = a.contentWidth,
        e = a.contentHeight,
        f = a.title,
        g = c.Util.getTitleBillboard(f, b, d, e, a.content);
      a.s({ "m.texture.image": g });
    }),
    (d.createEmptyBillboardForNode = function(a, b) {
      var c = this.createEmptyBillboard(b),
        d = a.getBoundingBox();
      return c.setParent(a), c.p(0, d.max.y, 0), c;
    }),
    (d.createEmptyBillboard = function(a) {
      a = c.Util.ext(
        {
          width: 256,
          height: 128,
          radius: 16,
          arrowWidth: 16,
          arrowHeight: 16,
          bgColor: "#5B85B5"
        },
        a
      );
      var b = this.getBillboardContent(a),
        d = new mono.Billboard();
      return (
        d.s({
          "m.texture.image": b,
          "m.transparent": !0,
          "m.alignment": mono.BillboardAlignment.bottomCenter,
          "m.vertical": !1
        }),
        (d.args = a),
        d.setScale(a.width, a.height, 1),
        d.setSelectable(!1),
        (d.contentWidth = a.width),
        (d.contentHeight = a.height),
        (d.isEmptyBillboard = !0),
        d
      );
    }),
    (d.createTitleBillboardForNode = function(a, b) {
      var c = this.createTitleBillboard(b),
        d = a.getBoundingBox();
      return c.setParent(a), c.p(0, d.max.y, 0), c;
    }),
    (d.getTitleBillboard = function(a, b, c, d, e) {
      var f = document.createElement("canvas");
      (f.width = c), (f.height = d);
      var g = f.getContext("2d");
      return (
        g.save(),
        g.drawImage(
          a,
          Math.max(0, (f.width - a.width) / 2),
          0,
          a.width,
          a.height
        ),
        g.translate(0, a.height),
        e &&
          g.drawImage(
            e,
            Math.max(0, (f.width - e.width) / 2),
            0,
            e.width,
            e.height,
            0,
            0,
            c,
            d - a.height
          ),
        g.drawImage(
          b,
          Math.max(0, (f.width - b.width) / 2),
          0,
          b.width,
          b.height,
          0,
          0,
          c,
          d - a.height
        ),
        g.restore(),
        f
      );
    }),
    (d.createTitleBillboard = function(a) {
      a = c.Util.ext(
        {
          title: "标题",
          titleColor: "#FFFFFF",
          titleFont: "24px LEDFont,sans-serif",
          titleBgColor: "#4a74a4",
          titleWidth: 256,
          titleHeight: 32,
          titleRadius: 16,
          width: 256,
          height: 128,
          radius: 1e-4,
          arrowWidth: 1e-4,
          arrowHeight: 1e-4,
          bgColor: "#5B85B5"
        },
        a
      );
      var b = this.getBillboardTitle(a),
        d = this.getBillboardContent(a),
        e = Math.max(b.width, d.width),
        f = b.height + d.height,
        g = c.Util.getTitleBillboard(b, d, e, f),
        h = new mono.Billboard();
      return (
        (h.title = b),
        (h.content = d),
        h.s({
          "m.texture.image": g,
          "m.transparent": !0,
          "m.alignment": mono.BillboardAlignment.bottomCenter,
          "m.vertical": !1
        }),
        (h.args = a),
        h.setScale(g.width, g.height, 1),
        h.setSelectable(!1),
        (h.contentWidth = e),
        (h.contentHeight = f),
        (h.isTitleBillboard = !0),
        h
      );
    }),
    (d.createTextBillboard = function(a, b) {
      var c = this.getTextBillboardContent(a, b),
        d = new mono.Billboard();
      return (
        d.s({
          "m.texture.image": c,
          "m.transparent": !0,
          "m.alignment": mono.BillboardAlignment.bottomCenter,
          "m.vertical": !1
        }),
        d.setScale(c.width / 2, c.height / 2, 1),
        d.setSelectable(!1),
        (d.contentWidth = c.width),
        (d.contentHeight = c.height),
        (d.isTextBillboard = !0),
        d
      );
    }),
    (d.createTextBillboardForNode = function(a, b, c) {
      b = b || "";
      var d = this.createTextBillboard(b, c),
        e = a.getBoundingBox();
      return d.setParent(a), d.p(0, e.max.y, 0), d;
    }),
    (d.getTextBillboardContent = function(a, b) {
      var c = document.createElement("canvas"),
        d = c.getContext("2d");
      d.font = "120px LEDFont,sans-serif";
      var e = [];
      e = a.indexOf("\n") ? a.split("\n") : [a];
      for (var f = 0, g = 0; g < e.length; g++)
        f =
          0 == g
            ? d.measureText(e[g]).width
            : Math.max(d.measureText(e[g]).width, f);
      var h = mono.Utils.getMaxTextSize(e, d.font),
        i = mono.Utils.nextPowerOfTwo(f),
        j = h.height,
        k = mono.Utils.nextPowerOfTwo(j),
        l = k / 4,
        m = i / 4;
      (c.height = k + l), (c.width = i);
      var n = k / e.length;
      j / e.length,
        this.getBillboardContent({
          width: i,
          height: k + l,
          radius: i / 16,
          arrowWidth: m,
          arrowHeight: l,
          bgColor: b,
          canvas: c
        }),
        (d.fillStyle = "white"),
        (d.textBaseline = "middle"),
        (d.font = "120px LEDFont,sans-serif");
      for (var g = 0; g < e.length; g++) {
        var o = e[g];
        (f = d.measureText(o).width),
          d.fillText(o, (i - f) / 2, n * (g + 0.44));
      }
      return c;
    }),
    (d.getBillboardTitle = function(a) {
      var b = (a.titleWidth = mono.Utils.nextPowerOfTwo(a.titleWidth) || 192),
        c = (a.titleHeight = mono.Utils.nextPowerOfTwo(a.titleHeight) || 64),
        d = a.titleRadius || 8,
        e = a.canvas;
      e ||
        ((e = document.createElement("canvas")), (e.width = b), (e.height = c));
      var f = e.getContext("2d");
      (f.globalAlpha = a.globalAlpha || 0.8),
        (f.fillStyle = a.titleBgColor || "#5B85B5"),
        (f.font = a.titleFont || "120px LEDFont,sans-serif");
      var g = (a.titleSizeWidth = f.measureText(a.title).width);
      return (
        (a.titleSizeHeight = mono.Utils.getMaxTextSize(a.title, a.titleFont)),
        f.beginPath(),
        f.moveTo(0, c),
        f.lineTo(0, d),
        f.arcTo(0, 0, d, 0, d),
        f.lineTo(b - d, 0),
        f.arcTo(b, 0, b, d, d),
        f.lineTo(b, c),
        f.closePath(),
        f.fill(),
        (f.textBaseline = "top"),
        (f.fillStyle = a.titleColor || "#A5855B"),
        f.fillText(a.title, (b - g) / 2, 2),
        f.restore(),
        f.restore(),
        e
      );
    }),
    (d.getBillboardContent = function(a) {
      var b = (a.width = a.width || 256),
        c = (a.height = a.height || 128),
        d = a.radius || 20,
        e = a.arrowWidth || 50,
        f = a.arrowHeight || 30,
        g = a.canvas;
      g ||
        ((g = document.createElement("canvas")), (g.width = b), (g.height = c));
      var h = g.getContext("2d");
      return (
        (h.globalAlpha = a.globalAlpha || 0.8),
        (h.fillStyle = a.bgColor || "#5B85B5"),
        h.save(),
        h.beginPath(),
        h.moveTo(d, 0),
        h.lineTo(b - d, 0),
        h.arcTo(b, 0, b, d, d),
        h.lineTo(b, c - f - d),
        h.arcTo(b, c - f, b - d, c - f, d),
        h.lineTo(b / 2 + e / 2, c - f),
        h.lineTo(b / 2, c),
        h.lineTo(b / 2 - e / 2, c - f),
        h.lineTo(d, c - f),
        h.arcTo(0, c - f, 0, c - f - d, d),
        h.lineTo(0, d),
        h.arcTo(0, 0, d, 0, d),
        h.closePath(),
        h.fill(),
        h.restore(),
        g
      );
    }),
    (d.ext = function() {
      var a,
        c,
        d,
        e,
        f,
        g,
        h = arguments[0] || {},
        i = 1,
        j = arguments.length,
        k = !1;
      for (
        "boolean" == typeof h && ((k = h), (h = arguments[1] || {}), (i = 2)),
          "object" == typeof h || jQuery.isFunction(h) || (h = {}),
          j === i && ((h = this), --i);
        j > i;
        i++
      )
        if (null != (a = arguments[i]))
          for (c in a)
            (d = h[c]),
              (e = a[c]),
              h !== e &&
                (k && e && (jQuery.isPlainObject(e) || (f = jQuery.isArray(e)))
                  ? (f
                      ? ((f = !1), (g = d && jQuery.isArray(d) ? d : []))
                      : (g = d && jQuery.isPlainObject(d) ? d : {}),
                    (h[c] = jQuery.extend(k, g, e)))
                  : e !== b && (h[c] = e));
      return h;
    }),
    (d.jsonUtil = {
      object2String: function(a) {
        try {
          var b = JSON.stringify(a);
          return b;
        } catch (c) {
          if (d.isDebug()) throw c;
          console.error("json对象转字符串失败", a);
        }
      },
      string2Object: function(a) {
        try {
          var b = JSON.parse(a);
          return b;
        } catch (c) {
          if (Util.isDebug()) throw c;
          console.error("字符串转json对象失败", a);
        }
      }
    }),
    (a.jsonUtil = d.jsonUtil),
    (c.Base = function() {
      mono.PropertyChangeDispatcher.call(this);
    }),
    mono.extend(c.Base, mono.PropertyChangeDispatcher, {
      onPropertyChange: function(a, b, c) {}
    }),
    (c.Category = function(a) {
      c.Base.call(this),
        (a = a || {}),
        "string" == typeof a && (a = { id: a }),
        (this._id = a.id),
        (this._description = a.description),
        (this._selectable = !0),
        (this._stopAlarmPropagationable = !1),
        (this._lazyLoad = !1),
        (this._lazyLoadScene = ""),
        (this._rotationExp = {}),
        (this._positionExp = {}),
        (this.handleDoubleClick = null),
        (this.handleClick = null);
    }),
    mono.extend(c.Category, c.Base, {
      ___accessor: ["description", "stopAlarmPropagationable"],
      getId: function() {
        return this._id;
      },
      setId: function(a) {
        if (this._id !== b) throw "Can not set id";
        this._id = a;
      },
      fromJson: function(a) {
        (this._id = a.id), (this._description = a.description);
      }
    }),
    (c.Data = function(a) {
      c.Base.call(this),
        (a = a || {}),
        "string" == typeof a && (a = { id: a }),
        (this._id = a.id),
        (this._description = a.description),
        (this._position = a.position || new mono.Vec3()),
        (this._position2d = a.position2d || null),
        (this._rotation = a.rotation || new mono.Vec3()),
        (this._location = null),
        (this._userDataMap = {}),
        (this._parentId = a.parentId),
        (this._hostId = ""),
        (this._dataTypeId = a.dataTypeId),
        (this._childList = new mono.List()),
        (this._alarmState = new c.AlarmState(this)),
        (this._powerParentId = ""),
        (this._allLinks = {});
    }),
    mono.extend(c.Data, c.Base, {
      ___accessor: [
        "rotation",
        "parentId",
        "hostId",
        "dataTypeId",
        "alarmState",
        "description"
      ],
      getId: function() {
        return this._id;
      },
      getLocation: function() {
        return this._location;
      },
      setLocation: function(a) {
        if (a) {
          var b = new c.Location(a);
          if (
            this._location &&
            b.x == this._location.x &&
            b.y == this._location.y &&
            b.z == this._location.z
          )
            return;
          var d = this._location;
          (this._location = b), this.firePropertyChange("location", d, b);
        }
      },
      setPosition: function(a, b, c) {
        var d;
        if (
          (3 === arguments.length
            ? (d = new mono.Vec3(a, b, c))
            : 1 === arguments.length &&
              (d = mono.Utils.isArray(a)
                ? new mono.Vec3(a[0], a[1], a[2])
                : new mono.Vec3(a.x || 0, a.y || 0, a.z || 0)),
          !this._position ||
            d.x != this._position.x ||
            d.y != this._position.y ||
            d.z != this._position.z)
        ) {
          var e = this._position;
          (this._position = d), this.firePropertyChange("position", e, d);
        }
      },
      setPosition2d: function(a, b) {
        this._position2d = new mono.Vec2(a, b);
      },
      getValue: function(a) {
        return a ? (this["_" + a] ? this["_" + a] : this.getUserData(a)) : null;
      },
      getPosition: function() {
        return this._position || new mono.Vec3();
      },
      u: function(a) {
        if (a) for (var b in a) this.setUserData(b, a[b]);
      },
      addLink: function(a) {
        a &&
          a instanceof c.Link &&
          a.getId() &&
          !this._allLinks[a.getId()] &&
          (this._allLinks[a.getId()] = a);
      },
      removeLink: function(a) {
        a && a.getId() && delete this._allLinks[a.getId()];
      },
      getAllLinks: function() {
        return this._allLinks;
      },
      getPosition2d: function() {
        return this._position2d;
      },
      setUserData: function(a, b) {
        null == b ? delete this._userDataMap[a] : (this._userDataMap[a] = b);
      },
      getUserData: function(a) {
        return this._userDataMap[a];
      },
      fromJson: function(a) {
        "string" == typeof a && (a = JSON.parse(a)),
          (this._id = a.id),
          (this._description = a.description),
          !a.position ||
          (a.position.x === b && a.position.y === b && a.position.z === b)
            ? mono.Utils.isArray(a.position) &&
              (this._position = new mono.Vec3(
                a.position[0] || 0,
                a.position[1] || 0,
                a.position[2] || 0
              ))
            : (this._position = new mono.Vec3(
                a.position.x || 0,
                a.position.y || 0,
                a.position.z || 0
              )),
          !a.rotation ||
            (a.rotation.x === b && a.rotation.y === b && a.rotation.z === b) ||
            (this._rotation = new mono.Vec3(
              a.rotation.x || 1,
              a.rotation.y || 1,
              a.rotation.z || 1
            )),
          this.setLocation(a.location),
          (this._parentId = a.parentId),
          (this._dataTypeId = a.dataTypeId);
      },
      onAlarmChange: function() {},
      addChild: function(a) {
        a && this._childList.add(a);
      },
      addChildren: function(a) {
        if (a && !(a.length < 1))
          for (var b = 0; b < a.length; b++) {
            var c = a[b];
            this.addChild(c);
          }
      },
      removeChild: function(a) {
        this._childList.remove(a);
      },
      removeChildren: function(a) {
        if (a && !(a.length < 1))
          for (var b = 0; b < a.length; b++) {
            var c = a[b];
            this.removeChild(c);
          }
      },
      getChildren: function() {
        return this._childList;
      }
    }),
    (c.DataType = function(a) {
      c.Base.call(this),
        (a = a || {}),
        "string" == typeof a && (a = { id: a }),
        (this._id = a.id),
        (this._categoryId = ""),
        (this._description = ""),
        (this._size = null),
        (this._childrenSize = new c.Size()),
        (this._model2d = ""),
        (this._model2dParameters = null),
        (this._parameters = null),
        (this._model = ""),
        (this._modelParameters = null),
        (this._simpleModel = ""),
        (this._simpleModelParameters = null),
        (this._selectable = !0),
        (this._stopAlarmPropagationable = !1),
        (this._batchable = !1),
        (this._lazyable = !1),
        (this.handleDoubleClick = null),
        (this.handleClick = null),
        (this._rotationExp = {}),
        (this._positionExp = {}),
        (this._visible = !0),
        (this._weight = 0),
        (this._power = 0),
        (this._templateDatas = a.templateDatas || []);
    }),
    mono.extend(c.DataType, c.Base, {
      ___accessor: [
        "categoryId",
        "description",
        "rotationExp",
        "positionExp",
        "size",
        "childrenSize",
        "parameters",
        "model2d",
        "model2dParameters",
        "model",
        "modelParameters",
        "simpleModel",
        "simpleModelParameters",
        "batchable",
        "lazyable",
        "selectable",
        "stopAlarmPropagationable"
      ],
      getId: function() {
        return this._id;
      },
      setId: function(a) {
        if (this._id !== b) throw "Can't change id";
        this._id = a;
      },
      getTemplateDatas: function() {
        return this._templateDatas;
      },
      setTemplateDatas: function(a) {
        this._templateDatas.length = 0;
        var b = this;
        a &&
          a.length > 0 &&
          a.forEach(function(a) {
            b.addTemplateData(a);
          });
      },
      addTemplateData: function(a) {
        if (a instanceof c.Data) this._templateDatas.push(a);
        else {
          var b = new c.Data();
          b.fromJson(a), this._templateDatas.push(b);
        }
      },
      fromJson: function(a) {
        "string" == typeof a && (a = JSON.parse(a)),
          (this._id = a.id),
          (this._categoryId = a.categoryId),
          (this._description = a.description),
          (this._size = new c.Size(a.size)),
          (this._childrenSize = new c.Size(a.childrenSize)),
          (this._model2d = a.model2d),
          (this._model2dParameters = d.translateJson(a.model2dParameters)),
          (this._model = a.model),
          (this._modelParameters = d.translateJson(a.modelParameters)),
          (this._simpleModel = a.simpleModel),
          (this._simpleModelParameters = a.simpleModelParameters),
          (this._selectable = a.selectable === b ? !0 : a.selectable),
          (this._stopAlarmPropagationable = !!a.stopAlarmPropagationable),
          (this._batchable = !!a.batchable),
          (this._rotationExp = a.rotationExp || {}),
          (this._positionExp = a.positionExp || {}),
          (this._lazyable = a.lazyable),
          (this._weight = a.weight);
      }
    }),
    (c.DataManager = function() {
      (this.defaultCategory = new c.Category("")),
        (this._categories = []),
        (this._categoryMap = {}),
        (this._dataTypes = []),
        (this._dataTypeMap = {}),
        (this._datas = []),
        (this._dataMap = {}),
        (this._roots = []),
        (this._rootMap = {}),
        (this._links = []),
        (this._linkMap = {}),
        (this._dataTypeDatas = {}),
        (this._categoryDatas = {}),
        (this._scenes = []),
        (this._sceneMap = {}),
        (this._rootScene = null),
        (this._categorySceneMap = {}),
        (this._dataManagerChangeDispatcher = new mono.EventDispatcher()),
        (this._dataPropertyChangeDispatcher = new mono.EventDispatcher());
    }),
    mono.extend(c.DataManager, mono.PropertyChangeDispatcher, {
      addScene: function(a) {
        if (!(a instanceof c.Scene)) return !1;
        var b = a.getId();
        if (this._sceneMap[b]) throw "Scene with id '" + b + "' already exists";
        var d = a.getCategoryId();
        if (!this._categoryMap[d] && !a.isRoot())
          throw "Scene Category with category id '" + d + "' does not exist";
        if (this._categorySceneMap[d])
          throw "Scene with category id '" + d + "' already exists";
        if (a.isRoot()) {
          if (null != this._rootScene) throw "Only support one root scene";
          this._rootScene = a;
        }
        this._scenes.push(a),
          (this._sceneMap[b] = a),
          (this._categorySceneMap[d] = a);
      },
      addSceneFromJson: function(a) {
        for (var b = 0, d = a.length; d > b; b++) {
          var e = new c.Scene();
          e.fromJson(a[b]), this.addScene(e);
        }
      },
      getSceneByCategory: function(a) {
        if (!a) return null;
        var b = a.getId ? a.getId() : a;
        return this._categorySceneMap[b];
      },
      getSceneByData: function(a) {
        var b = this.getCategoryForData(a);
        return this.getSceneByCategory(b);
      },
      getRootScene: function() {
        return this._rootScene;
      },
      getChildrenScene: function(a) {},
      addCategory: function(a) {
        var b = a.getId();
        if (!(a instanceof c.Category)) throw "Can only add it.Category";
        if (this._categoryMap[b])
          throw "Category for id '" + b + "' already exists";
        this._categories.push(a), (this._categoryMap[b] = a);
      },
      removeCategory: function(a) {
        if (!a) return !1;
        var b = a.getId();
        if (!this._categoryMap[b]) return !1;
        var c = this._categories.indexOf(a);
        return -1 == c
          ? !1
          : (delete this._categoryMap[b], this._categories.splice(c, 1), !0);
      },
      removeCategoryById: function(a) {
        var b = this._categoryMap[a];
        b && this.removeCategory(b);
      },
      addCategories: function(a) {
        if (mono.Utils.isArray(a))
          for (var b = 0; b < a.length; b++) {
            var c = a[b];
            this.addCategory(c);
          }
      },
      addCategoryFromJson: function(a) {
        var b = a;
        "string" == typeof a && (b = JSON.parse(a));
        for (var d = 0, e = b.length; e > d; d++) {
          var f = b[d],
            g = new c.Category();
          g.fromJson(f), this.addCategory(g);
        }
      },
      addDataType: function(a) {
        if (a) {
          if (!(a instanceof c.DataType)) throw "Can only add 'it.DataType'";
          var b = a.getId();
          if (this._dataTypeMap[b])
            throw "DataType for id '" + b + "' already exists";
          var d = a.getCategoryId();
          if (d && !this._categoryMap[d])
            throw "Category for '" + d + "' does not exist";
          this._dataTypes.push(a), (this._dataTypeMap[b] = a);
        }
      },
      removeDataType: function(a) {
        if (!a) return !1;
        var b = a.getId();
        if (!this._dataTypeMap[b]) return !1;
        var c = this._dataTypes.indexOf(a);
        return -1 === c
          ? !1
          : this._dataTypeDatas[b]
            ? !1
            : (delete this._dataTypeMap[b], void this._dataTypes.splice(c, 1));
      },
      removeDataTypeById: function(a) {
        this.removeDataType[this._dataTypeMap[a]];
      },
      getCategoryForDataType: function(a) {
        var b = a;
        "string" == typeof a && (b = this._dataTypeMap[a]);
        var c = b.getCategoryId();
        return this._categoryMap[c];
      },
      getCategoryForData: function(a) {
        var b = this.getDataTypeForData(a);
        if (b) {
          var c = b.getCategoryId();
          return this._categoryMap[c];
        }
        return null;
      },
      getDataTypeForData: function(a) {
        if (a) {
          var b = a;
          if (
            ("string" == typeof b && (b = this._dataMap[b]),
            b.getDataTypeId || console.log("data.getDataTypeId"),
            b && b instanceof c.Data)
          ) {
            var d = b.getDataTypeId();
            return this._dataTypeMap[d];
          }
        }
      },
      addDataTypeFromJson: function(a) {
        for (var b = 0, d = a.length; d > b; b++) {
          var e = new c.DataType();
          e.fromJson(a[b]), this.addDataType(e);
        }
      },
      setParentAndChildren: function(a) {
        if (!a) return null;
        var b = a.getParentId();
        if (b) {
          var c = this._dataMap[b];
          c && c.addChild(a);
        }
        var d = this.getChildren(a);
        a.addChildren(d);
      },
      addData: function(a, c) {
        if (a) {
          c === b && (c = !0);
          var d = a.getId(),
            e = a.getDataTypeId();
          if (this._dataMap[d]) throw "Data for '" + d + "' already exists";
          var f = this.getDataTypeForData(a);
          if (!f) throw "DataType '" + e + "' does not exist";
          this._datas.push(a), (this._dataMap[d] = a);
          var g = a.getParentId();
          g || (this._roots.push(a), (this._rootMap[d] = a)),
            this.setParentAndChildren(a);
          var h = this._dataTypeDatas[e];
          null == h && ((h = {}), (this._dataTypeDatas[e] = h)), (h[d] = a);
          var i = this.getCategoryForData(a);
          if (i) {
            var j = this._categoryDatas[i.getId()];
            null == j && ((j = {}), (this._categoryDatas[i.getId()] = j)),
              (j[d] = a);
          }
          a.addPropertyChangeListener(this.handleDataPropertyChange, this),
            c &&
              this._dataManagerChangeDispatcher.fire({
                kind: "add",
                data: a,
                source: this
              });
        }
      },
      addDataFromJson: function(a) {
        var b = a;
        "string" == typeof a && (b = JSON.parse(a));
        for (var d = 0, e = b.length; e > d; d++) a.id, a.dataTypeId;
        for (d = 0; e > d; d++) {
          var f = b[d],
            g = new c.Data();
          g.fromJson(f), this.addData(g);
        }
      },
      removeData: function(a, b) {
        if (!a) return !1;
        var c = a.getId();
        if (!this._dataMap[c]) return !1;
        var d = this._datas.indexOf(a);
        if (-1 === d) return !1;
        if (a.getParentId()) {
          var e = this._dataMap[a.getParentId()];
          e && e.remove(a);
        }
        var f = a.getChildren();
        if (f && f.size() && !b) return !1;
        if (f && f.size())
          for (var g = 0; g < f.size(); g++) this.removeData(f.get(g), b);
        delete this._dataMap[c], this._datas.splice(d, 1);
        var h = a.getDataTypeId(),
          i = this._dataTypeDatas[h];
        null != i && delete i[c];
        var j = this.getCategoryForData(a);
        if (j) {
          var k = this._categoryDatas[j.getId()];
          null != k && delete k[c];
        }
        return (
          a.removePropertyChangeListener(this.handleDataPropertyChange, this),
          this._dataManagerChangeDispatcher.fire({
            kind: "remove",
            data: a,
            source: this
          }),
          !0
        );
      },
      addLink: function(a) {
        var b = a.getId();
        if (!this._linkMap[b]) {
          var c = a.getFromId(),
            d = a.getToId();
          return this._dataMap[c]
            ? this._dataMap[d]
              ? ((this._linkMap[b] = a),
                this._links.push(a),
                this._dataMap[c].addLink(a),
                this._dataMap[d].addLink(a),
                this._dataManagerChangeDispatcher.fire({
                  kind: "add",
                  data: a,
                  source: this
                }),
                !0)
              : void console.log("To Id does not exist")
            : void console.log("From Id does not exist");
        }
      },
      removeLink: function(a) {
        var b = a.getId();
        if (this._linkMap[b]) {
          var c = this._links.indexOf(a);
          this._links.splice(c, 1), delete this._linkMap[b];
        }
        var d = a.getFromId(),
          e = a.getToId();
        this._dataMap[d].removeLink(a),
          this._dataMap[e].removeLink(a),
          this._dataManagerChangeDispatcher.fire({
            kind: "remove",
            data: a,
            source: this
          });
      },
      getParent: function(a) {
        if (!a) return null;
        var b = a.getParentId();
        return this._dataMap[b];
      },
      getChildren: function(a, b) {
        var c = new Date(),
          d = [];
        if (!a) return d;
        var e = a.getId();
        for (var f in this._dataMap) {
          var a = this._dataMap[f];
          (b && a.getDataTypeId() != b) || (a.getParentId() === e && d.push(a));
        }
        return (
          console.log(
            " getChild-------: " + (new Date().getTime() - c.getTime())
          ),
          d
        );
      },
      isAncestor: function(a, b, c) {
        if (!b || !a) return !1;
        if (b.getId() === a || b.getParentId() === a) return !0;
        var c = c || this;
        if (b.getParentId()) {
          var d = this._dataMap[b.getParentId()];
          if (d) return c.isAncestor(a, d, c);
        }
        return !1;
      },
      getDescendants: function(a) {
        var b = [];
        if (!a) return b;
        var c = a.getId();
        for (var d in this._dataMap) {
          var a = this._dataMap[d];
          this.isAncestor(c, a) && b.push(a);
        }
        return b;
      },
      getDataMap: function() {
        return this._dataMap;
      },
      getLinkMap: function() {
        return this._linkMap;
      },
      getLinkById: function(a) {
        return a ? this._linkMap[a] : null;
      },
      getFromLinks: function(a) {},
      getToLinks: function(a) {},
      getDataMapByCategory: function(a) {
        var b = a;
        return (
          b instanceof c.Category && (c = b.getId()), this._categoryDatas[b]
        );
      },
      getDataById: function(a) {
        if (!a) return null;
        var b = this._dataMap[a];
        if (!b && a.indexOf("@") > 0) {
          var c = a.split("@");
          c[0], c[1], this.getDataTypeForData();
        }
        return b;
      },
      getDatas: function() {
        return this._datas;
      },
      getLinks: function() {
        return this._links;
      },
      getAncestors: function(a, b) {
        b = b || [];
        var c = this.getDataById(a.getParentId());
        return c && (b.push(c), this.getAncestors(c, b)), b;
      },
      getAncestor: function(a, b) {
        var c = this.getDataTypeForData(a),
          d = this.getCategoryForData(a);
        if (b(a, c, d)) return a;
        var e = this.getParent(a);
        return null == e ? null : this.getAncestor(e, b);
      },
      getRootMap: function() {
        return this._rootMap;
      },
      getRoots: function() {
        return this._roots;
      },
      isLazyable: function(a) {
        if (!a) return !1;
        var b = this.getDataTypeForData(a);
        if (b.isLazyable()) return !0;
        var c = this.getParent(a);
        return this.isLazyable(c) ? !0 : !1;
      },
      fromJson: function(a) {
        a = d.translateJson(a);
        for (
          var b = a.categories || [],
            c = a.dataTypes || [],
            e = a.datas || [],
            f = {},
            g = {},
            h = 0;
          h < b.length;
          h++
        ) {
          var i = b[h];
          f[i.id] = i;
        }
        for (h = 0; h < c.length; h++) {
          var j = c[h];
          if (
            j.categoryId &&
            !f[j.categoryId] &&
            !this._categoryMap[j.categoryId]
          )
            throw "Category for '" + j.categoryId + "' does not exist";
          g[j.id] = j;
        }
        for (h = 0; h < e.length; h++) {
          var k = e[h],
            l = k.dataTypeId;
          if (!g[l] && !this._dataTypeMap[l])
            throw "DataType '" + l + "' does not exist";
        }
        b && b.length && this.addCategoryFromJson(b),
          c && c.length && this.addDataTypeFromJson(c),
          e && e.length && this.addDataFromJson(e);
      },
      handleDataPropertyChange: function(a) {
        var b = a.source;
        if ("parentId" === a.property) {
          var c = a.oldValue,
            d = a.newValue;
          if (null == d) this._roots.push(b), (this._rootMap[b.getId()] = b);
          else if (null == c) {
            delete this._rootMap[b.getId()];
            var e = this._roots.indexOf(b);
            -1 != e && this._roots.splice(e, 1);
          }
        }
        this.onDataPropertyChanged(b, a),
          this._dataPropertyChangeDispatcher.fire(a);
      },
      onDataPropertyChanged: function(a, b) {},
      addDataPropertyChangeListener: function(a, b, c) {
        this._dataPropertyChangeDispatcher.add(a, b, c);
      },
      removeDataPropertyChangeListener: function(a, b) {
        this._dataPropertyChangeDispatcher.remove(a, b);
      },
      addDataManagerChangeListener: function(a, b, c) {
        this._dataManagerChangeDispatcher.add(a, b, c);
      },
      addDataBoxChangeListener: function(a, b, c) {
        this._dataManagerChangeDispatcher.add(a, b, c);
      },
      removeDataManagerChangeListener: function(a, b) {
        this._dataManagerChangeDispatcher.remove(a, b);
      }
    }),
    (c.Scene = function(a) {
      (a = a || {}),
        "string" == typeof a && (a = { id: a }),
        (this._id = a.id),
        (this._categoryId = a.categoryId),
        (this._root = a.root),
        (this._sceneType = a.sceneType || "ShowSelf"),
        (this._twod = a.twod || !1),
        (this._withGis = a.withGis || !1),
        (this.zoomLevel = a.zoomLevel || 5),
        (this.center = a.center),
        (this._description = "");
    }),
    mono.extend(c.Scene, Object, {
      ___accessor: [
        "categoryId",
        "sceneType",
        "root",
        "twod",
        "withGis",
        "description"
      ],
      getId: function() {
        return this._id;
      },
      isRoot: function() {
        return this._root;
      },
      fromJson: function(a) {
        "string" == typeof a && (a = JSON.parse(a)),
          (this._id = a.id),
          (this._categoryId = a.categoryId),
          (this._root = a.root),
          (this._sceneType = a.sceneType || "ShowSelf"),
          (this._twod = a.twod || !1),
          (this._withGis = a.withGis || !1),
          (this.zoomLevel = a.zoomLevel || 5),
          (this.center = a.center),
          (this._description = a.description);
      }
    }),
    (c.Link = function(a) {
      (a = a || {}),
        "string" == typeof a && (a = { id: a }),
        (this._id = a.id),
        (this._name = a.name || ""),
        (this._type = a.type || ""),
        (this._fromId = a.fromId),
        (this._toId = a.toId),
        (this._userDataMap = {}),
        (this._fromControls = a.fromControls || null),
        (this._toControls = a.toControls || null);
    }),
    mono.extend(c.Link, Object, {
      ___accessor: [
        "name",
        "type",
        "fromId",
        "toId",
        "fromControls",
        "toControls",
        "type"
      ],
      getId: function() {
        return this._id;
      },
      setId: function(a) {
        if (this._id !== b) throw "Can't change id";
        this._id = a;
      },
      setUserData: function(a, b) {
        null == b ? delete this._userDataMap[a] : (this._userDataMap[a] = b);
      },
      getUserData: function(a) {
        return this._userDataMap[a];
      }
    }),
    (c.EventHandler = function() {}),
    mono.extend(c.EventHandler, Object, {
      getQueue: function() {
        return 1e3;
      },
      shouldHandleDoubleClickElement: function(a, b, c, d) {
        return !1;
      },
      shouldPropogateDoubleClickElement: function(a, b, c, d) {
        return !1;
      },
      shouldHandleDoubleClickBackground: function(a) {
        return !1;
      },
      shouldPropogateDoubleClickBackground: function(a) {
        return !1;
      },
      shouldHandleClickElement: function(a, b, c, d) {
        return !1;
      },
      shouldPropogateClickElement: function(a, b, c, d) {
        return !1;
      },
      shouldHandleClickBackground: function(a) {
        return !1;
      },
      shouldPropogateClickBackground: function(a) {
        return !1;
      },
      handleDoubleClickBackground: function(a) {},
      handleClickBackground: function(a) {},
      handleDoubleClickElement: function(a, b, c, d) {},
      handleClickElement: function(a, b, c, d) {},
      handleMouseMoveElement: function(a, b, c, d, e) {},
      handleMouseMoveBackground: function(a) {}
    }),
    (c.ViewManager = function(a, b, c) {
      mono.PropertyChangeDispatcher.call(this),
        (this.sceneManager = a),
        (this.network = b || this.initView()),
        (this.network.getRootView().style.position = "absolute"),
        (this._for2d = c),
        (this._defaultNode = new mono.List()),
        this.initResource(),
        this.configView();
    }),
    mono.extend(c.ViewManager, mono.PropertyChangeDispatcher, {
      initView: function() {
        return new mono.Network3D();
      },
      initResource: function() {
        (this._eventHandlers = []),
          (this._materialFilters = []),
          (this._visibleFilters = []),
          (this._selectableFilters = []),
          (this._renderCallbacks = []),
          (this._focusNode = null);
      },
      initDefault: function() {
        (this.defaultEventHandler = new c.DefaultEventHandler(
          this.sceneManager
        )),
          this._eventHandlers.push(this.defaultEventHandler),
          (this.defaultMaterialFilter = new c.VirtualManager(
            this.sceneManager
          )),
          this._materialFilters.push(this.defaultMaterialFilter),
          (this.defaultSelectableFilter = new c.SelectableManager(
            this.defaultMaterialFilter
          )),
          this._selectableFilters.push(this.defaultSelectableFilter);
        var a = this;
        this.addPropertyChangeListener(function(b) {
          if ("focusNode" == b.property) {
            var c = b.newValue;
            if (a.defaultMaterialFilter)
              if (c) {
                if (
                  a.defaultMaterialFilter.isDealWith(a.getDataByNode(c)) &&
                  (a.defaultMaterialFilter.addAll(),
                  a.defaultMaterialFilter.removeByDescendant(c),
                  a.sceneManager.isLink(c))
                ) {
                  var d = c.getFromNode(),
                    e = c.getToNode();
                  a.defaultMaterialFilter.removeByDescendant(d),
                    a.defaultMaterialFilter.removeByDescendant(e);
                }
              } else a.defaultMaterialFilter.clear();
          }
        }),
          (this.tooltipManager = new c.TooltipManager(this.sceneManager)),
          this.addEventHandler(this.tooltipManager),
          this.addRenderCallback(this.tooltipManager),
          this.addDefaultYRistrict();
      },
      clear: function() {
        var a = this.network.getDataBox();
        a.clear(),
          this._defaultNode.size() > 0 &&
            this._defaultNode.forEach(function(b) {
              b instanceof mono.Light || a.add(b);
            });
      },
      addDefaultNode: function(a) {
        if (a) {
          var b = this.network.getDataBox();
          a instanceof mono.Light || this._defaultNode.add(a), b.add(a);
        }
      },
      initLights: function() {
        var a = new mono.AmbientLight(12303291);
        this.network.getDataBox(), this.addDefaultNode(a);
        var b = new mono.PointLight(16777215, 0.05);
        b.setPosition(0, 1e3, -1e3), this.addDefaultNode(b);
        var b = new mono.PointLight(16777215, 0.05);
        b.setPosition(0, 1e3, 1e3), this.addDefaultNode(b);
        var b = new mono.PointLight(16777215, 0.05);
        b.setPosition(1e3, -1e3, -1e3), this.addDefaultNode(b);
      },
      addDefaultYRistrict: function() {
        var a = this.getDefaultInteraction();
        (a.yRistrict = !0),
          (a.yLowerLimitAngle = 0),
          (a.yUpLimitAngle = Math.PI / 4);
      },
      removeDefaultYRistrict: function() {
        var a = this.getDefaultInteraction();
        (a.yRistrict = !0),
          (a.yLowerLimitAngle = -Math.PI / 2),
          (a.yUpLimitAngle = Math.PI / 2);
      },
      configView: function() {
        this.initLights();
        var a = this;
        this.network.getRootView().addEventListener("dblclick", function(b) {
          var c = a.filterDoubleClickElement(b);
          c ? a.handleDoubleClick(c) : a.handleDoubleClickBackground();
        }),
          this.network.getRootView().addEventListener("click", function(b) {
            var c = a.filterClickElement(b);
            c ? a.handleClick(c) : a.handleClickBackground();
          }),
          this.network.getRootView().addEventListener("mousemove", function(b) {
            var c = a.filterMouseMoveElement(b);
            c ? a.handleMouseMoveElement(c, b) : a.handleMouseMoveBackground(b);
          }),
          this.setOverLoadMaterial(),
          this.setVisibleFunction(),
          this.setSelectableFunction(),
          this.setNetworkRenderCallback();
      },
      getDataByNode: function(a) {
        return a ? this.sceneManager.getNodeData(a) : null;
      },
      setFocusNode: function(a) {
        if (this._focusNode != a) {
          var b = this._focusNode;
          (this._focusNode = a), this.firePropertyChange("focusNode", b, a);
        }
      },
      getFocusNode: function() {
        return this._focusNode;
      },
      getDefaultEventHandler: function() {
        return this.defaultEventHandler;
      },
      removeDefaultEventHandler: function() {
        this.defaultEventHandler &&
          (this.removeEventHandler(this.defaultEventHandler),
          (this.defaultEventHandler = null));
      },
      getDefaultVirtualMaterialFilter: function() {
        return this.defaultMaterialFilter;
      },
      removeDefaultMaterialFilter: function() {
        this.defaultMaterialFilter &&
          (this.removeMaterialFilter(this.defaultMaterialFilter),
          (this.defaultMaterialFilter = null));
      },
      getDefaultInteraction: function() {
        return this.network.getDefaultInteraction();
      },
      addMaterialFilter: function(a) {
        this.includeMaterialFilter(a) || this._materialFilters.push(a);
      },
      removeMaterialFilter: function(a) {
        var b = this._materialFilters.indexOf(a);
        -1 !== b &&
          (a.destoryBillboard && a.destoryBillboard(),
          this._materialFilters.splice(b, 1));
      },
      includeMaterialFilter: function(a) {
        var b = this._materialFilters.indexOf(a);
        return -1 !== b ? !0 : !1;
      },
      addVisibleFilter: function(a) {
        this.includeVisibleFilter(a) || this._visibleFilters.push(a);
      },
      removeVisibleFilter: function(a) {
        var b = this._visibleFilters.indexOf(a);
        -1 !== b && this._visibleFilters.splice(b, 1);
      },
      includeVisibleFilter: function(a) {
        var b = this._visibleFilters.indexOf(a);
        return -1 !== b ? !0 : !1;
      },
      addSelectableFilter: function(a) {
        this._selectableFilters.push(a);
      },
      removeSelectableFilter: function(a) {
        var b = this._selectableFilters.indexOf(a);
        -1 !== b && this._selectableFilters.splice(b);
      },
      addEventHandler: function(a, d) {
        return a instanceof c.EventHandler
          ? d === b
            ? this._eventHandlers.push(a)
            : this._eventHandlers.splice(d, 0, a)
          : void 0;
      },
      removeEventHandler: function(a) {
        var b = this._eventHandlers.indexOf(a);
        -1 !== b && this._eventHandlers.splice(b, 1);
      },
      addRenderCallback: function(a, c) {
        return a.onRenderCallback
          ? c === b
            ? this._renderCallbacks.push(a)
            : this._renderCallbacks.splice(c, 0, a)
          : void 0;
      },
      removeRenderCallback: function(a) {
        var b = this._renderCallbacks.indexOf(eventHandler);
        -1 !== b && this._renderCallbacks.splice(b, 1);
      },
      filterMouseMoveElement: function(a) {
        return this.network.getFirstElementByMouseEvent(a, !1);
      },
      handleMouseMoveElement: function(a, b) {
        for (
          var c, d = a.element, e = this.getDataByNode(d), f = 0;
          f < this._eventHandlers.length;
          f++
        )
          (c = this._eventHandlers[f]),
            c.handleMouseMoveElement(d, this.network, e, a, b);
      },
      handleMouseMoveBackground: function(a) {
        for (var b, c = 0; c < this._eventHandlers.length; c++)
          (b = this._eventHandlers[c]),
            b.handleMouseMoveBackground(this.network, a);
      },
      filterDoubleClickElement: function(a) {
        return this.network.getFirstElementByMouseEvent(a, !1);
      },
      getAnimation: function(a) {
        var b = a.element ? a.element : a,
          c = b.getClient("animation");
        return c;
      },
      playAnimation: function(a, b) {
        (b = b || this.getAnimation(a)),
          b && make.Default.playAnimation(a.element || a, b);
      },
      filterClickElement: function(a) {
        return this.network.getFirstElementByMouseEvent(a, !1);
      },
      handleDoubleClick: function(a) {
        for (var b, c = a.element, d = 0; d < this._eventHandlers.length; d++) {
          b = this._eventHandlers[d];
          var e = this.getDataByNode(c);
          if (b.shouldHandleDoubleClickElement(c, this.network, e, a))
            return void b.handleDoubleClickElement(c, this.network, e, a);
        }
        var f = this.getAnimation(c);
        f && this.playAnimation(c, f);
      },
      handleClick: function(a) {
        for (var b, c = a.element, d = 0; d < this._eventHandlers.length; d++) {
          b = this._eventHandlers[d];
          var e = this.getDataByNode(c);
          if (b.shouldHandleClickElement(c, this.network, e, a))
            return void b.handleClickElement(c, this.network, e, a);
        }
      },
      handleDoubleClickBackground: function() {
        for (var a, b = 0; b < this._eventHandlers.length; b++)
          if (
            ((a = this._eventHandlers[b]),
            a.shouldHandleDoubleClickBackground(this.network))
          )
            return void a.handleDoubleClickBackground(this.network);
      },
      handleClickBackground: function() {
        for (var a, b = 0; b < this._eventHandlers.length; b++)
          if (
            ((a = this._eventHandlers[b]),
            a.shouldHandleClickBackground(this.network))
          )
            return void a.handleClickBackground(this.network);
      },
      setOverLoadMaterial: function() {
        var a = this.network;
        a.sortOpaqueOrderByMaterial = !1;
        var b = this._materialFilters;
        a.getOverLoadMaterial = function(a, c) {
          for (var d = null, e = 0; e < b.length; e++) {
            var f = b[e];
            d = f.filterMaterial(c, d, a);
          }
          return d;
        };
      },
      setVisibleFunction: function() {
        var a = this.network,
          b = this;
        a.isVisible = function(c) {
          if (c) {
            if (c instanceof TGL.Link || c instanceof TGL.PathLink) {
              if (!c.isVisible()) return !1;
              if (!this.isVisible(c._fromNode)) return !1;
              if (!this.isVisible(c._toNode)) return !1;
            }
            if (!c.isVisible()) return !1;
            for (var d = b._visibleFilters, e = 0; e < d.length; e++) {
              var f = d[e];
              if (!f.isVisible(c, b.getDataByNode(c), a)) return !1;
            }
          }
          return !0;
        };
      },
      setSelectableFunction: function() {
        var a = this;
        this.network.selectableFunction = function(b) {
          if (b) {
            var c = a._selectableFilters;
            if (!c || c.length < 1) return !0;
            for (var d = 0; d < c.length; d++) {
              var e = c[d];
              if (!e.isSelectable(b, a.network)) return !1;
            }
          }
          return !0;
        };
      },
      setNetworkRenderCallback: function() {
        var a = this,
          b = this._renderCallbacks;
        this.network.renderCallback = function() {
          for (var c = 0; c < b.length; c++) {
            var d = b[c];
            d.onRenderCallback(a.network);
          }
        };
      },
      lookAt: function(a) {
        this.defaultEventHandler &&
          this.defaultEventHandler.lookAt &&
          this.defaultEventHandler.lookAt(a);
      }
    }),
    (c.ViewManager2D = function(a, b) {
      mono.PropertyChangeDispatcher.call(this),
        (this.sceneManager = a),
        (this.map = null),
        (this.network = b || new twaver.vector.Network()),
        (this.container = document.createElement("div")),
        (this.container.style.position = "absolute"),
        (this.mapView = null),
        (this._visibleFilters = []),
        (this._selectableFilters = []),
        (this._eventHandlers = []);
      var c = this;
      (this.dbClickHandle = function(a) {
        if (a) {
          var b = c.network.getElementAt(a);
          b
            ? c.handleDoubleClick({ element: b })
            : c.handleDoubleClickBackground();
        }
      }),
        this.network.adjustBounds({ x: 0, y: 0, width: 1, height: 1 }),
        (this.left = 1),
        (this.top = 0),
        (this.width = document.documentElement.clientWidth),
        (this.height = document.documentElement.clientHeight),
        (this.adapter = null),
        (this.isCreateMap = !1),
        (this.focusData = null),
        (this.isGis = null);
    }),
    mono.extend(c.ViewManager2D, mono.PropertyChangeDispatcher, {
      createMap: function() {
        this.mapView = document.createElement("div");
        var a = (this.map = new twaver.gis.Map(this.mapView, "MapView"));
        a.setSize({
          width: document.documentElement.clientWidth,
          height: document.documentElement.clientHeight
        }),
          a.setEnableDoubleZoom(!1),
          a.addLayer("mapABC", GISConsts.EXECUTOR_TYPE_MAPABC),
          a.setZoomLevel(5),
          a.setCenter(new twaver.gis.geometry.GeoCoordinate(31.41, 121.48)),
          (this.adapter = new twaver.gis.Adapter()),
          this.registerNormalImage("./images/building1.png", "b1"),
          this.registerNormalImage("./images/building2.png", "b2"),
          this.registerNormalImage("./images/building3.png", "b3"),
          (this.isCreateMap = !0);
      },
      clearContainer: function() {
        var a = this.container.childNodes;
        if (a && a.length > 0)
          for (var b = 0; b < a.length; b++) this.container.removeChild(a[b]);
      },
      bindGIS: function() {
        (null != this.isGis && this.isGis) ||
          (this.isCreateMap || this.createMap(),
          this.adapter &&
            this.map &&
            this.adapter.bindNetworkAndMap(this.network, this.map),
          this.clearContainer(),
          this.container.appendChild(this.mapView),
          this.network
            .getView()
            .removeEventListener("dblclick", this.dbClickHandle),
          this.map.getView().addEventListener("dblclick", this.dbClickHandle),
          this.adjustViewBounds(),
          (this.isGis = !0));
      },
      unbindGIS: function() {
        (null == this.isGis || this.isGis) &&
          (this.adapter && this.adapter.unbindNetworkAndMap(),
          this.clearContainer(),
          this.container.appendChild(this.network.getView()),
          this.container.parentNode && this.adjustViewBounds(),
          this.map &&
            this.map
              .getView()
              .removeEventListener("dblclick", this.dbClickHandle),
          this.network
            .getView()
            .addEventListener("dblclick", this.dbClickHandle),
          (this.isGis = !1));
      },
      getContainer: function() {
        return this.container;
      },
      removeGis: function() {
        this.unbindGIS(), this.hideNavigator(), this.hideOverView();
      },
      addGis: function(a, b) {
        this.bindGIS(), a && this.showNavigator(), b && this.showOverView();
      },
      adjustViewBounds: function(a, b, c, d) {
        arguments.length < 1
          ? (this.flag ? this.flag++ : (this.flag = 1),
            (this.width = this.width + Math.pow(-1, parseInt(this.flag))))
          : (this.flag = 0),
          (this.left = c || this.left),
          (this.top = d || this.top),
          (this.width = a || this.width),
          (this.height = b || this.height),
          this.network.adjustBounds({
            x: this.left,
            y: this.top,
            width: this.width,
            height: this.height
          }),
          this.isCreateMap &&
            this.map &&
            (this.map.setSize({ width: this.width, height: this.height }),
            (this.map.content.style.left = this.left + "px"),
            (this.map.content.style.top = this.top + "px"));
      },
      setZoomLevel: function(a) {
        a && this.isCreateMap && this.map && this.map.setZoomLevel(5);
      },
      setCenter: function(a) {
        this.isCreateMap &&
          this.map &&
          a &&
          a.x &&
          a.y &&
          this.map.setCenter(new twaver.gis.geometry.GeoCoordinate(a.x, a.y));
      },
      showNavigator: function(a, b) {
        if (this.isCreateMap) {
          var c = document.getElementById("navigator_id");
          if (c) c.style.display = "block";
          else {
            var d = new twaver.gis.gadget.Navigator("navigator_id", this.map);
            a || (a = 20),
              b || (b = 50),
              this.map.installGadget(d, { x: a, y: b });
          }
        }
      },
      hideNavigator: function() {
        if (this.isCreateMap) {
          var a = document.getElementById("navigator_id");
          a && (a.style.display = "none");
        }
      },
      showOverView: function(a, c, d, e) {
        if (this.isCreateMap)
          if (this.overview && this.overview.getView())
            this.overview.getView().style.display = "block";
          else {
            var f = (this.overview = new twaver.gis.gadget.Overview(
              "overview_id",
              this.map
            ));
            (null == d || d == b || 0 > d) && (d = 150),
              (null == e || e == b || 0 > e) && (e = 150),
              f.setSize({ width: d, height: e }),
              f.map.addLayer("mapABC", GISConsts.EXECUTOR_TYPE_MAPABC),
              f.setBorder("1px solid red"),
              (a = a ? a - d + 5 : d + 5),
              (c = c ? c - e + 5 : e + 5),
              this.map.installGadget(f, { right: a, bottom: c });
          }
      },
      hideOverView: function() {
        this.overview &&
          this.overview.getView() &&
          (this.overview.getView().style.display = "none");
      },
      registerNormalImage: function(a, b) {
        var c = this,
          d = new Image();
        (d.src = a),
          (d.onload = function() {
            twaver.Util.registerImage(b, d, d.width / 2, d.height / 2),
              (d.onload = null),
              c.network.invalidateElementUIs();
          });
      },
      setPosition: function(a, b, c) {
        if (a)
          if (this.container.contains(this.mapView)) {
            var d = new twaver.gis.geometry.GeoCoordinate(b, c);
            a.setClient(GISSettings.GEOCOORDINATE, d), this.setDefaultImage(a);
          } else a.setLocation(b, c);
      },
      setDefaultImage: function(a, b) {
        if (a)
          if (1 == b) a.setImage("b1");
          else if (2 == b) a.setImage("b2");
          else if (3 == b) a.setImage("b3");
          else {
            var c = parseInt(3 * Math.random() + 1);
            a.setImage("b" + c);
          }
      },
      getDataByNode: function(a) {
        return a ? this.sceneManager.getNodeData(a) : null;
      },
      handleDoubleClick: function(a) {
        for (var b, c = a.element, d = 0; d < this._eventHandlers.length; d++) {
          b = this._eventHandlers[d];
          var e = this.getDataByNode(c);
          if (b.shouldHandleDoubleClickElement(c, this.network, e, a))
            return (
              b.handleDoubleClickElement(c, this.network, e, a),
              void (this.focusData = e)
            );
        }
      },
      handleDoubleClickBackground: function() {
        if (this.focusData && this.focusData.getParentId()) {
          var a = this.sceneManager.dataNodeMap[this.focusData.getParentId()];
          a && this.sceneManager.viewManager3d.setFocusNode(a);
        }
        for (var b, c = 0; c < this._eventHandlers.length; c++)
          if (
            ((b = this._eventHandlers[c]),
            b.shouldHandleDoubleClickBackground(this.network))
          )
            return void b.handleDoubleClickBackground(this.network);
      },
      addEventHandler: function(a, d) {
        return a instanceof c.EventHandler
          ? d === b
            ? this._eventHandlers.push(a)
            : this._eventHandlers.splice(d, 0, a)
          : void 0;
      },
      removeEventHandler: function(a) {
        var b = this._eventHandlers.indexOf(a);
        -1 !== b && this._eventHandlers.splice(b, 1);
      }
    }),
    (c.SceneManager = function(a) {
      d.checkNotNull(a, "dataManager"),
        c.EventHandler.call(this),
        (this.dataManager = a),
        this.initViewManager(),
        (this.network3d = this.viewManager3d.network),
        (this.network2d = this.viewManager2d.network),
        (this.prefabMap = {}),
        (this.dataNodeMap = {}),
        (this.dataNode2DMap = {}),
        (this.linkMap = {}),
        (this.categoryNodeMap = {}),
        (this.assetTypeNodeMap = {}),
        (this.locationManager = new c.LocationManager(this)),
        (this._sceneManagerChangeDispatcher = new mono.EventDispatcher()),
        (this._sceneChangeDispather = new mono.EventDispatcher()),
        (this._scenes = []),
        (this._sceneMap = []),
        this.viewManager3d.initDefault(),
        (this._alarmManager = new c.AlarmManager(a, this)),
        (this._alarmStatePropagator = new c.AlarmStatePropagator(
          a,
          this,
          this._alarmManager
        )),
        (this.doubleClickBackgroundGotoUpLevelScene = !1),
        (this.linkControlsFunction = function(a, b, c) {
          var d = b.getBoundingBox(),
            e = c.getBoundingBox(),
            f = 20,
            g = Math.max(d.max.y, e.max.y),
            h = b.frontWorldPosition(d.max.z + f),
            i = c.frontWorldPosition(e.max.z + f),
            j = [];
          return (
            j.push(h),
            j.push(h.clone().add(new mono.Vec3(0, g, 0))),
            j.push(i.clone().add(new mono.Vec3(0, g, 0))),
            j.push(i),
            j
          );
        }),
        (this.gcsManager = new c.GCSManager({ sceneManager: this }));
      var b = this;
      a.addDataManagerChangeListener(function(a) {
        if (b._loaded) {
          var c = a.kind;
          "add" === c
            ? b.handleDataAdd(a)
            : "remove" === c && b.handleDataRemove(a);
        }
      }),
        a.addDataPropertyChangeListener(function(a) {
          b._loaded && b.handleDataPropertyChange(a);
        }),
        (this.removeAndAddAllChildrenWhenSetFocusFilter = null),
        this.viewManager3d.addPropertyChangeListener(function(a) {
          if ("focusNode" == a.property) {
            var c = b.network3d.getDataBox(),
              d = a.oldValue,
              e = a.newValue;
            if (d) {
              var f = d.getClient("simpleNode");
              if (f && f.getParent() != d && !b.isChild(d, e)) {
                var g = d.getClient("complexNode"),
                  h = b.getNodeData(d);
                g.setParent(null),
                  f.setParent(d),
                  c.removeByDescendant(d, !1, function(a) {
                    var c = b.getNodeData(a),
                      d = b.dataManager.getDataTypeForData(c);
                    return d && !d.isLazyable()
                      ? !1
                      : c && h && c.getParentId() === h.getId()
                        ? !0
                        : !1;
                  }),
                  c.removeByDescendant(g),
                  c.addByDescendant(f, function(a) {
                    return a instanceof mono.Billboard &&
                      a.getClient("alarmBillboard")
                      ? !1
                      : !0;
                  }),
                  b.viewManager3d.getDefaultEventHandler().closeDoor(g);
              }
            }
            if (e) {
              var g = e.getClient("complexNode");
              if (g && g.getParent() != e) {
                var f = e.getClient("simpleNode");
                f.setParent(null),
                  g.setParent(e),
                  c.addByDescendant(g, function(a) {
                    return a instanceof mono.Billboard &&
                      a.getClient("alarmBillboard")
                      ? !1
                      : !0;
                  }),
                  c.removeByDescendant(f);
              }
              b.loadLazyChildren(e),
                b.viewManager3d.defaultMaterialFilter &&
                  b.viewManager3d.defaultMaterialFilter.removeByDescendant(
                    b.getNodeData(e)
                  );
            }
          }
        });
    }),
    (c.SceneManager.CLIENT_IT_DATA = "it_data"),
    (c.SceneManager.CLIENT_IT_DATA_ID = "it_data_id"),
    (c.SceneManager.getNodeData = function(a) {
      return a.getClient(c.SceneManager.CLIENT_IT_DATA);
    }),
    (c.SceneManager.getNodeDataId = function(a) {
      return a ? a.getClient(c.SceneManager.CLIENT_IT_DATA_ID) : null;
    }),
    mono.extend(c.SceneManager, c.EventHandler, {
      getSceneView: function(a) {
        if (a) {
          var b = document.createElement("div");
          return (
            b.appendChild(this.network3d.getRootView()),
            b.appendChild(this.viewManager2d.getContainer()),
            b
          );
        }
        return this.network3d.getRootView();
      },
      adjust2DBounds: function(a, b, c, d) {
        this.viewManager2d.adjustViewBounds(a, b, c, d);
      },
      adjust3DBounds: function(b, c, d, e) {
        b || (b = document.documentElement.clientWidth),
          c || (c = document.documentElement.clientHeight),
          (d = d || 0),
          (e = e || 0),
          this.network3d.adjustBounds(b - d, c - e);
        var f = this;
        a.addEventListener
          ? a.addEventListener(
              "resize",
              function() {
                f.network3d.adjustBounds(b - d, c - e, e, d);
              },
              !0
            )
          : a.attachEvent
            ? a.attachEvent("onresize", function() {
                f.network3d.adjustBounds(b - d, c - e, e, d);
              })
            : (a.onresize = function() {
                f.network3d.adjustBounds(b - d, c - e, e, d);
              });
      },
      removeAndAddAllChildrenWhenSetFocus: function(a) {
        if (this.removeAndAddAllChildrenWhenSetFocusFilter)
          return this.removeAndAddAllChildrenWhenSetFocusFilter(a);
        if (!a) return !1;
        var b = this.getNodeData(a);
        if (b) {
          var c = this.dataManager.getCategoryForData(b);
          if (
            c &&
            c.getId() &&
            c
              .getId()
              .toLowerCase()
              .indexOf("rack") >= 0
          )
            return !0;
        }
        return !1;
      },
      isChild: function(a, b) {
        if (!a || !b) return !1;
        var d = this.getNodeData(a);
        if (!d) return !1;
        var e = this.getNodeData(b);
        return e &&
          e instanceof c.Data &&
          e.getParentId() &&
          e.getParentId() === d.getId()
          ? !0
          : !1;
      },
      adjustBounds: function(a, b, c, d) {
        this.adjust2DBounds(a, b, c, d), this.adjust3DBounds(a, b, c, d);
      },
      getDataBox: function() {
        return this.network3d.getDataBox();
      },
      getDataBox2d: function() {
        return this.network2d.getElementBox();
      },
      setDefaultInteractionSpeed: function(a, b, c) {
        var d = this.network3d.getDefaultInteraction();
        d && (d.setRotateSpeed(a), d.setPanSpeed(b), d.setZoomSpeed(c));
      },
      shouldHandleDoubleClickBackground: function(a) {
        if (!this.doubleClickBackgroundGotoUpLevelScene) return !1;
        if (!this.dataManager.getRootScene()) return !1;
        if (this._currentScene === this.dataManager.getRootScene()) return !1;
        if (a instanceof mono.Network3D) {
          var b = this.viewManager3d.getFocusNode();
          if (b && ((b = this.getMainNode(b)), this._currentRootNode !== b))
            return !1;
        }
        return !0;
      },
      saveView: function() {},
      handleDoubleClickBackground: function(a) {
        this.gotoUpLevelScene();
      },
      shouldHandleDoubleClickElement: function(a, b, c, d) {
        var e = this.dataManager;
        if (!e.getRootScene()) return !1;
        if (!c) return !1;
        var f = e.getCategoryForData(c);
        if (!f) return !1;
        var g = e.getSceneByCategory(f);
        return g && this._currentScene != g ? !0 : !1;
      },
      handleDoubleClickElement: function(a, b, c, d) {
        var e = this.dataManager,
          f = e.getCategoryForData(c),
          g = e.getSceneByCategory(f);
        this._currentScene != g &&
          (this.clear(),
          this._loadOneScene(g, c),
          c && this.viewManager3d.setFocusNode(this.dataNodeMap[c.getId()]));
      },
      clear: function() {
        this.animateAtBeforeChangeScene();
        for (var a in this.dataNodeMap) {
          var b = this.dataNodeMap[a];
          b && b.setParent(null);
        }
        this.viewManager3d.clear(), this.getDataBox2d().clear();
      },
      getCurrentScene: function() {
        return this._currentScene;
      },
      getParentScene: function(a) {
        if (!a) return null;
        var b = this.dataManager.getParent(a);
        if (!b) return null;
        var c = this.dataManager.getCategoryForData(b);
        if (!c) return this.getParentScene(b, this);
        var d = this.dataManager.getSceneByCategory(c);
        return d ? { scene: d, data: b } : this.getParentScene(b, this);
      },
      gotoUpLevelScene: function() {
        var a = this._currentScene;
        return a
          ? void (a.getTwod()
              ? (this.clear(), this.gotoUpLevelSceneFor2D())
              : (this.viewManager3d.setFocusNode(null),
                this.gotoUpLevelSceneFor3D()))
          : !1;
      },
      gotoScene: function(a, b) {
        a &&
          a != this._currentScene &&
          (this.clear(),
          this._loadOneScene(a, b),
          b &&
            !a.getTwod() &&
            this.viewManager3d.setFocusNode(this.dataNodeMap[b.getId()]));
      },
      gotoUpLevelSceneFor2D: function() {
        var a = this.viewManager3d.getFocusNode(),
          b = this._currentScene;
        if (!b) return !1;
        var c = this._currentRootNode;
        if (!c) return !1;
        var d = this.getNodeData(c),
          e = this.getParentScene(d);
        e &&
          e.scene &&
          e.data &&
          (this._loadOneScene(e.scene, e.data),
          this.viewManager3d.setFocusNode(a.getParent()),
          this.viewManager3d.lookAt(a.getParent()));
      },
      gotoUpLevelSceneFor3D: function() {
        var a = new Date().getTime(),
          b = this._currentScene;
        if (!b) return !1;
        var c = this._currentRootNode;
        if (!c) return !1;
        var d = this.getNodeData(c),
          e = this.dataManager.getParent(d);
        if (!e) return !1;
        var f = this.dataManager.getCategoryForData(e);
        if (!f) return !1;
        var g = this.dataManager.getSceneByCategory(f);
        return g
          ? (this.clear(),
            this._loadOneScene(g, e),
            e && this.viewManager3d.setFocusNode(this.dataNodeMap[e.getId()]),
            console.log(" -------: " + (new Date().getTime() - a)),
            !0)
          : !1;
      },
      gotoData: function(a) {
        var b = this.dataManager,
          d = a;
        if ((typeof a !== c.Data && (d = b.getDataById(a)), !d)) return !1;
        var e = b.getCategoryForData(d);
        if (!e) return !1;
        var f = this.dataManager.getSceneByCategory(e);
        return f ? (this.clear(), this._loadOneScene(f, d), !0) : !1;
      },
      initViewManager: function() {
        (this.viewManager3d = new c.ViewManager(this)),
          this.viewManager3d.addEventHandler(this),
          (this.viewManager2d = new c.ViewManager2D(this)),
          this.viewManager2d.addEventHandler(this);
      },
      removeNodeChildren: function(a, b) {
        var d = a;
        (a instanceof c.Data || "string" == typeof a) &&
          (d = this.getNodeByDataOrId(a));
        var e = this.getDataBox(),
          f = d.getChildren().toList();
        f.forEach(function(a) {
          (!b || b(a)) && (a.setParent(null), e.removeByDescendant(a));
        });
      },
      setNodeData: function(a, b, d) {
        if (b) {
          b.setClient(c.SceneManager.CLIENT_IT_DATA, a),
            b.setClient(c.SceneManager.CLIENT_IT_DATA_ID, a.getId()),
            d ? b.setClient("modelParent", d) : (d = b);
          var e = b.getClient("complexNode");
          e && this.setNodeData(a, e, d);
          var f = this;
          b.getChildren() &&
            b.getChildren().size() > 0 &&
            b.getChildren().forEach(function(b) {
              f.setNodeData(a, b, d);
            });
        }
      },
      getMainNode: function(a) {
        return a
          ? (null == a.getClient(c.SceneManager.CLIENT_IT_DATA) &&
              (a = a.getParent()),
            this.getNodeByDataOrId(this.getNodeData(a)))
          : void 0;
      },
      getParentNode: function(a) {
        var b = a.getParentId();
        return b ? this.dataNodeMap[b] : null;
      },
      getChildrenNodes: function(a, b) {
        var c = a;
        a instanceof mono.Node && (c = this.getNodeData(node));
        var d,
          e = 0,
          f = [];
        if (c)
          for (d = this.dataManager.getChildren(c, b), e = 0; e < d.length; e++)
            f.push(this.getNodeByDataOrId(d[e]));
        return f;
      },
      getNodeData: function(a) {
        return a && a.getClient ? a.getClient("it_data") : null;
      },
      getNodeByDataOrId: function(a) {
        if (!a) return null;
        var b = a.getId ? a.getId() : a;
        return this.dataNodeMap[b];
      },
      getNodeForDataOrId: function(a) {
        if (!a) return null;
        var b = a.getId ? a.getId() : a;
        return this.dataNodeMap[b];
      },
      loadModel: function(a, b) {
        if (!b) return null;
        b.type = b.type || a;
        var c = a || b.type;
        if (!c) return null;
        var d = {};
        return (
          b instanceof Array
            ? ((d.data = b), (d.id = c))
            : ((d = b || {}), (d.id = c)),
          make.Default.load(d)
        );
      },
      loadDataTypeTemplateModels: function(a, b, c) {
        var d = a.getTemplateDatas();
        if (null != d && 0 != d.length) {
          var e = this;
          d.forEach(function(a) {
            a = e._translateTemplateData(a, b);
            var d = e.dataNode2DMap[b.getId()],
              f = e.loadDataModel2D(a, c);
            f.setMovable(!1), f.setHost(d), f.setParent(d), f.setName("");
          });
        }
      },
      loadDataModel: function(a, b) {
        var c = this.dataManager,
          d = c.getDataTypeForData(a),
          e = this,
          f = this.network3d.getDataBox(),
          g = a.getId(),
          h = function(b) {
            var d = a.getId(),
              g = c.getDataTypeForData(a),
              h = c.getCategoryForData(a);
            f.addByDescendant(b), (e.dataNodeMap[d] = b);
            var i = e.assetTypeNodeMap[g.getId()];
            i || ((i = {}), (e.assetTypeNodeMap[g.getId()] = i)),
              (i[d] = b),
              h &&
                ((i = e.categoryNodeMap[h.getId()]),
                i || ((i = {}), (e.categoryNodeMap[h.getId()] = i)),
                (i[d] = b)),
              e.setNodeData(a, b),
              e._sceneManagerChangeDispatcher.fire({ kind: "add", data: b });
          },
          i = this.dataNodeMap[g],
          j = d.getModelParameters(),
          k = j,
          l = d.getSimpleModel(),
          m = d.getSimpleModelParameters();
        if (i) h(i);
        else {
          if (((i = this.loadModel(d.getModel(), k)), !i)) return;
          var n;
          if (((l || m) && (n = this.loadModel(l, m)), n)) {
            var o = i.getBoundingBoxWithChildren(),
              p = o.size(),
              q = new mono.Cube(p.x, p.y, p.z);
            q.s({ "m.visible": !1 }),
              n.setParent(q),
              q.setClient("simpleNode", n),
              q.setClient("complexNode", i),
              h(q);
          } else h(i);
        }
      },
      loadModel2D: function(a, b, c) {
        if (a || mono.Utils.isArray(b)) {
          var d = {};
          return (
            b instanceof Array
              ? (b.forEach(function(a) {
                  a.scale = 20;
                }),
                (d.data = b),
                (d.id = a))
              : ((d = b || {}), (d.id = a)),
            make.Default.load(d)
          );
        }
        var e = new twaver.Node(),
          f = c.getPosition();
        return (
          f &&
            (b && "panel" == b.dtype
              ? (e.setLocation(f.x, f.z),
                e.setToolTip("node1"),
                e.setSize(400, 400))
              : this.viewManager2d.setPosition(e, f.x, f.z)),
          e
        );
      },
      _translateTemplateData: function(a, b) {
        var d = a.getId(),
          e = b.getId(),
          f = a.getPosition(),
          g = b.getPosition(),
          h = d + "@" + e,
          i = this.dataManager.getDataById(h);
        if (!i) {
          (i = new c.Data(h)), i.setDataTypeId(a.getDataTypeId());
          var f = a.getPosition(),
            j = a.getLocation();
          i.setPosition(f.clone()),
            j && i.setLocation(new c.Location(j.x, j.y, j.z)),
            this.dataManager.addData(i, !1);
        }
        return (
          i.setParentId(e),
          (f.x = g.x + f.x),
          (f.y = g.y + f.y),
          (f.z = g.z + f.z),
          i
        );
      },
      loadDataTypeTemplateModel2Ds: function(a, b, c) {
        var d = a.getTemplateDatas();
        if (null != d && 0 != d.length) {
          var e = this;
          d.forEach(function(a) {
            a = e._translateTemplateData(a, b);
            var d = e.dataNode2DMap[b.getId()],
              f = e.loadDataModel2D(a, c);
            f.setMovable(!1), f.setHost(d), f.setParent(d), f.setName("");
          });
        }
      },
      loadDataModel2D: function(a, b) {
        var c = this.dataManager,
          d = c.getDataTypeForData(a),
          e = this.getDataBox2d(),
          f = a.getId(),
          g = this.dataNode2DMap[f],
          h = d.getModel2dParameters();
        if (!g) {
          g = this.loadModel2D(d.getModel2d(), h, a);
          var i = g;
          if (g instanceof Array && (i = g[0])) {
            i.setMovable(!1);
            for (var j = 1; j < g.length; j++) {
              var k = g[j];
              k &&
                (k.setMovable(!1),
                this.setNodeData(a, k),
                i.addChild(k),
                k.setHost(i));
            }
          }
          i.setName(a.getDescription() || f),
            this.setNodeData(a, i),
            (this.dataNode2DMap[f] = i);
          var l = a.getPosition();
          l && this.viewManager2d.setPosition(i, l.x, l.z);
        }
        return (
          e.addByDescendant(g), this.loadDataTypeTemplateModel2Ds(d, a, b), g
        );
      },
      handleDataAdd: function(a) {
        var b = a.data;
        b instanceof c.Data
          ? this.shouldLoadData(b)
            ? this.loadOneData(b)
            : this.shouldLoadData2D(b) && this.loadDataModel2D(b)
          : b instanceof c.Link && this.loadLink(b);
      },
      shouldLoadData: function(a) {
        var b = this.getCurrentScene();
        if (null == b) return !0;
        var c = this.getParentScene(a);
        return (c.scene = this.getCurrentScene() && !b.getTwod());
      },
      shouldLoadData2D: function(a) {
        var b = this.getCurrentScene();
        if (null == b) return !1;
        var c = this.getParentScene(a);
        return (c.scene = this.getCurrentScene() && b.getTwod());
      },
      handleDataRemove: function(a) {
        var b = a.data,
          d = (this.dataManager, this.network3d.getDataBox());
        if (b instanceof c.Data) {
          var e = this.dataNodeMap[b.getId()];
          d.removeByDescendant(e);
        } else if (b instanceof c.Link) {
          var f = this.linkMap[b.getId()];
          d.removeByDescendant(f);
        }
      },
      handleDataPropertyChange: function(a) {
        var b = a.source,
          c = a.property;
        "parentId" === c
          ? (a.oldValue,
            b.getId(),
            this.setParentRelationShip(b),
            this.translatePosition(b))
          : ("location" === c || "position" === c) && this.translatePosition(b);
      },
      setAllParentRelationShip: function() {
        for (var a in this.dataNodeMap) {
          var b = this.dataNodeMap[a],
            c = this.getNodeData(b);
          this.setParentRelationShip(c);
        }
      },
      setParentRelationShip: function(a) {
        if (a) {
          var b = this.dataNodeMap[a.getId()],
            c = this.dataNodeMap[a.getParentId()];
          b && c && b.setParent(c);
        }
      },
      translateAllPosition: function() {
        for (var a in this.dataNodeMap) {
          var b = this.dataNodeMap[a],
            c = this.getNodeData(b);
          this.translatePosition(c);
        }
      },
      computePosition: function(a, b, c, d) {
        this.locationManager.computePosition(a, b, c, d);
      },
      computeRotation: function(a, b, c, d) {
        this.locationManager.computeRotation(a, b, c, d);
      },
      translatePosition: function(a) {
        if (a) {
          var b = this.dataManager,
            c = a.getId(),
            d = this.dataNodeMap[c];
          if (d) {
            var e = a.getParentId(),
              f = b.getDataById(e),
              d = this.dataNodeMap[c],
              g = this.dataNodeMap[e];
            this.computePosition(a, f, d, g), this.computeRotation(a, f, d, g);
          }
        }
      },
      beforeLoadScene: function(a, b) {
        return this.animateAtAfterChangeScene(), !0;
      },
      afterLoadScene: function(a, b) {
        this._sceneChangeDispather.fire({ kind: "changeScene", data: a });
      },
      loadOneData: function(a) {
        this.loadDataModel(a),
          this.setParentRelationShip(a),
          this.translatePosition(a);
      },
      getSceneFromData: function(a) {
        var b = this.dataManager;
        if (null == b.getRootScene()) return null;
        if (!a) return null;
        var b = this.dataManager,
          c = a;
        a.getId || (c = b.getDataById(a));
        var d = b.getSceneByData(c);
        return null == d
          ? this.getSceneFromData(c.getParentId())
          : ((d.__currentRootData = c), d);
      },
      loadLazyData: function(a) {
        if (a) {
          var b = this.dataManager,
            c = a;
          a.getId || (c = b.getDataById(a));
          var d = c.getParentId(),
            e = this.getSceneFromData(d),
            f = this.getSceneFromData(c);
          if ((null == e && null == f) || e == f) {
            this.loadLazyData(d);
            var g = this.getNodeByDataOrId(c);
            if (g) {
              var h = this.getDataBox();
              h.contains(g) ||
                (h.addByDescendant(g),
                this.setParentRelationShip(c),
                this.translatePosition(c));
            } else this.loadOneData(c);
          }
        }
      },
      loadLazyChildren: function(a, b) {
        b = b || !1;
        var d = a,
          e = a;
        a instanceof mono.Data
          ? (d = this.getNodeData(a))
          : (e = this.getNodeByDataOrId(d));
        var f = new mono.List();
        d instanceof c.Data && (f = d.getChildren());
        for (var g, h, i, j = 0, k = f.size(); k > j; j++)
          (g = f.get(j)),
            (i = this.dataNodeMap[g.getId()]),
            i
              ? this.network3d.getDataBox().getDataById(i.getId()) ||
                this.network3d.getDataBox().addByDescendant(i)
              : ((h = this.dataManager.getDataTypeForData(g)),
                (h.isLazyable() && b) ||
                  (this.loadOneData(g), this.loadLazyChildren(g, !0)));
      },
      $P: function(a, b) {},
      loadLinks: function() {
        var a = this.dataManager,
          b = a.getLinkMap();
        for (var c in b) this.loadLink(b[c]);
      },
      loadLink: function(a) {
        var b = (this.dataManager, a.getFromId()),
          d = a.getToId(),
          e = this.dataNodeMap[b],
          f = this.dataNodeMap[d];
        if (e && f && !this.linkMap[a.getId()]) {
          var g = new mono.PathLink(e, f);
          if (this.linkControlsFunction) {
            e.updateWorldMatrix(), f.updateWorldMatrix();
            var h = this.linkControlsFunction(a, e, f);
            g.setLinkType("control"), g.setControls(h);
          } else var h = (g.getFromControls(), g.getToControls(), []);
          g.setClient("id", a.getId()),
            g.s({ "m.specularStrength": 10, "m.ambient": "#C6FEFA" });
          var i = "#00FFFF",
            j = 2,
            k = 10,
            l = a.parameters;
          l && ((i = l.color || i), (j = l.radius || j)),
            g.setStyle("m.color", i),
            a.getType() &&
              "pipe" === a.getType().toLowerCase() &&
              g.setRadius(k),
            g.setRadius(j),
            g.setClient(c.SceneManager.CLIENT_IT_DATA, a),
            (this.linkMap[a.getId()] = g),
            g.setVisible(!1),
            this.network3d.getDataBox().add(g);
        }
      },
      _getControlPoint: function(a, b) {
        b = b || {};
        var c = this._getControlNumber(a, b.x, "x"),
          d = this._getControlNumber(a, b.y, "y"),
          e = this._getControlNumber(a, b.z, "z");
        return new mono.Vec3(c, d, e);
      },
      _getControlNumber: function(a, b, c) {
        function d(a, b) {
          if (0 == a) return b;
          var c = i.dataManager.getParent(b);
          return c ? d(a - 1, c) : b;
        }
        if (!b) return 0;
        for (
          var e = a.getId ? a : this.dataManager.getDataById(a),
            f = /\$(p|P)\d/g,
            g = b.match(f),
            h = {},
            i = this,
            j = 0;
          j < g.length;
          j++
        ) {
          var k = g[j],
            l = k.toLowerCase().replace("$p", ""),
            m = i.getNodeByDataOrId(d(l, e));
          h[k] = i._wrapBoundingBox(m);
        }
        var n = " with (scope) {  return " + b + "}",
          o = new Function("scope", n);
        try {
          var p = o(h);
          return p;
        } catch (q) {
          console.error(q);
        }
        return 0;
      },
      _wrapBoundingBox: function(a) {
        var b = a.getBoundingBox();
        return (
          (b.front = function(b) {
            return (b = b || 0), a.frontWorldPosition(this.max.z + b).z;
          }),
          (b.top = function(b) {
            return (
              (b = b || 0),
              a.worldPosition(new mono.Vec3(0, 1, 0), this.max.y + b).y
            );
          }),
          b
        );
      },
      isLink: function(a) {
        return a &&
          a.getClient(c.SceneManager.CLIENT_IT_DATA) &&
          a.getClient(c.SceneManager.CLIENT_IT_DATA) instanceof c.Link
          ? !0
          : !1;
      },
      _loadRootScene: function() {
        var a = this.dataManager,
          b = a.getRootScene();
        this._loadOneScene(b, null);
      },
      _loadOneScene: function(a, b, c) {
        var d = new Date();
        if (this.beforeLoadScene(a, b)) {
          var e,
            f = this.dataManager,
            g = a.getCategoryId(),
            h = a.getSceneType(),
            i = a.getTwod(),
            j = a.getWithGis();
          if (
            ((e =
              "ShowSelf" == h
                ? 0
                : "ShowSelfAndChildren" === h || "ShowChildren" === h
                  ? 1
                  : 100),
            (this._currentScene = a),
            this._currentScene.getTwod()
              ? ((this.network3d.getRootView().style.display = "none"),
                (this.viewManager2d.getContainer().style.display = "block"),
                j
                  ? this.viewManager2d.addGis(!0, !0)
                  : this.viewManager2d.removeGis(),
                this._currentScene.zoomLevel &&
                  this.viewManager2d.setZoomLevel(this._currentScene.zoomLevel),
                this._currentScene.center &&
                  this.viewManager2d.setCenter(this._currentScene.center))
              : ((this.viewManager2d.getContainer().style.display = "none"),
                (this.network3d.getRootView().style.display = "block")),
            null == b)
          ) {
            var k = f.getDataMapByCategory(g);
            for (var l in k)
              this._loadSceneData(k[l], h, e, i),
                (this._currentRootNode = this.dataNodeMap[l]);
          } else
            this._loadSceneData(b, h, e, i),
              (this._currentRootNode = this.dataNodeMap[b.getId()]);
          c && c(),
            this.afterLoadScene(a, b),
            this._onLoadFinish(),
            console.log(
              " loadScene-------: " + (new Date().getTime() - d.getTime())
            );
        }
      },
      _loadSceneData: function(a, b, c, d) {
        var e = this.dataManager;
        if (
          (("ShowChildren" === b && 1 === c) ||
            (d
              ? this.loadDataModel2D(a)
              : e.isLazyable(a) || this.loadDataModel(a)),
          !(0 >= c))
        )
          for (var f = a.getChildren(), g = 0; g < f.size(); g++)
            this._loadSceneData(f.get(g), b, c - 1, d);
      },
      _onLoadFinish: function() {
        this.setAllParentRelationShip(),
          this.translateAllPosition(),
          this.loadLinks(),
          this.resetCamera(),
          (this._loaded = !0);
      },
      _loadDataMap: function(a) {
        var b = this.dataManager;
        for (id in a) {
          var c = a[id];
          b.isLazyable(c) || this.loadDataModel(a[id]);
        }
        this.afterLoadScene(), this._onLoadFinish();
      },
      resetCamera: function() {
        this.network3d.zoomEstimateOverview(30);
      },
      loadScene: function() {
        var a = this.dataManager,
          b = a.getRootScene();
        if (this.beforeLoadScene(b)) {
          if (b) return this._loadRootScene();
          var c = a.getDataMap();
          this._loadDataMap(c);
        }
      },
      getAlarmManager: function() {
        return this._alarmManager;
      },
      addSceneManagerChangeListener: function(a, b, c) {
        this._sceneManagerChangeDispatcher.add(a, b, c);
      },
      removeSceneManagerChangeListener: function(a, b) {
        this._sceneManagerChangeDispatcher.remove(a, b);
      },
      addSeneChangeListener: function(a, b, c) {
        this._sceneChangeDispather.add(a, b, c);
      },
      removeSceneManagerChangeListener: function(a, b) {
        this._sceneChangeDispather.remove(a, b);
      },
      removeBillboard: function(a) {
        a.setParent(null), this.getDataBox().remove(a);
      },
      removeAllBillboardByDataId: function(a) {
        var b = this.dataManager.getDataById(a);
        this.removeAllBillboardByData(b);
      },
      removeAllBillboardByData: function(a) {
        var b = a.boards;
        if (b) for (var c = 0; c < b.length; c++) this.removeBillboard(b[c]);
      },
      createTextBillboard: function(a, b, c) {
        return this.createTextBillboardById(a.getId(), b, c);
      },
      createTextBillboardById: function(a, b, d) {
        var e = this.dataNodeMap[a],
          f = c.Util.createTextBillboardForNode(e, b, d);
        this.getDataBox().add(f);
        var g = this.dataManager.getDataById(a);
        return g.boards || (g.boards = []), g.boards.push(f), f;
      },
      createEmptyBillboardById: function(a, b) {
        var d = this.dataNodeMap[a],
          e = c.Util.createEmptyBillboardForNode(d, b);
        this.getDataBox().add(e);
        var f = this.dataManager.getDataById(a);
        return f.boards || (f.boards = []), f.boards.push(e), e;
      },
      createEmptyBillboard: function(a, b, c) {
        return this.createEmptyBillboardById(a.getId(), b, c);
      },
      createTitleBillboardById: function(a, b) {
        var d = this.dataNodeMap[a],
          e = c.Util.createTitleBillboardForNode(d, b);
        this.getDataBox().add(e);
        var f = this.dataManager.getDataById(a);
        return f.boards || (f.boards = []), f.boards.push(e), e;
      },
      createTitleBillboard: function(a, b, c) {
        return this.createTitleBillboardById(a.getId(), b, c);
      },
      margeObject: function(a, b) {
        if (((a = a || {}), !b)) return a;
        if (b instanceof Array)
          for (var c = 0; c < b.length; c++) {
            var d = b[c];
            d.getId() && (a[d.getId()] = d);
          }
        else if (b instanceof mono.List)
          for (var c = 0; c < b.size(); c++) {
            var d = b.get(c);
            d && d.getId() && (a[d.getId()] = d);
          }
        else for (var e in b) e && b[e] && (a[e] = b[e]);
        return a;
      },
      getSceneDatas: function() {
        var a = this._currentScene,
          b = this.dataManager;
        if (!a) return b.getDataMap();
        var c = a.getCategoryId(),
          d = a.getSceneType() || "",
          e = b.getDataMapByCategory(c);
        if (!e || "ShowSelf" == d) return e;
        var f = {};
        for (var g in e) {
          var h = e[g];
          if (h)
            if (
              ((f[g] = h), "ShowSelfAndChildren" === d || "ShowChildren" === d)
            ) {
              var i = h.getChildren();
              this.margeObject(f, i);
            } else {
              var j = b.getDescendants(h);
              this.margeObject(f, j);
            }
        }
        return f;
      },
      getSceneDataTypes: function() {
        var a = {},
          b = this.getSceneDatas();
        if (b)
          for (var c in b) {
            var d = b[c];
            if (d) {
              var e = this.dataManager.getDataTypeForData(d);
              a[e.getId()] = e;
            }
          }
        return a;
      },
      getDatasByAncestorId: function() {},
      getCurrentRootNode: function() {
        return this._currentRootNode;
      },
      getLinkData: function(a) {
        if (!a) return null;
        var b = a.getClient(c.SceneManager.CLIENT_IT_DATA);
        return b && b instanceof c.Link ? b : null;
      },
      isAncestor: function(a, b, d) {
        var e = d || this;
        if (!a || !b) return !1;
        var f = null;
        if (
          ((f = a instanceof c.Data ? a : this.dataManager.getDataById(a)), !f)
        )
          return !1;
        var g = this.dataManager.getDataById(b);
        return g
          ? g.getParentId() && g.getParentId() === f.getId()
            ? !1
            : f.getParentId()
              ? f.getParentId() === b
                ? !0
                : e.isAncestor(f.getParentId(), b, e)
              : !1
          : !1;
      },
      doAnimateWhenChangeScene: function() {
        return !1;
      },
      animateAtBeforeChangeScene: function() {
        if (this.doAnimateWhenChangeScene()) {
          var a = this.network3d.getRootView(),
            b = this.viewManager2d.getContainer();
          $(a).fadeOut(1e3), $(b).fadeOut(1e3);
        }
      },
      animateAtAfterChangeScene: function() {
        if (this.doAnimateWhenChangeScene()) {
          var a = this.network3d.getRootView(),
            b = this.viewManager2d.getContainer();
          $(a).fadeIn(1e3), $(b).fadeIn(1e3);
        }
      }
    }),
    (c.MaterialFilter = function(a) {}),
    mono.extend(c.MaterialFilter, Object, {
      filterMaterial: function(a, b, c) {
        return a;
      }
    }),
    (c.VisibleFilter = function(a) {}),
    mono.extend(c.VisibleFilter, Object, {
      isVisible: function(a, b, c) {
        return !0;
      }
    }),
    (c.AlarmSeverity = function(a, b, c, d, e) {
      mono.AlarmSeverity.call(this, a, b, c, d, e);
    }),
    mono.extend(c.AlarmSeverity, mono.AlarmSeverity, { IT_Alarm_Severity: !0 }),
    (function() {
      for (var a in mono.AlarmSeverity)
        mono.AlarmSeverity[a] &&
          !c.AlarmSeverity[a] &&
          (c.AlarmSeverity[a] = mono.AlarmSeverity[a]);
      c.AlarmSeverity.forEach(function(a) {
        a.IT_Alarm_Severity = !0;
      });
    })(),
    (c.Alarm = function(a, b, d, e, f, g, h) {
      if (
        (c.Base.call(this),
        (this._id = a),
        (this._dataId = b),
        (this._alarmSeverity = d || c.AlarmSeverity.CRITICAL),
        (this._acked = g || !1),
        (this._cleared = h || !1),
        (this._alarmType = e),
        (this._description = f),
        !this._alarmSeverity.IT_Alarm_Severity)
      )
        throw "alarmSeverity is not it.AlarmSeverity";
    }),
    mono.extend(c.Alarm, c.Base, {
      ___accessor: [
        "acked",
        "cleared",
        "alarmSeverity",
        "alarmType",
        "description"
      ],
      IT_Alarm: !0,
      getId: function() {
        return this._id;
      },
      getDataId: function() {
        return this._dataId;
      },
      toMonoAlarm: function(a) {
        return new mono.Alarm(
          this.getId(),
          a.getId(),
          this.getAlarmSeverity(),
          this.isAcked(),
          this.isCleared()
        );
      }
    }),
    (c.AlarmState = function(a) {
      (this._d = a),
        (this._nm = {}),
        (this._am = {}),
        (this._ps = null),
        (this._haa = null),
        (this._hna = null),
        (this._hoa = null),
        (this._hta = null),
        (this._hls = !1),
        (this._aac = 0),
        (this._nac = 0);
    }),
    mono.extend(c.AlarmState, c.Base, {
      _ep: !0,
      _f: function() {
        this._c1(),
          this._c2(),
          this._c3(),
          this._c4(),
          this._c5(),
          this._c6(),
          this._c7(),
          this._d.firePropertyChange("alarmState", null, this);
      },
      getHighestAcknowledgedAlarmSeverity: function() {
        return this._haa;
      },
      getHighestNewAlarmSeverity: function() {
        return this._hna;
      },
      getHighestOverallAlarmSeverity: function() {
        return this._hoa;
      },
      getHighestNativeAlarmSeverity: function() {
        return this._hta;
      },
      hasLessSevereNewAlarms: function() {
        return this._hls;
      },
      _c1: function() {
        var a = null;
        for (var b in this._am)
          (b = TGL.AlarmSeverity.getByName(b)),
            TGL.AlarmSeverity.isClearedAlarmSeverity(b) ||
              (0 !== this.getAcknowledgedAlarmCount(b) &&
                (a = a && TGL.AlarmSeverity.compare(a, b) > 0 ? a : b));
        this._haa = a;
      },
      _c2: function() {
        var a = null;
        for (var b in this._nm)
          (b = TGL.AlarmSeverity.getByName(b)),
            TGL.AlarmSeverity.isClearedAlarmSeverity(b) ||
              (0 !== this.getNewAlarmCount(b) &&
                (a = a && TGL.AlarmSeverity.compare(a, b) > 0 ? a : b));
        this._hna = a;
      },
      _c3: function() {
        if (!this._hna) return void (this._hls = !1);
        for (var a in this._nm)
          if (
            ((a = TGL.AlarmSeverity.getByName(a)),
            !TGL.AlarmSeverity.isClearedAlarmSeverity(a) &&
              0 !== this.getNewAlarmCount(a) &&
              TGL.AlarmSeverity.compare(this._hna, a) > 0)
          )
            return void (this._hls = !0);
        this._hls = !1;
      },
      _c4: function() {
        var a = this._haa,
          b = this._hna,
          c = this._ps;
        (this._hoa = a),
          TGL.AlarmSeverity.compare(b, this._hoa) > 0 && (this._hoa = b),
          TGL.AlarmSeverity.compare(c, this._hoa) > 0 && (this._hoa = c);
      },
      _c5: function() {
        var a = this._haa,
          b = this._hna;
        (this._hta = a),
          TGL.AlarmSeverity.compare(b, this._hta) > 0 && (this._hta = b);
      },
      increaseAcknowledgedAlarm: function(a, b) {
        if ((null == b && (b = 1), 0 !== b)) {
          var c = this._am[a.name];
          null == c && (c = 0),
            (c += b),
            (this._am[a.name] = c),
            this._f(),
            this._d.onAlarmChange();
        }
      },
      increaseNewAlarm: function(a, b) {
        if ((null == b && (b = 1), 0 !== b)) {
          var c = this._nm[a.name];
          null == c && (c = 0),
            (c += b),
            (this._nm[a.name] = c),
            this._f(),
            this._d.onAlarmChange();
        }
      },
      decreaseAcknowledgedAlarm: function(a, b) {
        if ((null == b && (b = 1), 0 !== b)) {
          var c = this._am[a.name];
          if ((null == c && (c = 0), (c -= b), 0 > c))
            throw "Alarm count can not be negative";
          (this._am[a.name] = c), this._f(), this._d.onAlarmChange();
        }
      },
      decreaseNewAlarm: function(a, b) {
        if ((null == b && (b = 1), 0 !== b)) {
          var c = this._nm[a.name];
          if ((null == c && (c = 0), (c -= b), 0 > c))
            throw "Alarm count can not be negative";
          (this._nm[a.name] = c), this._f(), this._d.onAlarmChange();
        }
      },
      acknowledgeAlarm: function(a) {
        this.decreaseNewAlarm(a, 1), this.increaseAcknowledgedAlarm(a, 1);
      },
      acknowledgeAllAlarms: function(a) {
        if (a) {
          var b = this.getNewAlarmCount(a);
          this.decreaseNewAlarm(a, b), this.increaseAcknowledgedAlarm(a, b);
        } else
          for (var c in this._nm)
            this.acknowledgeAllAlarms(TGL.AlarmSeverity.getByName(c));
      },
      _c6: function() {
        this._aac = 0;
        for (var a in this._am)
          (a = TGL.AlarmSeverity.getByName(a)),
            (this._aac += this.getAcknowledgedAlarmCount(a));
      },
      getAcknowledgedAlarmCount: function(a) {
        if (a) {
          var b = this._am[a.name];
          return null == b ? 0 : b;
        }
        return this._aac;
      },
      getAlarmCount: function(a) {
        return this.getAcknowledgedAlarmCount(a) + this.getNewAlarmCount(a);
      },
      _c7: function() {
        this._nac = 0;
        for (var a in this._nm)
          (a = TGL.AlarmSeverity.getByName(a)),
            (this._nac += this.getNewAlarmCount(a));
      },
      getNewAlarmCount: function(a) {
        if (a) {
          var b = this._nm[a.name];
          return null == b ? 0 : b;
        }
        return this._nac;
      },
      setNewAlarmCount: function(a, b) {
        (this._nm[a.name] = b), this._f();
      },
      removeAllNewAlarms: function(a) {
        a ? delete this._nm[a] : (this._nm = {}), this._f();
      },
      setAcknowledgedAlarmCount: function(a, b) {
        (this._am[a.name] = b), this._f();
      },
      removeAllAcknowledgedAlarms: function(a) {
        a ? delete this._am[a.name] : (this._am = {}), this._f();
      },
      isEmpty: function() {
        return null == this._hoa;
      },
      clear: function() {
        (this._am = {}), (this._nm = {}), this._f();
      },
      getPropagateSeverity: function() {
        return this._ps;
      },
      setPropagateSeverity: function(a) {
        if ((this._ep || (a = null), this._ps !== a)) {
          var b = this._ps;
          (this._ps = a),
            this._f(),
            this._d.onAlarmChange(),
            this._d.firePropertyChange("propagateSeverity", b, a);
        }
      },
      isEnablePropagation: function() {
        return this._ep;
      },
      setEnablePropagation: function(a) {
        var b = this._ep;
        (this._ep = a),
          this._d.firePropertyChange("enablePropagation", b, a) &&
            (a || this.setPropagateSeverity(null));
      }
    }),
    (c.AlarmManager = function(a, b) {
      c.Base.call(this),
        (this.dataManager = a),
        (this.sceneManager = b),
        (this.network3d = this.sceneManager.network3d),
        (this.dataBox = this.network3d.getDataBox()),
        (this.alarmBox = this.dataBox.getAlarmBox()),
        this.alarmBox.setRemoveAlarmWhenAlarmIsCleared(!0),
        (this.alarms = new mono.List()),
        (this._removeAlarmWhenAlarmIsCleared = !0),
        (this._removeAlarmWhenDataIsRemoved = !0),
        (this._alarmManagerChangeDispatcher = new mono.EventDispatcher()),
        (this._alarmPropertyChangeDispatcher = new mono.EventDispatcher()),
        this.sceneManager.addSceneManagerChangeListener(
          this.handleSceneManagerChange,
          this,
          !0
        ),
        this.dataManager.addDataManagerChangeListener(
          this.handleDataManagerChange,
          this,
          !0
        ),
        this.addAlarmPropertyChangeListener(
          this.handleAlarmPropertyChange,
          this,
          !0
        ),
        this.addAlarmManagerChangeListener(
          this.handleAlarmManagerChange,
          this,
          !0
        );
    }),
    mono.extend(c.AlarmManager, c.Base, {
      __accessor: ["removeAlarmWhenDataIsRemoved"],
      _name: "AlarmBox",
      isRemoveAlarmWhenAlarmIsCleared: function() {
        return this._removeAlarmWhenAlarmIsCleared;
      },
      setRemoveAlarmWhenAlarmIsCleared: function(a) {
        var b = this._removeAlarmWhenAlarmIsCleared;
        if (
          ((this._removeAlarmWhenAlarmIsCleared = a),
          this.firePropertyChange("removeAlarmWhenAlarmIsCleared", b, a),
          a)
        )
          for (var c in this.datas) {
            var d = this.datas[c];
            d.isCleard() && this.remove(d);
          }
      },
      getDataById: function(a) {
        for (var b = this.alarms.size(), c = 0; b > c; c++) {
          var d = this.alarms.get(c);
          if (d.getId() == a) return d;
        }
        return null;
      },
      add: function(a) {
        if (!a) throw "alarm is null or undefined";
        if (!a.getId()) throw "alarm`s id is empty";
        if (!a.getDataId()) throw "alarm`s dataId is empty";
        if (!a.IT_Alarm) throw "Only it.Alarm can be added into AlarmManager";
        if (!this._removeAlarmWhenAlarmIsCleared || !a.isCleared()) {
          var b = this.getDataById(a.getId());
          b && console.log("alarm`s id repeat");
          var c = this.dataManager.getDataById(a.getDataId());
          c || console.log("data is not exist"),
            this.alarms.add(a),
            this._alarmManagerChangeDispatcher.fire({ kind: "add", data: a }),
            a.addPropertyChangeListener(
              this.handleAlarmDataPropertyChange,
              this
            );
        }
      },
      remove: function(a) {
        if (!a) throw "alarm is null or undefined";
        return this.removeById(a.getId());
      },
      removeById: function(a) {
        var b = this.alarms.toList(function(b) {
          return b.getId() == a;
        });
        return b.forEach(this._removeAlarmAction, this), b;
      },
      clear: function() {
        var a = this.alarms.toList();
        return a.forEach(this._removeAlarmAction, this), a;
      },
      _removeAlarmAction: function(a) {
        this._alarmManagerChangeDispatcher.fire({ kind: "remove", data: a }),
          a.removePropertyChangeListener(
            this.handleAlarmDataPropertyChange,
            this
          ),
          this.alarms.remove(a);
      },
      handleSceneManagerChange: function(a) {
        "add" === a.kind
          ? this.handleNodeAdded(a.data)
          : "remove" === a.kind
            ? this.handleNodeRemoved(a.data)
            : "clear" === a.kind &&
              a.datas.forEach(this.handleNodeRemoved, this);
      },
      handleDataManagerChange: function(a) {
        "add" === a.kind ||
          ("remove" === a.kind
            ? (this.handleDataRemoved(a.data),
              this._removeAlarmWhenDataIsRemoved &&
                this.removeAlarmsByData(a.data))
            : "clear" === a.kind &&
              (a.datas.forEach(this.handleDataRemoved, this),
              this._removeAlarmWhenDataIsRemoved && this.clear()));
      },
      handleAlarmManagerChange: function(a) {
        var b = a.data;
        if ("add" === a.kind) {
          this._increaseAlarmState(b);
          var c = this.sceneManager.dataNodeMap[b.getDataId()];
          c && this.alarmBox.add(b.toMonoAlarm(c));
        } else
          "remove" === a.kind
            ? (this._decreaseAlarmState(b), this.alarmBox.removeById(b.getId()))
            : "clear" === a.kind &&
              a.datas.forEach(this._clearAlarmState, this);
      },
      handleAlarmDataPropertyChange: function(a) {
        this._alarmPropertyChangeDispatcher.fire(a);
      },
      handleAlarmPropertyChange: function(a) {
        var b = a.source,
          c = this.alarmBox.getDataById(b.getId());
        if (!b.isCleared())
          if ("alarmSeverity" === a.property) {
            this.handleAlarmSeverityChange(b, a);
            var d = null == a.newValue ? null : a.newValue;
            c && c.setAlarmSeverity(d);
          } else
            "acked" === a.property &&
              (this.handleAckedChange(b, a), c && c.setAcked(a.newValue));
        "cleared" === a.property &&
          (b.isCleared()
            ? (this._decreaseAlarmState(b, !0),
              this._removeAlarmWhenAlarmIsCleared && this.remove(b))
            : this._increaseAlarmState(b, !0),
          c && c.setCleared(a.newValue));
      },
      handleAckedChange: function(a, b) {
        if (a.getAlarmSeverity()) {
          var c = (b.newValue, this.getDatasByAlarm(a));
          if (c)
            for (var d = 0; d < c.size(); d++) {
              var e = c.get(d);
              b.oldValue
                ? e
                    .getAlarmState()
                    .decreaseAcknowledgedAlarm(a.getAlarmSeverity())
                : e.getAlarmState().decreaseNewAlarm(a.getAlarmSeverity()),
                b.newValue
                  ? e
                      .getAlarmState()
                      .increaseAcknowledgedAlarm(a.getAlarmSeverity())
                  : e.getAlarmState().increaseNewAlarm(a.getAlarmSeverity());
            }
        }
      },
      handleAlarmSeverityChange: function(a, b) {
        var c = b.oldValue,
          d = b.newValue,
          e = this.getDatasByAlarm(a);
        if (e)
          for (var f = 0; f < e.size(); f++) {
            var g = e.get(f);
            c &&
              (a.isAcked()
                ? g.getAlarmState().decreaseAcknowledgedAlarm(c)
                : g.getAlarmState().decreaseNewAlarm(c)),
              d &&
                (a.isAcked()
                  ? g.getAlarmState().increaseAcknowledgedAlarm(d)
                  : g.getAlarmState().increaseNewAlarm(d));
          }
      },
      handleNodeAdded: function(a) {
        var b = this,
          d = c.SceneManager.getNodeDataId(a),
          e = this.getAlarmsByDataId(d);
        e &&
          e.forEach(function(c) {
            if (!c.isCleared()) {
              var d = c.getAlarmSeverity();
              d &&
                (c.isAcked()
                  ? a.getAlarmState().increaseAcknowledgedAlarm(d)
                  : a.getAlarmState().increaseNewAlarm(d)),
                b.alarmBox.add(c.toMonoAlarm(a));
            }
          });
      },
      handleNodeRemoved: function(a) {
        var b = this,
          d = c.SceneManager.getNodeDataId(a),
          e = this.getAlarmsByDataId(d);
        e &&
          e.forEach(function(c) {
            !c.isCleared() &&
              c.getAlarmSeverity() &&
              (c.isAcked()
                ? a
                    .getAlarmState()
                    .decreaseAcknowledgedAlarm(c.getAlarmSeverity())
                : a.getAlarmState().decreaseNewAlarm(c.getAlarmSeverity())),
              b.alarmBox.removeById(c.getId());
          });
      },
      _increaseAlarmState: function(a, b) {
        if (!a.isCleared() || b) {
          var c = a.getAlarmSeverity();
          if (c) {
            var d = this.getDatasByAlarm(a);
            if (d)
              for (var e = 0; e < d.size(); e++) {
                var f = d.get(e);
                f &&
                  f.getAlarmState() &&
                  (a.isAcked()
                    ? f.getAlarmState().increaseAcknowledgedAlarm(c)
                    : f.getAlarmState().increaseNewAlarm(c));
              }
          }
        }
      },
      _clearAlarmState: function(a, b) {
        this._decreaseAlarmState(a, b), this.alarmBox.removeById(a.getId());
      },
      _decreaseAlarmState: function(a, b) {
        if ((a.isCleared() || console.log(), !a.isCleared() || b)) {
          var c = a.getAlarmSeverity();
          if (c) {
            var d = this.getDatasByAlarm(a);
            if (d)
              for (var e = 0; e < d.size(); e++) {
                var f = d.get(e);
                a.isAcked()
                  ? f.getAlarmState().decreaseAcknowledgedAlarm(c)
                  : f.getAlarmState().decreaseNewAlarm(c);
              }
          }
        }
      },
      handleDataRemoved: function(a) {
        var b = a.getId(),
          c = this.getAlarmsByDataId(b);
        c &&
          c.forEach(function(b) {
            !b.isCleared() &&
              b.getAlarmSeverity() &&
              (b.isAcked()
                ? a
                    .getAlarmState()
                    .decreaseAcknowledgedAlarm(b.getAlarmSeverity())
                : a.getAlarmState().decreaseNewAlarm(b.getAlarmSeverity()));
          });
      },
      removeAlarmsByData: function(a) {
        var b = a.getId(),
          c = this.getAlarmsByDataId(b);
        c && c.forEach(this.remove, this);
      },
      getAlarmsByDataId: function(a) {
        return this.alarms.toList(function(b) {
          return b.getDataId() == a;
        });
      },
      getDatasByAlarmId: function(a) {
        var b = this,
          c = new mono.List();
        return (
          this.alarms.forEach(function(d) {
            if (d.getId() == a) {
              var e = d.getDataId(),
                f = b.dataManager.getDataById(e);
              c.add(f);
            }
          }),
          c
        );
      },
      getDatasByAlarm: function(a) {
        return this.getDatasByAlarmId(a.getId());
      },
      addAlarmManagerChangeListener: function(a, b, c) {
        this._alarmManagerChangeDispatcher.add(a, b, c);
      },
      removeAlarmManagerChangeListener: function(a, b) {
        this._alarmManagerChangeDispatcher.remove(a, b);
      },
      addAlarmPropertyChangeListener: function(a, b, c) {
        this._alarmPropertyChangeDispatcher.add(a, b, c);
      },
      removeAlarmPropertyChangeListener: function(a, b) {
        this._alarmPropertyChangeDispatcher.remove(a, b);
      }
    }),
    (c.AlarmStatePropagator = function(a, b, c) {
      (this.dataManager = a),
        (this.sceneManager = b),
        (this.alarmManager = c),
        (this.dataBox = c.dataBox),
        (this.alarmBox = c.alarmBox),
        mono.AlarmStatePropagator.call(this, this.dataBox, "alarmState"),
        this.dataBox.setAlarmStatePropagator(this),
        (this.childrenAlarms = []);
    }),
    mono.extend(c.AlarmStatePropagator, mono.AlarmStatePropagator, {
      propagateToTop: function(a) {
        var b = !0;
        for (
          b = this.propagateToParent(null, a);
          a && a.getParent() && b !== !1;

        )
          (b = this.propagateToParent(a, a.getParent())), (a = a.getParent());
      },
      propagateToParent: function(a, b) {
        var d = null == a ? null : c.SceneManager.getNodeData(a),
          e = null == b ? null : c.SceneManager.getNodeData(b);
        return e ? this.dataPropagateToParent(d, e, a, b) : !1;
      },
      dataPropagateToParent: function(a, b, c, d) {
        return this.dataPropagateToParentForRoom(a, b, c, d);
      },
      dataPropagateToParentForRoom: function(a, b, d, e) {
        if (a) {
          var f = this.dataManager.getDataTypeForData(a);
          if (f) {
            if (f.isStopAlarmPropagationable()) return !1;
            var g = this.dataManager.getCategoryForData(a);
            if (g && g.isStopAlarmPropagationable()) return !1;
          }
        }
        if ((this.modelChildAlarmSyn(a, b, d, e), !b.getAlarmState)) return !1;
        b.getAlarmState().setPropagateSeverity(null),
          e.getAlarmState().setPropagateSeverity(null);
        for (
          var h = b.getAlarmState().getHighestOverallAlarmSeverity(),
            i = b.getChildren(),
            j = i.size(),
            k = 0;
          j > k;
          k++
        ) {
          var l = i.get(k),
            m = l.getAlarmState().getHighestOverallAlarmSeverity();
          c.AlarmSeverity.compare(m, h) > 0 && (h = m);
        }
        b.getAlarmState().setPropagateSeverity(h),
          e.getAlarmState().setPropagateSeverity(h);
        var n = null == b ? null : this.dataManager.getDataTypeForData(b);
        if (!n) return !1;
        if (n.isStopAlarmPropagationable()) return !1;
        var o = this.dataManager.getCategoryForData(b);
        return o
          ? o.isStopAlarmPropagationable()
            ? !1
            : !0
          : !n.isStopAlarmPropagationable();
      },
      modelChildAlarmSyn: function(a, b, c, d) {
        for (
          var e = d.getChildren(),
            f = e.size(),
            g = d.getAlarmState().getHighestNativeAlarmSeverity(),
            h = 0;
          f > h;
          h++
        ) {
          var i = e.get(h);
          if (d == i.getClient("modelParent")) {
            var j = "child_alarm_" + i.getId();
            if (g) {
              var k = this.alarmBox.getDataById(j);
              k
                ? k.setAlarmSeverity(g)
                : ((k = new mono.Alarm(j, i.getId(), g)), this.alarmBox.add(k)),
                i.getAlarmState().setPropagateSeverity(g);
            } else
              this.alarmBox.removeById(j),
                i.getAlarmState().setPropagateSeverity(null);
          }
        }
      }
    }),
    (c.DefaultEventHandler = function(a) {
      c.EventHandler.call(this),
        (this.sceneManager = a),
        (this.mode = "lookat"),
        (this.filterFunction = null),
        (this.defaultPostion = null),
        (this.defaultTarget = null),
        (this.defaultLookAtDistance = 2e3),
        (this.lookAtDistanceFunction = null),
        (this.looAtNode = null),
        (this.isLookAtFunction = null),
        (this.afterLookAtFunction = null);
    }),
    mono.extend(c.DefaultEventHandler, c.EventHandler, {
      setDefaultPositionAndTarget: function(a, b) {
        (this.defaultPostion = a), (this.defaultTarget = b);
      },
      getDefaultVirtual: function() {
        return this.sceneManager.viewManager3d.getDefaultVirtualMaterialFilter();
      },
      setMode: function(a) {
        this.mode = a;
      },
      getCamera: function() {
        return this.sceneManager.network3d.getCamera();
      },
      isLookAtWithAngle: function(a) {
        if (a && a.getBoundingBox()) {
          var b = a.getBoundingBox();
          if (
            b.max.x - b.min.x > 600 ||
            b.max.y - b.min.y > 600 ||
            b.max.z - b.min.z > 600
          )
            return !0;
        }
        return !1;
      },
      getElementPerfectDistance: function(a) {
        if (!a) return 100;
        var b = this.sceneManager.network3d.getCamera(),
          c = 100,
          d = a.getBoundingBox();
        if (d) {
          var e = d.max.y - d.min.y,
            f = d.max.x - d.min.x;
          c = e > f ? e : f;
        }
        var g = c / (2 * Math.tan((b.fov * Math.PI) / 180 / 2)),
          h = 50;
        return (g += h);
      },
      getElementPerfectFrontPosition: function(a) {
        if (!a) return null;
        var b = this.getElementPerfectDistance(a);
        100 > b && (b = 100);
        var c = a.frontWorldPosition(b);
        return (c.y = c.y + 20), c;
      },
      getNodeCenterPosition: function(a) {
        if (!a) return null;
        var b = a.getBoundingBox(),
          c = (b.max.x + b.min.x) / 2,
          d = (b.max.y + b.min.y) / 2,
          e = (b.max.z + b.min.z) / 2,
          f = a.getWorldPosition();
        return f.setX(f.x + c), f.setY(f.y + d), f.setZ(f.z + e), f;
      },
      moveCameraForLookAtNode: function(a, b) {
        if (a) {
          var c = this.sceneManager.network3d.getCamera(),
            d = this.getNodeCenterPosition(a);
          d || (d = new mono.Vec3(0, 0, 0));
          var e = new mono.Vec3(d.x, d.y, d.z),
            f = this.getElementPerfectFrontPosition(a);
          if (this.isLookAtWithAngle(a)) {
            var g = this.getElementPerfectDistance(a);
            (f = a.worldPosition(new mono.Vec3(0, 1, 1), g)), (f.x = e.x);
          }
          mono.Utils.playCameraAnimation(c, f, e, 1e3, b);
        }
      },
      lookAtElements: function(a, b) {
        if (!a || a.length < 1) return null;
        1 === a.length && this.lookAt(a[0]);
        for (
          var c,
            d,
            e,
            f,
            g,
            h,
            i = this.sceneManager.network3d.getCamera(),
            j = 0;
          j < a.length;
          j++
        ) {
          var k = a[j];
          if (k) {
            var l = k.getWorldPosition();
            (!c || c > l.x) && (c = l.x),
              (!d || d > l.y) && (d = l.y),
              (!e || e > l.z) && (e = l.z),
              (!f || f < l.x) && (f = l.x),
              (!g || g < l.y) && (g = l.y),
              (!h || h < l.z) && (h = l.z);
          }
        }
        var m = new mono.Vec3(
            c + (f - c) / 2,
            d + (g - d) / 2,
            e + (h - e) / 2
          ),
          n = f - c;
        g - d > n && (n = g - d), h - e > n && (n = h - e);
        var o = n / (2 * Math.tan((i.fov * Math.PI) / 180 / 2)),
          p = 50;
        (o += p), 500 > o && (o = 500);
        var q = new mono.Vec3(m.x, m.y + 50, m.z + o);
        mono.Utils.playCameraAnimation(i, q, m, 1e3, b);
      },
      getCenter: function(a, b) {
        if (a || b) {
          if (!a && b) return b.getWorldPosition();
          if (!b && a) return a.getWorldPosition();
          var c = a.getWorldPosition(),
            d = b.getWorldPosition(),
            e = d.x - c.x > 0 ? c.x + (d.x - c.x) / 2 : d.x + (c.x - d.x) / 2,
            f = d.y - c.y > 0 ? c.y + (d.y - c.y) / 2 : d.y + (c.y - d.y) / 2,
            g = d.z - c.z > 0 ? c.z + (d.z - c.z) / 2 : d.z + (c.z - d.z) / 2;
          return new mono.Vec3(e, f, g);
        }
        return null;
      },
      getPerfectDistanceForNodes: function(a, b) {
        if (a || b) {
          if (!a && b) return this.getElementPerfectDistance(b);
          if (!b && a) return this.getElementPerfectDistance(a);
          var c = this.sceneManager.network3d.getCamera(),
            d = a.getWorldPosition(),
            e = b.getWorldPosition(),
            f = e.x - d.x > 0 ? e.x - d.x : d.x - e.x,
            g = e.y - d.y > 0 ? e.y - d.y : d.y - e.y,
            h = e.z - d.z > 0 ? e.z - d.z : d.z - e.z,
            i = f;
          g > i && (i = g), h > i && (i = h);
          var j = i / (2 * Math.tan((c.fov * Math.PI) / 180 / 2)),
            k = 50;
          return (j += k), 500 > j && (j = 500), j;
        }
        return null;
      },
      moveCameraForLookAtLink: function(a, b) {
        if (a) {
          var c = this.sceneManager.network3d.getCamera(),
            d = this.sceneManager.getLinkData(a);
          if (!d) return void this.moveCameraForLookAtNode(a, b);
          var e = this.sceneManager.getNodeByDataOrId(d.getFromId()),
            f = this.sceneManager.getNodeByDataOrId(d.getToId()),
            g = this.getCenter(e, f),
            h = this.getPerfectDistanceForNodes(e, f),
            i = new mono.Vec3(g.x, g.y + 50, g.z + h);
          mono.Utils.playCameraAnimation(c, i, g, 1e3, b);
        }
      },
      _isLookAt: function(a) {
        return null != this.isLookAtFunction ? this.isLookAtFunction(a) : !0;
      },
      lookAt: function(a, b) {
        var c = this.sceneManager.getMainNode(a);
        !c && this.sceneManager.isLink(a) && (c = a),
          (this.lookAtNode = a),
          this.sceneManager.viewManager3d.setFocusNode(c);
        var d = this,
          e = function() {
            d.afterLookAt(c, a, b);
          };
        this.sceneManager.isLink(a)
          ? this.moveCameraForLookAtLink(a, e)
          : this.moveCameraForLookAtNode(c, e);
      },
      afterLookAt: function(a, b, c) {
        this.openDoor(a, c),
          this.afterLookAtFunction && this.afterLookAtFunction(a, b);
      },
      findOidfromChildren: function(a, b) {
        if (a.getClient("type") == b) return a;
        for (var c = a.getChildren(), d = 0; d < c.size(); d++) {
          var e = c.get(d);
          if (e.getClient("it_data") == a.getClient("it_data")) {
            var f = this.findOidfromChildren(e, b, this);
            if (f) return f;
          }
        }
      },
      findAllOidDatafromChildren: function(a, b) {
        var c = [];
        if (a.getClient("type") == b) return c.push(a), c;
        for (var d = a.getChildren(), e = 0; e < d.size(); e++) {
          var f = d.get(e);
          if (f.getClient("it_data") == a.getClient("it_data")) {
            var g = this.findOidfromChildren(f, b);
            g && c.push(g);
          }
        }
        return c;
      },
      findRackDoorElementAtRack: function(a) {
        return a ? this.findAllOidDatafromChildren(a, "rack_door") : void 0;
      },
      openDoor: function(a, b) {
        var c = this.findRackDoorElementAtRack(a),
          d = !1;
        c &&
          c.length > 0 &&
          c.forEach(function(a) {
            a &&
              a.getClient("animation") &&
              !a.getClient("animated") &&
              ((d = !0),
              make.Default.playAnimation(a, a.getClient("animation"), b));
          }),
          !d && b && b();
      },
      closeDoor: function(a, b) {
        var c = this.findRackDoorElementAtRack(a),
          d = !1;
        c &&
          c.length > 0 &&
          c.forEach(function(a) {
            a &&
              a.getClient("animation") &&
              a.getClient("animated") &&
              ((d = !0),
              make.Default.playAnimation(a, a.getClient("animation"), b));
          }),
          !d && b && b();
      },
      isFollow: function(a) {
        if (a && a.getBoundingBox()) {
          var b = a.getBoundingBox();
          if (
            b.max.x - b.min.x > 500 ||
            b.max.y - b.min.y > 500 ||
            b.max.z - b.min.z > 500
          )
            return !0;
        }
        return !1;
      },
      moveToClickPoint: function(a) {
        if (a) {
          var b = this.getCamera();
          if (b) {
            var c = a.point,
              d = b.getPosition().sub(b.getTarget()),
              e = new mono.Vec3().addVectors(d, c);
            mono.Utils.playCameraAnimation(b, e, c, 1e3);
          }
        }
      },
      getElementPerfectBackPosition: function(a) {
        if (!a) return null;
        var b = this.getElementPerfectDistance(a),
          c = a.worldPosition(new mono.Vec3(0, 0, -1), b);
        return c && (c.y = c.y + 20), c;
      },
      rotateElement: function(a) {
        if (a) {
          !a.isVisible() && a.simpleRack && (a = a.simpleRack);
          var b = this.sceneManager.network3d.getCamera(),
            c = null,
            d = a.getWorldPosition(),
            e = a.getClient("rotate_flage");
          e
            ? ((c = this.getElementPerfectFrontPosition(a)),
              a.setClient("rotate_flage", !1))
            : ((c = this.getElementPerfectBackPosition(a)),
              a.setClient("rotate_flage", !0));
          var f = new mono.Vec3(d.x, d.y, d.z);
          mono.Utils.playCameraAnimation(b, c, f, 2e3);
        }
      },
      shouldHandleDoubleClickElement: function(a, b, c, d) {
        var e = this.getDefaultVirtual();
        if (e && e.isVirtual(a)) return !1;
        var f = a.getClient("modelParent") || a;
        return this._isLookAt(f) && this.lookAtNode != f
          ? !0
          : this.isFollow(a)
            ? !0
            : !1;
      },
      shouldPropogateDoubleClickElement: function(a, b, c, d) {
        return !1;
      },
      shouldHandleDoubleClickBackground: function(a) {
        return !0;
      },
      shouldPropogateDoubleClickBackground: function(a) {
        return !1;
      },
      handleDoubleClickBackground: function(a) {
        if (this.lookAtNode) {
          this.sceneManager.isLink(this.lookAtNode) &&
            (this.lookAtNode =
              this.lookAtNode.getFromNode() || this.lookAtNode.getFromNode());
          var b = this.sceneManager.getNodeData(this.lookAtNode);
          if (b && b.getParentId()) {
            var c = this.sceneManager.dataNodeMap[b.getParentId()];
            if (c) return void this.lookAt(c);
          }
        }
        this.lookAtNode = null;
      },
      handleDoubleClickElement: function(a, b, c, d) {
        var e = a.getClient("modelParent") || a;
        this._isLookAt(e) && this.lookAtNode != e
          ? (this.lookAt(e), (this.lookAtNode = e))
          : this.isFollow(a) && this.moveToClickPoint(d);
      }
    }),
    (c.VirtualManager = function(a) {
      c.MaterialFilter.call(this),
        (this.sceneManager = a),
        (this.opacityValue = 0.05),
        (this.focusElement = null),
        (this.virtualFilter = null),
        (this.materialMap = {}),
        (this.isDealWithFunction = null),
        (this._global_tmap = {}),
        (this._global_linkTmap = {}),
        (this._tmap = {}),
        (this._linkTmap = {}),
        (this._billboard_tmap = {}),
        (this._link_tmap = {}),
        this.sceneManager.network3d.setSelectTransparencyThreshold(
          this.opacityValue + 0.1
        ),
        (this.dealWithLinkFunction = null);
    }),
    mono.extend(c.VirtualManager, c.MaterialFilter, {
      clearGlobal: function() {
        (this._global_tmap = {}), (this._global_linkTmap = {});
      },
      clear: function() {
        (this._tmap = {}), (this._linkTmap = {});
      },
      clearAll: function() {
        (this._tmap = {}),
          (this._linkTmap = {}),
          (this._global_tmap = {}),
          (this._global_linkTmap = {});
      },
      isDealWith: function(a) {
        return null != this.isDealWithFunction
          ? this.isDealWithFunction(a)
          : !0;
      },
      isDealWithLink: function(a) {
        return this.dealWithLinkFunction ? this.dealWithLinkFunction(a) : !1;
      },
      getBId: function(a) {
        return a && this.isDealWith(a) ? a.getId() : null;
      },
      addGlobal: function(a) {
        if (a instanceof c.Link) return void this.addGlobalLink(a);
        var b = this.getBId(a);
        b && (this._global_tmap[b] = !0);
      },
      addGlobalLink: function(a) {
        this.getBId(a);
      },
      addGlobalByDescendant: function(a) {
        if (
          a &&
          (a instanceof mono.Element && (a = this.getDataByNode(a)),
          a && a.getId())
        ) {
          this.addGlobal(a);
          var b = this.sceneManager.dataNodeMap[a.getId()],
            c = b.getChildren();
          if (c && c.size() > 0)
            for (var d = 0; d < c.size(); d++) {
              var e = c.get(d),
                f = this.getDataByNode(e);
              f &&
                this.getBId(f) != this.getBId(a) &&
                this.addGlobalByDescendant(e, this);
            }
        }
      },
      removeGlobal: function(a) {
        var b = this.getBId(a);
        b &&
          (a instanceof c.Link
            ? delete this._global_linkTmap[b]
            : delete this._global_tmap[b]);
      },
      removeGlobalByDescendant: function(a) {
        if (
          a &&
          (a instanceof mono.Element && (a = this.getDataByNode(a)),
          a && a.getId())
        ) {
          this.removeGlobal(a);
          var b = this.sceneManager.dataNodeMap[a.getId()],
            c = b.getChildren();
          if (c && c.size() > 0)
            for (var d = 0; d < c.size(); d++) {
              var e = c.get(d),
                f = this.getDataByNode(e);
              f &&
                this.getBId(f) != this.getBId(a) &&
                this.removeGlobalByDescendant(e, this);
            }
        }
      },
      add: function(a) {
        var b = this.getBId(a);
        b && (a instanceof c.Link || (this._tmap[b] = !0));
      },
      addLink: function(a) {
        a && this.getBId(a);
      },
      getDataByNode: function(a) {
        return a ? a.getClient(c.SceneManager.CLIENT_IT_DATA) : null;
      },
      addByDescendant: function(a) {
        if (
          a &&
          (a instanceof mono.Element && (a = this.getDataByNode(a)),
          a && a.getId())
        ) {
          this.add(a);
          var b = this.sceneManager.dataNodeMap[a.getId()],
            c = b.getChildren();
          if (c && c.size() > 0)
            for (var d = 0; d < c.size(); d++) {
              var e = c.get(d),
                f = this.getDataByNode(e);
              f &&
                this.getBId(f) != this.getBId(a) &&
                this.addByDescendant(e, this);
            }
        }
      },
      remove: function(a) {
        var b = this.getBId(a);
        if (b)
          if (a instanceof c.Link) delete this._linkTmap[b];
          else {
            if (a.getAllLinks) {
              var d = a.getAllLinks();
              if (d) for (var e in d) delete this._linkTmap[e];
            }
            delete this._tmap[b];
          }
      },
      removeByDescendant: function(a) {
        var b = a;
        if (
          b &&
          (b instanceof mono.Element && (b = this.getDataByNode(b)),
          b && b.getId())
        ) {
          this.remove(b);
          var d = this.sceneManager.dataNodeMap[b.getId()];
          b instanceof c.Link && (d = this.sceneManager.linkMap[b.getId()]);
          var e = this;
          (d && d.getChildren) || console.log("Stop!");
          var f = d.getChildren();
          if (f && f.size() > 0)
            for (var g = 0; g < f.size(); g++) {
              var h = f.get(g),
                i = e.getDataByNode(h);
              i && e.getBId(i) != e.getBId(b) && e.removeByDescendant(h, e);
            }
        }
      },
      addAll: function() {
        this.addAllData(), this.addAllLink();
      },
      addAllData: function() {
        var a = this.sceneManager.dataManager.getDataMap();
        if (a)
          for (var b in a) {
            var c = a[b];
            c && this.add(c);
          }
      },
      addAllLink: function() {
        var a = this.sceneManager.dataManager.getLinkMap();
        if (a)
          for (var b in a) {
            var c = a[b];
            c && this.addLink(c);
          }
      },
      isDealWithBillboard: function(a) {
        return !0;
      },
      isVirtual: function(a) {
        var b = a;
        a instanceof mono.Element && (b = this.getDataByNode(a));
        var c = this.getBId(b),
          d = !1;
        return (
          c &&
            (a instanceof mono.Link
              ? this._global_linkTmap[c]
                ? (d = this._global_linkTmap[c])
                : this._linkTmap[c] && (d = this._linkTmap[c])
              : this._global_tmap[c]
                ? (d = this._global_tmap[c])
                : this._tmap[c] && (d = this._tmap[c])),
          d
        );
      },
      isLink: function(a) {
        return a &&
          a.getClient(c.SceneManager.CLIENT_IT_DATA) &&
          a.getClient(c.SceneManager.CLIENT_IT_DATA) instanceof c.Link
          ? !0
          : !1;
      },
      isHideVirtualBillboard: function(a) {
        if (a && a instanceof mono.Billboard && a.getParent()) {
          var b = a.getParent();
          if (b._alarmBillboard == a) return !0;
        }
        return !1;
      },
      setFocusElement: function(a) {},
      destoryBillboard: function() {
        if (this._billboard_tmap)
          for (var a in this._billboard_tmap) {
            var c = this._billboard_tmap[a];
            if (c.hasOwnProperty("orig_opacity")) {
              var d = c.orig_opacity;
              d == b && (d = 1),
                c.setStyle("m.opacity", d),
                this.isHideVirtualBillboard(c) && c.setVisible(!0),
                delete c.orig_opacity,
                (c.renderDepth = 0),
                delete this._billboard_tmap[c.getId()];
            }
          }
      },
      filterMaterial: function(a, d, e) {
        if (!this.isLink(e) && e instanceof mono.Line) return a;
        var f = this.materialMap,
          g = d ? d : a,
          h = this.getDataByNode(e);
        !h &&
          e instanceof mono.Billboard &&
          e.getParent() &&
          (h = this.getDataByNode(e.getParent()));
        var i = this.opacityValue,
          j = "",
          k = !1;
        if (h && h instanceof c.Link && this.isDealWithLink())
          return (
            (j = this.getBId(h)),
            j &&
              (this._global_linkTmap[j]
                ? (k = this._global_linkTmap[j])
                : this._linkTmap[j] && (k = this._linkTmap[j])),
            k
              ? ((this._link_tmap[e.getId()] = e.isVisible()), e.setVisible(!1))
              : (null != this._link_tmap[e.getId()] ||
                  this._link_tmap[e.getId()] !== b) &&
                (e.setVisible(this._link_tmap[e.getId()]),
                delete this._link_tmap[e.getId()]),
            g
          );
        if (
          (h && h instanceof c.Data && (j = this.getBId(h)),
          j &&
            (this._global_tmap[j]
              ? (k = this._global_tmap[j])
              : this._tmap[j] && (k = this._tmap[j])),
          e instanceof mono.Billboard && this.isDealWithBillboard(e))
        ) {
          if (k)
            (e.renderDepth = 1e4),
              e.hasOwnProperty("orig_opacity") ||
                (e.orig_opacity = e.getStyle("m.opacity")),
              (this._billboard_tmap[e.getId()] = e),
              e.setStyle("m.opacity", i),
              this.isHideVirtualBillboard(e) && e.setVisible(!1);
          else if (
            e.hasOwnProperty("orig_opacity") &&
            this._billboard_tmap[e.getId()]
          ) {
            var l = e.orig_opacity;
            l == b && (l = 1),
              e.setStyle("m.opacity", l),
              this.isHideVirtualBillboard(e) && e.setVisible(!0),
              delete e.orig_opacity,
              (e.renderDepth = 0),
              delete this._billboard_tmap[e.getId()];
          }
          return g;
        }
        if (!k) return g;
        var m = d ? d.getUniqueCode() : a.getUniqueCode();
        if (null == f[m]) {
          var n = d ? d.clone() : a.clone();
          return (
            (n.transparent = !0), (n.opacity = this.opacityValue), (f[m] = n), n
          );
        }
        return f[m];
      }
    }),
    (c.SelectableManager = function(a) {
      this.virtualManager = a;
    }),
    mono.extend(c.SelectableManager, c.SelectableFilter, {
      isSelectable: function(a, b) {
        return this.virtualManager.isVirtual(a)
          ? !1
          : a instanceof mono.Line
            ? !1
            : !0;
      }
    }),
    (c.DataFinder = function(a) {
      (this.dataManager = a),
        (this.descentdantMap = {}),
        (this.ancesstorIdsMap = {}),
        this.init();
    }),
    mono.extend(c.DataFinder, Object, {
      init: function() {},
      getGetMethod: function(a) {
        var b = "get" + a.charAt(0).toUpperCase() + a.slice(1);
        return b;
      },
      getDatas: function() {
        return this.dataManager.getDatas();
      },
      getDataById: function(a) {
        return this.dataManager.getDataById(a);
      },
      getDataByKey: function(a, b) {
        if (!a && !b) return null;
        var c = !1;
        a.toUpperCase().startsWith("U:") && ((c = !0), (a = a.slice(2)));
        for (
          var d, e = this.getGetMethod(a), f = 0, g = this.getDatas();
          f < g.length;
          f++
        ) {
          if (((d = g[f]), c)) {
            var h = d.getUserData(a);
            if (h == b) return d;
          } else if (null == d[e]) {
            var h = d.getUserData(a);
            if (h == b) return d;
          }
          if (d[e]() == b) return d;
        }
        return null;
      },
      find: function(a) {
        var b = this.getDatas(),
          c = [];
        if (!a || a.length < 1) {
          for (var d = 0; d < b.length; d++) c.push(b[d]);
          return c;
        }
        for (var e, d = 0, f = b.length; f > d; d++)
          (e = b[d]), this.isDataConformConditions(e, a) && c.push(e);
        return c;
      },
      isDataConformConditions: function(a, b) {
        var c = !0;
        for (var d in b)
          if (!this.isDataConformCondition(a, b[d])) {
            c = !1;
            break;
          }
        return c;
      },
      isDataConformCondition: function(a, b, c) {
        if ("" == b.value || null == b.value) return !0;
        var c = c || b.key;
        if (c.indexOf(",") > 0) {
          for (var d = c.split(","), e = 0; e < d.length; e++)
            if (this.isDataConformCondition(a, b, d[e])) return !0;
          return !1;
        }
        var f = !1;
        c.toUpperCase().startsWith("U:") && ((f = !0), (c = c.slice(2)));
        var g = this.getGetMethod(c);
        null == a[g] && (f = !0);
        var h = b.operation,
          i = b.value,
          j = null;
        if (f || null == a[g]) j = a.getUserData(c);
        else {
          var g = this.getGetMethod(c);
          j = a[g]();
        }
        var k = this[h];
        return "function" == typeof k
          ? this[h](i, j, c)
          : this.other(i, j, c, h);
      },
      equal: function(a, b, c) {
        return a && b ? a.toLowerCase() == b.toLowerCase() : b == a;
      },
      like: function(a, b, c) {
        return (
          (b += ""),
          b.startsWith
            ? a
              ? b.toLowerCase().startsWith(a.toLowerCase())
              : b.startsWith(a)
            : !1
        );
      },
      between: function(a, b, c) {
        return a[0] || a[1]
          ? null == a[0]
            ? b <= a[1]
            : null == a[1]
              ? b >= a[0]
              : b >= a[0] && b <= a[1]
          : !1;
      },
      other: function(a, b, c, d) {
        if (!d) return this.like(a, b, c);
        if (a && b) {
          "number" == typeof b && (b += "");
          var d = d.trim();
          if (">" == d) return b > a;
          if ("<" == d) return a > b;
          if ("<=" == d) return a >= b;
          if (">=" == d) return b >= a;
          if ("=" == d) return b.toLowerCase() == a.toLowerCase();
        }
        return this.like(a, b, c);
      },
      descentdantOf: function(a, b, c) {
        if ("id" !== c) throw "Only id support descentdantOf";
        var d = this.getDataById(a),
          e = this.getDataById(b);
        if (null == d || null == e) return !1;
        var f = this.dataManager.getAncestors(e) || [];
        return -1 !== f.indexOf(d);
      }
    }),
    (c.Size = function(a) {
      (a = a || {}),
        (this.xSize = a.x),
        (this.ySize = a.y),
        (this.zSize = a.z),
        (this.xPadding = a.xPadding || [0, 0]),
        (this.yPadding = a.yPadding || [0, 0]),
        (this.zPadding = a.zPadding || [0, 0]),
        (this.xGap = 0),
        (this.yGap = 0),
        (this.zGap = 0);
    }),
    mono.extend(c.Size, Object, {
      __accessor: [
        "xSize",
        "ySize",
        "zSize",
        "xPadding",
        "yPadding",
        "zPadding"
      ],
      parse: function() {}
    }),
    (c.Location = function(a) {
      this.parse(a);
    }),
    (c.Location.getAlignName = function(a) {
      for (var b in e) if (e[b] === a) return b;
    });
  var e = (c.Location.Align = {});
  (e.pos_neg = -1),
    (e.center_neg = -2),
    (e.neg_neg = -3),
    (e.center = -4),
    (e.pos_pos = -5),
    (e.center_pos = -6),
    (e.neg_pos = -7),
    mono.extend(c.Location, Object, {
      set: function(a, b) {
        "string" == typeof b && (b = c.Location.Align[b]), (this[a] = b);
      },
      setX: function(a) {
        this.set("x", a);
      },
      setY: function(a) {
        this.set("y", a);
      },
      setZ: function(a) {
        this.set("z", a);
      },
      getX: function() {
        return this.x;
      },
      getY: function() {
        return this.y;
      },
      getZ: function() {
        return this.z;
      },
      parse: function(a) {
        if (a) {
          if (!c.defaultLocatonParser) throw "it.defaultLocatonParser is null";
          var b = c.defaultLocatonParser.parse(a);
          if (!(null != b && b instanceof c.Location))
            throw "it.defaultLocatonParser.parse() does not return a it.Location";
          (this.location = b), (this.x = b.x), (this.y = b.y), (this.z = b.z);
        }
      }
    }),
    (c.LocationParser = function() {}),
    mono.extend(c.LocationParser, Object, {
      parse: function(a) {
        return null;
      }
    }),
    (c.DefaultLocatonParser = function() {
      c.LocationParser.call(this);
    }),
    mono.extend(c.DefaultLocatonParser, c.LocationParser, {
      parse: function(a) {
        var d = new c.Location();
        return (
          a instanceof c.Location
            ? ((d.x = a.x), (d.y = a.y), (d.z = a.z))
            : a.x !== b || a.y !== b || a.z !== b
              ? (d.setX(a.x), d.setY(a.y), d.setZ(a.z))
              : "string" == typeof a && (d = this.parseText(a)),
          d
        );
      },
      parseText: function(a) {
        var a = JSON.parse(a);
        if (!a) return null;
        if (a.x !== b || a.y !== b || a.z !== b) {
          var d = new c.Location();
          return d.setX(a.x), d.setY(a.y), d.setZ(a.z), d;
        }
        return null;
      },
      charToNum: function(a) {
        return a && a.toUpperCase && a.length
          ? ((a = a.toUpperCase()), a.chartCodeAt(0) - 96)
          : void 0;
      }
    }),
    (c.defaultLocatonParser = new c.DefaultLocatonParser()),
    (c.LocationManager = function(a) {
      (this.sceneManager = a),
        (this.dataManager = a.dataManager),
        (this._positionFunctionMap = {}),
        (this._rotationFunctionMap = {});
    }),
    mono.extend(c.LocationManager, Object, {
      registerPositionFunction: function(a, b, c) {
        var d = b + "&" + a;
        this._positionFunctionMap[d] = c;
      },
      registerRotationFunction: function(a, b, c) {
        var d = b + "&" + a;
        this._rotationFunctionMap[d] = c;
      },
      computePosition: function(a, b, d, e) {
        var f = this.dataManager,
          g = f.getCategoryForData(a),
          h = f.getCategoryForData(b),
          i = g ? g.getId() : "",
          j = h ? h.getId() : "",
          k = this._positionFunctionMap,
          l = k[j + "&" + i];
        if (l) {
          var m = l(a, b, d, e);
          if (m !== !1) return;
        }
        if (!b) return void d.p(a.getPosition());
        var n = a.getLocation();
        if (!n) return void d.p(a.getPosition());
        if (e) {
          var o = f.getDataTypeForData(a),
            p = f.getDataTypeForData(b),
            q = this.dataManager.getCategoryForDataType(p),
            r = o.getSize(),
            s = p.getChildrenSize() || new c.Size(),
            t = d.getBoundingBox(),
            u = e.getBoundingBox(),
            v = o.getPositionExp() || {},
            w = n.getX(),
            x = n.getY(),
            y = n.getZ(),
            z = {
              x: w,
              y: x,
              z: y,
              dataType: o,
              parentDataType: p,
              parentCategory: q,
              data: a,
              parentData: b,
              bb: t,
              pbb: u
            };
          if (v.x) {
            var A = new Function("x", "y", "z", "data", "return " + v.x);
            w = A.call(this, w, x, y, z) || w;
          }
          if (v.z) {
            var A = new Function("x", "y", "z", "data", "return " + v.z);
            y = A.call(this, w, x, y, z) || y;
          }
          if (v.y) {
            var A = new Function("x", "y", "z", "data", "return " + v.y);
            x = A.call(this, w, x, y, z) || x;
          }
          var B =
              this._computeOneAxisPosition(
                "x",
                w,
                r.getXSize(),
                s.getXSize(),
                s.getXPadding(),
                t,
                u
              ) || a.getPosition().x,
            C =
              this._computeOneAxisPosition(
                "z",
                y,
                r.getZSize(),
                s.getZSize(),
                s.getZPadding(),
                t,
                u
              ) || a.getPosition().z,
            D = n.getY(),
            E = null;
          this._isAlignment(D) &&
            ((E = this._findFloor(e)), (u = E.getBoundingBox()));
          var F =
              this._computeOneAxisPosition(
                "y",
                x,
                r.getYSize(),
                s.getYSize(),
                s.getYPadding(),
                t,
                u
              ) || a.getPosition().y,
            G = new mono.Vec3(B, F, C);
          d.p(G);
        }
      },
      _findFloor: function(a) {
        return a;
      },
      _computeOneAxisPosition: function(a, b, c, d, e, f, g) {
        if (d && !this._isAlignment(b)) {
          e = e || [0, 0];
          var h = g.max[a] - g.min[a] - e[0] - e[1],
            i = h / d;
          return g.min[a] - f.min[a] + i * (b - 1) + e[0];
        }
        return this._isAlignment(b)
          ? this._getAlignPosition(f, g, b, e, a)
          : void 0;
      },
      _isAlignment: function(a) {
        return !!c.Location.getAlignName(a);
      },
      _getAlignPosition: function(a, b, c, d, f) {
        return c === e.pos_neg
          ? b.min[f] - a.max[f] + d[0]
          : c === e.center_neg
            ? b.min[f]
            : c === e.neg_neg
              ? b.min[f] - a.min[f] + d[0]
              : c === e.center
                ? b.center()[f]
                : c === e.pos_pos
                  ? b.max[f] - a.max[f] - d[1]
                  : c === e.center_pos
                    ? b.max[f]
                    : c === e.neg_pos
                      ? b.max[f] - a.min[f] - d[1]
                      : void 0;
      },
      computeRotation: function(a, b, c, d) {
        var e = this.dataManager,
          f = a.getLocation(),
          g = e.getDataTypeForData(a),
          h = g.getRotationExp();
        if (!f || !h) {
          var i = a.getRotation();
          return void c.setRotation(i);
        }
        var j = f.getX(),
          k = f.getY(),
          l = f.getZ(),
          m = {
            x: j,
            y: k,
            z: l,
            data: a,
            dataType: g,
            parentData: b,
            location: f
          },
          n = a.getPosition(),
          o = (n.x, n.y, n.z, 0),
          p = 0,
          q = 0;
        if (h.x) {
          var r = new Function("x", "y", "z", "data", "return " + h.x);
          o = r.call(this, j, k, l, m) || 0;
        }
        if (h.y) {
          var r = new Function("x", "y", "z", "data", "return " + h.y);
          p = r.call(this, j, k, l, m) || 0;
        }
        if (h.z) {
          var r = new Function("x", "y", "z", "data", "return " + h.z);
          q = r.call(this, j, k, l, m) || 0;
        }
        c.setRotation(o, p, q);
      }
    }),
    (c.Space1 = function(a, b) {
      (this._spaceArray = a || []),
        (this._axis = b),
        this.init(),
        this.compute();
    }),
    mono.extend(c.Space1, Object, {
      setSpaceArray: function(a) {
        (this._spaceArray = a), this.init(), this.compute();
      },
      getSpaceArray: function() {
        return this._spaceArray;
      },
      getTotal: function() {
        return this._total;
      },
      getPercent: function() {
        return this._percent;
      },
      getOccupation: function() {
        return this._occupation;
      },
      getOccupationList: function() {
        return this._occupationList;
      },
      getEmptyList: function() {
        return this._emptyList;
      },
      getAxis: function() {
        return this._axis;
      },
      isAvailableAt: function(a, b) {
        if (1 > a && a > this._total) return !1;
        b = b || 1;
        var c = a,
          d = a + b - 1;
        if (d > this._total) return !1;
        for (var e, f = 0, g = this._occupationList.length; g > f; f++)
          if (
            ((e = this._occupationList[f]),
            (c >= e.start && c <= e.end) || (d >= e.start && d <= e.end))
          )
            return !1;
        return !0;
      },
      isValid: function() {
        return this._total > 0;
      },
      _addStatistic: function(a, b, c) {
        (1 === a || 0 === a) &&
          ((b.end = c),
          b.occupation ? this._occupationList.push(b) : this._emptyList.push(b),
          (b.total = b.end - b.start + 1),
          delete b.occupation);
      },
      getCountForSize: function(a) {
        for (var b = 0, c = 0; c < this._emptyList.length; c++) {
          var d = this._emptyList[c];
          b += parseInt(d.total / a);
        }
        return b;
      },
      init: function() {
        (this._total = 0),
          (this._percent = 0),
          (this._occupation = 0),
          (this._occupationList = []),
          (this._emptyList = []);
      },
      compute: function() {
        var a,
          b = this._spaceArray,
          c = b.length,
          d = null;
        this._total = c;
        for (var e = 0; c > e; e++) {
          var f = b[e];
          1 == f && this._occupation++,
            (0 == e || d != f) &&
              (this._addStatistic(d, a, e),
              (a = { start: e + 1, occupation: f })),
            (d = f),
            e == c - 1 && this._addStatistic(d, a, e + 1);
        }
        this._total > 0 && (this._percent = this._occupation / this._total);
      }
    }),
    (c.Space2 = function(a, b, c) {
      (this._spaceArray = a || [[]]),
        (this._axis = b),
        (this._mainAxis = c),
        this.init(),
        this.compute();
    }),
    mono.extend(c.Space2, Object, {
      setSpaceArray: function(a) {
        (this._spaceArray = a), this.init(), this.compute();
      },
      getSpaceArray: function() {
        return this._spaceArray;
      },
      getAxis: function() {
        return this._axis;
      },
      getMainAxis: function() {
        return this._mainAxis;
      },
      init: function() {
        (this._total = 0), (this._percent = 0), (this._occupation = 0);
      },
      compute: function() {
        for (var a, b = 0, c = this._spaceArray.length; c > b; b++)
          (a = this._spaceArray[b]),
            (this._total += a.getTotal()),
            (this._occupation += a.getOccupation());
        this._total > 0 && (this._percent = this._occupation / this._total);
      },
      getCountForSize: function(a) {
        for (var b, c = 0, d = this._spaceArray.length, e = 0; d > c; c++)
          (b = this._spaceArray[c]), (e += b.getCountForSize(a));
        return e;
      }
    }),
    (c.SpaceManager = function(a, b) {
      (this.dataManager = a),
        (this.sceneManager = b),
        (this.nodeMap = {}),
        (this.spaceNodeColorFunction = null),
        (this.spaceNodeFrameColorFunction = null),
        (this.spaceVisibleFilter = new c.SpaceVisibleFilter(b, this)),
        (this.spaceMaterialFilter = new c.SpaceMaterialFilter(b, this));
    }),
    mono.extend(c.SpaceManager, Object, {
      _initArray: function(a, b) {
        b = b || 0;
        for (var c = [], d = 0; a > d; d++) c.push(b);
        return c;
      },
      _initArray2: function(a, b, c) {
        c = c || 0;
        for (var d = [], e = 0; a > e; e++) {
          for (var f = [], g = 0; b > g; g++) f.push(0);
          d.push(f);
        }
        return d;
      },
      initSpaceArray: function(a, b, c) {},
      computeSpace: function(a, b) {
        var d,
          e = this.dataManager,
          f = e.getDataTypeForData(a),
          g = f.getChildrenSize(),
          h = a.getChildren(),
          i = g.getXSize(),
          j = g.getYSize(),
          k = g.getZSize(),
          l = 0,
          m = [],
          n = "",
          o = "";
        if (
          (i &&
            (l++,
            m.push({ axis: "x", size: i }),
            (n += "x"),
            n !== b && (o = "x")),
          j &&
            (l++,
            m.push({ axis: "y", size: j }),
            (n += "y"),
            n !== b && (o = n)),
          k &&
            (l++,
            (n += "z"),
            m.push({ axis: "z", size: k }),
            n !== b && (o = "z")),
          l > 2)
        )
          return void console.error("Only support 1 or 2 dimension");
        if (2 == l && !b)
          return void console.error("Main Axis is needed for 2 dimension");
        var p = null;
        if (1 == l) {
          p = this._initArray(m[0].size);
          for (var q = 0; q < h.size(); q++) {
            var d = h.get(q),
              r = e.getDataTypeForData(d),
              s = r.getSize(),
              t = d.getLocation();
            this.computeOneDimesion(
              p,
              s["get" + n.toUpperCase() + "Size"](),
              t["get" + n.toUpperCase()]()
            );
          }
          var u = new c.Space1(p, n);
          return u;
        }
        if (2 == l) {
          for (
            var v = g["get" + o.toUpperCase() + "Size"](),
              w = g["get" + b.toUpperCase() + "Size"](),
              x = [],
              y = 0;
            v > y;
            y++
          ) {
            for (var p = this._initArray(w), q = 0; q < h.size(); q++) {
              var d = h.get(q),
                r = e.getDataTypeForData(d),
                s = r.getSize(),
                t = d.getLocation();
              t["get" + o.toUpperCase()]() == y + 1 &&
                this.computeOneDimesion(
                  p,
                  s["get" + b.toUpperCase() + "Size"](),
                  t["get" + b.toUpperCase()]()
                );
            }
            var z = new c.Space1(p, b);
            x.push(z);
          }
          var A = new c.Space2(x, n, b);
          return A;
        }
        return null;
      },
      computeOneDimesion: function(a, b, c) {
        if (a && b && c > 0) {
          for (var d = 0; b > d; d++) a[c - 1 + d] = 1;
          return a;
        }
      },
      getSpaceNodeColor: function(a) {
        if (this.spaceNodeColorFunction) {
          var b = this.spaceNodeColorFunction(a);
          return b;
        }
        var b = null;
        return (b = "orange");
      },
      getSpaceNodeFrameColor: function(a) {
        if (this.spaceNodeFrameColorFunction) {
          var b = this.spaceNodeFrameColorFunction(a);
          return b;
        }
        return this.getSpaceNodeColor(a);
      },
      showSpaceMode: function() {
        this.sceneManager.viewManager3d.addVisibleFilter(
          this.spaceVisibleFilter
        ),
          this.sceneManager.viewManager3d.addMaterialFilter(
            this.spaceMaterialFilter
          );
      },
      hideSpaceMode: function() {
        this.sceneManager.viewManager3d.removeVisibleFilter(
          this.spaceVisibleFilter
        ),
          this.sceneManager.viewManager3d.removeMaterialFilter(
            this.spaceMaterialFilter
          );
      },
      getModelParent: function(a) {
        if (null == a) return null;
        var b = a.getClient("modelParent");
        return null == b ? this.getModelParent(a.getParent()) : b;
      },
      remove1DSpaceNodeForNodes: function(a) {
        a instanceof mono.List && (a = a.toArray());
        for (
          var b, c, d = this.sceneManager.network3d.getDataBox(), e = 0, f = 0;
          e < a.length;
          e++
        ) {
          b = a[e];
          var g = b.getChildren().toArray();
          for (f = 0; f < g.length; f++)
            (c = g[f]),
              (this.isSpaceNode(c) || this.isSpaceChildrenNode(c)) &&
                (d.removeByDescendant(c), c.setParent(null));
        }
      },
      create1DSpaceNodeForNodes: function(a) {
        a instanceof mono.List && (a = a.toArray());
        for (
          var b,
            c,
            d,
            e,
            f,
            g = this.sceneManager.network3d.getDataBox(),
            h = 0,
            i = 0;
          h < a.length;
          h++
        ) {
          b = a[h];
          var j = b.getChildren().toArray();
          for (i = 0; i < j.length; i++) {
            var k = j[i];
            (this.isSpaceNode(k) || this.isSpaceChildrenNode(k)) &&
              (g.removeByDescendant(k), k.setParent(null));
          }
          if ((c = this.sceneManager.getNodeData(b))) {
            if (((d = this.create1DSpaceNode(c)), !d)) continue;
            for (
              d.setClient("modelParent", b),
                d.setParent(b),
                g.addByDescendant(d),
                e = this.create1DChildrenSpaceNodes(c),
                i = 0;
              i < e.length;
              i++
            )
              (f = e[i]), f.setParent(b), g.addByDescendant(f);
          }
        }
      },
      isSpaceNode: function(a) {
        return a.getClient("spaceNode");
      },
      hasSpaceNode: function(a) {
        if (!a) return !1;
        var b = a.getChildren();
        if (b && b.size() > 0)
          for (var c = 0; c < b._as.length; c++) {
            var d = b._as[c];
            if (this.isSpaceNode(d)) return !0;
          }
        return !1;
      },
      hasSpaceChildrenNode: function(a) {
        if (!a) return !1;
        var b = a.getChildren();
        if (b && b.size() > 0)
          for (var c = 0; c < b._as.length; c++) {
            var d = b._as[c];
            if (this.isSpaceChildrenNode(d)) return !0;
          }
        return !1;
      },
      isSpaceChildrenNode: function(a) {
        return a.getClient("spaceChildrenNode");
      },
      create1DSpaceNode: function(a, b) {
        var d = this.computeSpace(a);
        if (d instanceof c.Space1) {
          var e = this.dataManager,
            f = this.sceneManager,
            g = e.getDataTypeForData(a),
            h = (g.getChildrenSize(), f.getNodeForDataOrId(a));
          if (h) {
            var i = d.getPercent();
            0 == i && (i = 0.01);
            var j = this.getSpaceNodeColor(i),
              k = this.getSpaceNodeFrameColor(i) || j,
              l = h.getBoundingBox(),
              m = l.max.x - l.min.x,
              n = l.max.y - l.min.y,
              o = l.max.z - l.min.z,
              p = 1,
              q = new mono.Cube(m + p, n + p, o + p);
            q.setClient("spaceNode", !0),
              q.s({
                "m.wireframe": !0,
                "m.wireframeLinewidth": 2,
                "m.color": k
              });
            var r = d.getAxis();
            "x" === r && (m *= i), "y" === r && (n *= i), "z" === r && (o *= i);
            var s = new mono.Cube(m, n, o);
            s.setClient("spaceNode", !0), s.setParent(q);
            var t = s.getBoundingBox();
            "x" === r
              ? s.setX(l.min.x - t.min.x)
              : "y" === r
                ? s.setY(l.min.y - t.min.y)
                : s.setY(l.min.z - t.min.z);
            var u = new mono.Color(j);
            return u.lerp(u, 0.5), s.s({ "m.color": u }), q;
          }
        }
      },
      removeSpaceNode: function(a) {
        var b = this.sceneManager;
        b.removeNodeChildren(a, function(a) {
          return a.getClient("spaceNode");
        });
      },
      removeSpaceChildrenNode: function(a) {
        var b = this.sceneManager;
        b.removeNodeChildren(a, function(a) {
          return a.getClient("spaceChildrenNode");
        });
      },
      create1DChildrenSpaceNodes: function(a, b) {
        var d = this.computeSpace(a);
        if (d instanceof c.Space1) {
          var e = this.dataManager,
            f = this.sceneManager,
            g = e.getDataTypeForData(a),
            h = g.getChildrenSize(),
            i = f.getNodeForDataOrId(a);
          if (i) {
            var j = d.getAxis();
            if (j) {
              for (
                var k,
                  l = i.getBoundingBox(),
                  m = l.size(),
                  n = m.x,
                  o = m.y,
                  p = m.z,
                  q = d.getEmptyList(),
                  r = [],
                  s = 0,
                  t = d.getPercent();
                s < q.length;
                s++
              )
                (k = q[s]),
                  r.push(this.createEmptyNode(k, n, o, p, j, h, l, t));
              return r;
            }
          }
        }
      },
      createEmptyNode: function(a, b, c, d, e, f, g, h) {
        var i = a.total,
          j = a.start,
          k = (a.end, f.getXPadding() || [0, 0]),
          l = f.getYPadding() || [0, 0],
          m = f.getZPadding() || [0, 0];
        (b -= k[0] + k[1]), (c -= l[0] + l[1]), (d -= m[0] + m[1]);
        var n = 1;
        "x" === e
          ? (b = (i * b) / f.getXSize())
          : "y" === e
            ? (c = (i * c) / f.getYSize())
            : "z" === e && (d = (i * d) / f.getZSize());
        var o = new mono.Cube(b - n, c - n, d - n),
          p = o.getBoundingBox(),
          q = 0,
          r = 0,
          s = 0;
        "x" === e
          ? (q = g.min.x - p.min.x + k[0] + (b / i) * (j - 1) + n / 2)
          : "y" === e
            ? (r = g.min.y - p.min.y + l[0] + (c / i) * (j - 1) + n / 2)
            : "z" === e &&
              (s = g.min.z - p.min.z + m[0] + (d / i) * (j - 1) + n / 2),
          o.p(q, r, s);
        var t = this.getSpaceNodeColor(h);
        return (
          o.setClient("spaceChildrenNode", !0),
          o.s({ "m.color": t, "m.transparent": !0, "m.opacity": 0.2 }),
          o
        );
      }
    }),
    (c.SpaceVisibleFilter = function(a, b) {
      (this.sceneManager = a), (this.spaceManager = b);
    }),
    mono.extend(c.SpaceVisibleFilter, c.VisibleFilter, {
      isVisible: function(a, b, c) {
        var d = this.sceneManager,
          e = this.spaceManager,
          f = d.dataManager,
          g = d.viewManager3d.getFocusNode(),
          h = a.getClient("modelParent") || a;
        if (
          (e.isSpaceNode(a) &&
            h == a &&
            (h = a.getParent().getClient("modelParent") || h),
          a instanceof mono.Billboard)
        )
          return !1;
        if (g === a) return !0;
        if (e.isSpaceNode(a)) return g == h ? !1 : !0;
        if (e.isSpaceChildrenNode(a)) return g == a.getParent() ? !0 : !1;
        if ((a === h || d.getMainNode(a) === h) && e.hasSpaceNode(h))
          return g == h ? !0 : !1;
        if (b) {
          var i = d.getParentNode(b),
            j = f.getParent(b);
          if (i && j) {
            var k = this.isVisible(i, j, c);
            if (!k) return !1;
          }
        }
        return !0;
      }
    }),
    (c.SpaceMaterialFilter = function(a, b) {
      (this.sceneManager = a), (this.spaceManager = b), (this.materialMap = {});
    }),
    mono.extend(c.SpaceMaterialFilter, c.MaterialFilter, {
      filterMaterial: function(a, b, c) {
        var d = this.sceneManager,
          e = d.viewManager3d,
          f = this.spaceManager,
          g = e.getFocusNode();
        if ((this.materialMap, d.getNodeData(c))) return b;
        if (f.isSpaceNode(c) && g) {
          if (c.isDescendantOf(g)) return b;
          var h = a.getUniqueCode(),
            i = this.materialMap[h];
          return (
            i ||
              ((i = a.clone()),
              (this.materialMap[h] = i),
              (i.transparent = !0),
              (i.opacity = 0.05)),
            i
          );
        }
      }
    }),
    (c.GCSManager = function(a) {
      var a = a || {};
      (this.sceneManager = a.sceneManager),
        (this.box3D = this.sceneManager.network3d.getDataBox()),
        (this.defaultMaterialFilter = this.sceneManager.viewManager3d.getDefaultVirtualMaterialFilter()),
        (this.defaultEventHandler = this.sceneManager.viewManager3d.getDefaultEventHandler()),
        (this._flagLink = null),
        this.init();
    }),
    mono.extend(c.GCSManager, c.EventHandler, {
      init: function() {
        this.sceneManager.viewManager3d.addEventHandler(this);
      },
      clearAllLink: function() {
        for (var a in this.sceneManager.linkMap) this.clearLinkById(a);
      },
      clearLinkById: function(a) {
        var b = a;
        a instanceof c.Link && (b = a.getId());
        var d = this.sceneManager.dataManager.getLinkById(b);
        if (d) {
          var e = this.sceneManager.linkMap[b];
          e.setVisible(!1);
          var f = (d.getFromId(),
          d.getToId(),
          this.sceneManager.getCurrentRootNode());
          this.sceneManager.getNodeData(f);
        }
      },
      removeUnRootNodeChildrenFromBoxById: function(a, b, d) {
        var e = d || this;
        if (!a || !b) return !1;
        var f = a;
        if (a instanceof c.Data && ((f = a.getId()), !f)) return !1;
        if (b.getParentId() && b.getParentId() === f) return !1;
        if (!e.sceneManager.isAncestor(f, b.getId())) {
          var g = e.sceneManager.dataNodeMap[f];
          e.box3D.removeByDescendant(g, function(a) {
            console.log(a._clientMap);
          });
          var h = e.sceneManager.dataManager.getDataById(f);
          h &&
            h.getParentId() &&
            e.removeUnRootNodeChildrenFromBoxById(h.getParentId(), b, e);
        }
        return !0;
      },
      clearLinksByData: function(a) {
        var b = null;
        if (
          (b =
            a instanceof c.Data
              ? a
              : this.sceneManager.dataManager.getDataById(a))
        ) {
          var d = b.getAllLinks();
          if (d) for (var e in d) this.clearLinkById(e);
        }
      },
      showLinksByData: function(a, b) {
        var d = null;
        if (
          (this.clearAllLink(),
          (d =
            a instanceof c.Data
              ? a
              : this.sceneManager.dataManager.getDataById(a)))
        ) {
          var e = d.getAllLinks(),
            f = [];
          if (e)
            for (var g in e) {
              this.showLinkByLinkId(g, b, !1);
              var h = (this.sceneManager.linkMap[g], e[g]);
              if (h) {
                var i = this.sceneManager.getNodeByDataOrId(h.getFromId()),
                  j = this.sceneManager.getNodeByDataOrId(h.getToId());
                f.push(i), f.push(j);
              }
            }
          this.defaultEventHandler.lookAtElements(f);
        }
      },
      showAllLinks: function(a) {
        var b = this.sceneManager.dataManager.getLinkMap();
        if (b) for (var c in b) this.showLinkByLinkId(c, a, !1);
      },
      showLinkByLinkId: function(a, d, e) {
        var f = a,
          g = !0;
        if (
          (e != b && null != e && (g = e),
          g && this.clearAllLink(),
          a instanceof c.Link && (f = a.getId()),
          f)
        ) {
          var h = this.sceneManager.linkMap[f];
          h || (this.reloadLink(f) && (h = this.sceneManager.linkMap[f])),
            h &&
              (h.setVisible(!0),
              this.box3D.getDataById(h.getId()) || this.box3D.add(h),
              d && this.resetPathByLink(f));
          var i = this.sceneManager.dataManager.getLinkById(f),
            j = i.getFromId(),
            k = i.getToId(),
            l = this.sceneManager.dataNodeMap[j],
            m = this.sceneManager.dataNodeMap[k];
          l &&
            m &&
            (this.defaultMaterialFilter.removeByDescendant(l),
            this.defaultMaterialFilter.removeByDescendant(m),
            this.box3D.getDataById(l.getId()) || this.box3D.addByDescendant(l),
            this.box3D.getDataById(m.getId()) || this.box3D.addByDescendant(m));
        }
      },
      reloadLink: function(a) {
        if (!a) return !1;
        var b = null;
        if (
          ((b =
            a instanceof c.Link
              ? a
              : this.sceneManager.dataManager.getLinkById(a)),
          !b)
        )
          return !1;
        var d = this.sceneManager.linkMap[b.getId()];
        if (d) return !1;
        var e = b.getFromId(),
          f = b.getToId(),
          g = this.sceneManager.dataNodeMap[e];
        if (!g) {
          if (!this.sceneManager.dataManager.getDataById(e)) return !1;
          main.sceneManager.loadLazyData(e);
        }
        var h = this.sceneManager.dataNodeMap[f];
        if (!h) {
          if (!this.sceneManager.dataManager.getDataById(f)) return !1;
          main.sceneManager.loadLazyData(f);
        }
        return this.sceneManager.loadLink(b), !0;
      },
      resetPathByLink: function(a) {
        if (a) {
          var b = a;
          a instanceof c.Link && (b = a.getId());
          var d = this.sceneManager.linkMap[b];
          if (d) {
            var e = this.generateContrals(d, 500);
            e && d.setControls(e);
          }
        }
      },
      resetPathByData: function(a) {},
      generateContrals: function(a, b) {
        if (!a) return null;
        var c = a.getFromNode(),
          d = a.getToNode();
        if (!c || !d) return null;
        var e = c.getBoundingBox(),
          f = d.getBoundingBox(),
          g = 20,
          h = Math.max(e.max.y, f.max.y) + 20,
          i = c.frontWorldPosition(e.max.z + g),
          j = d.frontWorldPosition(f.max.z + g),
          k = c.getWorldPosition(),
          l = d.getWorldPosition(),
          m = [];
        m.push(i);
        var n = i.clone().add(new mono.Vec3(0, h, 0));
        m.push(n),
          (n = n.clone().setZ(k.z)),
          m.push(n),
          m.push(new mono.Vec3(k.x, b, k.z)),
          m.push(new mono.Vec3(k.x, b, l.z)),
          m.push(new mono.Vec3(l.x, b, l.z));
        var o = j.clone().add(new mono.Vec3(0, h, 0));
        return m.push(o.clone().setZ(l.z)), m.push(o), m.push(j), m;
      },
      handleMouseMoveElement: function(a, b, c, d, e) {
        var f = this.sceneManager.getLinkData(a);
        if (f) {
          if (!a.org_radius && a.setRadius) {
            var g = a.getRadius() || 1;
            (a.org_radius = a.getRadius()), a.setRadius(g + 3);
          }
          this._flagLink = a;
        }
      },
      handleMouseMoveBackground: function(a, b) {
        this._flagLink &&
          this._flagLink.org_radius &&
          (this._flagLink.setRadius(this._flagLink.org_radius),
          delete this._flagLink.org_radius,
          (this._flagLink = null));
      },
      generateLinkPoints: function(a, b, c) {
        if (!a || !b) return null;
        var d = a.getWorldPosition(),
          e = b.getWorldPosition();
        d ||
          (d = {
            x: a.getPositionX(),
            y: a.getPositionY(),
            z: a.getPositionZ()
          }),
          e ||
            (e = {
              x: b.getPositionX(),
              y: b.getPositionY(),
              z: b.getPositionZ()
            });
        var f = [],
          g = d.x,
          h = d.y,
          i = d.z,
          j = e.x,
          k = e.y,
          l = e.z;
        c || (c = 600);
        var m = a.frontWorldPosition(60),
          n = b.frontWorldPosition(65),
          o = 150;
        return (
          f.push(new mono.Vec3(m.x, m.y, m.z)),
          f.push(new mono.Vec3(m.x, m.y + o, m.z)),
          f.push(new mono.Vec3(g, h + o, i)),
          f.push(new mono.Vec3(g, c, i)),
          f.push(new mono.Vec3(g, c, l)),
          f.push(new mono.Vec3(j, c, l)),
          f.push(new mono.Vec3(j, k + o, l)),
          f.push(new mono.Vec3(n.x, n.y + o, n.z)),
          f.push(new mono.Vec3(n.x, n.y, n.z)),
          f
        );
      },
      createLinkByNode: function(a, b, c, d, e) {
        var f = new mono.PathLink(a, b);
        c && f.setStyle("m.texture.image", c),
          d || (d = "#FF0000"),
          f.setStyle("m.color", d);
        var g = "./images/wall03_3d_1.png",
          h = "./images/wallpaper_02.png";
        return (
          f.s({
            "m.texture.image": g,
            "inside.m.texture.image": h,
            "top.m.texture.image": g,
            "m.specularStrength": 10,
            "m.ambient": "#C6FEFA"
          }),
          f.setControls(this.generateLinkPoints(a, b, e)),
          f.setLinkType("control"),
          this.box3D.add(f),
          f
        );
      },
      getLinkToParent: function(a) {
        if (!a) return null;
        if (!a.getParentId()) return null;
        var b = this.sceneManager.getNodeForDataOrId(a.getParentId());
        return b;
      },
      createLinkByData: function(a) {
        if (!a) return null;
        var b = a.fromData,
          c = a.toData;
        if (!b || !c) return null;
        var d = this.sceneManager.getNodeForDataOrId(b);
        if ((d || (d = this.getLinkToParent(b)), !d)) return null;
        var e = this.sceneManager.getNodeForDataOrId(c);
        if ((e || (e = this.getLinkToParent(c)), !e)) return null;
        var f = this.createLinkByNode(d, e, a.image, a.color, a.height);
        f && (f.linkobj = a);
      },
      loadLinks: function(a) {
        var b = data.links;
        if (b && b.length > 0) {
          var c = this;
          b.forEach(function(b) {
            c.createLinkBylinkObj(a, b);
          });
        }
        a.forEach(function(a) {
          if (
            (((a && a.getStyle("wallInnerPic")) ||
              a.getStyle("inside.m.texture.image")) &&
              console.log(a),
            a && a instanceof mono.PathCube)
          ) {
            var b = "./images/wall03_3d_1.png",
              c = "./images/wallpaper_02.png";
            a.s({
              "m.texture.image": b,
              "inside.m.texture.image": c,
              "top.m.texture.image": b,
              "m.specularStrength": 10,
              "m.type": "phong",
              "m.ambient": "#C6FEFA"
            });
          }
        });
      }
    }),
    (c.TooltipRule = function(a) {
      (a = a || {}),
        (this._id = a.id || this.randomId()),
        (this._categoryId = a.categoryId || ""),
        (this._dataTypeId = a.dataTypeId || ""),
        (this._sceneId = a.sceneId || ""),
        (this._propertiesDesc = a.propertiesDesc || ""),
        (this._extInfo = a.extInfo || {});
    }),
    mono.extend(c.TooltipRule, c.Base, {
      ___accessor: [
        "categoryId",
        "dataTypeId",
        "sceneId",
        "propertiesDesc",
        "extInfo"
      ],
      getId: function() {
        return this._id;
      },
      randomId: function() {
        return mono.id("tooltipRule");
      }
    }),
    (c.TooltipManager = function(a) {
      (this.sceneManager = a),
        (this.dataManager = a.dataManager),
        (this._tooltipRules = []),
        (this._tooltipRuleMap = {}),
        (this._lastData = null),
        (this._tooltipDivCreator = new c.TooltipDivCreator()),
        (this.tooltipContentFunction = null);
    }),
    mono.extend(c.TooltipManager, c.EventHandler, {
      _createTooltipDiv: function() {
        var a = this._tooltipDivCreator.createTooltipDiv();
        return (a.style.position = "absolute"), (a.style.display = "none"), a;
      },
      setTooltipDivCreator: function(a) {
        null != a &&
          this._tooltipDivCreator !== a &&
          ((this._tooltipDivCreator = a), this.destoryTooltipDiv());
      },
      getTooltipDivCreator: function() {
        return this._tooltipDivCreator;
      },
      destoryTooltipDiv: function() {
        this._tooltipDiv = null;
      },
      getTooltipDiv: function() {
        if (null == this._tooltipDiv) {
          this._tooltipDiv = this._createTooltipDiv();
          var a = this.sceneManager.network3d;
          this._tooltipDivCreator.addToNetwork(a, this._tooltipDiv);
        }
        return this._tooltipDiv;
      },
      hideToolTipDiv: function() {
        var a = this.getTooltipDiv();
        a.style.display = "none";
      },
      showTooltipDiv: function(a, b) {
        var c = this.getTooltipDiv();
        (c.style.display = ""),
          this._tooltipDivCreator.setTooltipData(a, c),
          this.computeTooltipDivPosition(b);
      },
      onRenderCallback: function(a) {
        this.computeTooltipDivPosition();
      },
      computeTooltipDivPosition: function(a) {
        var b = this.getTooltipDiv();
        if (((a = a || this._lastData), b && a)) {
          var c = this.sceneManager,
            e = c.getNodeForDataOrId(a),
            f = e.getBoundingBox(),
            g = e.getWorldPosition(),
            h = g.x + f.center().x,
            i = g.y + f.max.y,
            j = g.z + f.center().z,
            k = this.sceneManager.network3d.getViewPosition(
              new mono.Vec3(h, i, j)
            ),
            l = k.x,
            m = k.y,
            n = d.getComputedStyle(b);
          (l -= parseInt(n.width) / 2),
            (m = m - parseInt(n.height) - 10),
            (b.style.left = l + "px"),
            (b.style.top = m + "px");
        }
      },
      getTooltipContent: function(a) {
        if (this.tooltipContentFunction) return this.tooltipContentFunction(a);
        if (
          a &&
          !(
            a instanceof mono.Billboard &&
            a.getStyle("m.opacity") &&
            a.getStyle("m.opacity") < 0.3
          )
        ) {
          var b = this.sceneManager,
            c = this.dataManager,
            d = b.getNodeData(a);
          if (d) {
            var e = c.getCategoryForData(d),
              f = c.getDataTypeForData(d);
            if (null != f) {
              for (
                var g, h, i, j, k = e ? e.getId() : "", l = f.getId(), m = 0;
                m < this._tooltipRules.length;
                m++
              )
                (j = this._tooltipRules[m]),
                  j.getDataTypeId() !== l || g || (g = j),
                  k && j.getCategoryId() === k && !h && (h = j),
                  j.getDataTypeId() || j.getCategoryId() || (i = j);
              return g
                ? this._getTooltipContent(a, d, g)
                : h
                  ? this._getTooltipContent(a, d, h)
                  : i
                    ? this._getTooltipContent(a, d, i)
                    : void 0;
            }
          }
        }
      },
      _getDataFieldValue: function(a, b, c) {
        return b.getValue(c);
      },
      _getTooltipContent: function(a, b, c) {
        var e = {},
          f = c.getPropertiesDesc(),
          g = f.split("@@");
        if (g.length)
          for (var h = 0; h < g.length; h++) {
            var i = g[h],
              j = i.split(":");
            if (2 === j.length) {
              var k = j[0],
                l = j[1],
                m = this._getDataFieldValue(a, b, l);
              e[k] = m || "";
            }
          }
        var n = c.getExtInfo();
        if ((n = d.translateJson(n))) for (var o in n) e[o] = n[o];
        return e;
      },
      addTooltipRule: function(a) {
        var b = a.getId();
        this._tooltipRuleMap[b] ||
          (this._tooltipRules.push(a), (this._tooltipRuleMap[b] = a));
      },
      removeTooltipRule: function(a) {
        var b = a.getId();
        if (this_tooltipRuleMap[b]) {
          var c = this._tooltipRules.indexOf(a);
          c && this._tooltipRules.splice(c, 1), delete this._tooltipRuleMap[b];
        }
      },
      handleMouseMoveElement: function(a, b, c, d, e) {
        var f = this.getTooltipContent(a);
        if (null == f)
          return (this._lastData = null), void this.hideToolTipDiv();
        var g = this;
        this._lastData != c &&
          (clearTimeout(this._tooltipTimer),
          (this._tooltipTimer = setTimeout(function() {
            (g._lastData = c), g.showTooltipDiv(f, c);
          }, 200)));
      },
      handleMouseMoveBackground: function(a, b) {
        this.hideToolTipDiv(), (this._lastData = null);
      }
    }),
    (c.TooltipDivCreator = function(a) {}),
    mono.extend(c.TooltipDivCreator, Object, {
      createTooltipDiv: function() {
        var a = document.createElement("DIV");
        return (a.className = "tooltip-panel"), a;
      },
      addToNetwork: function(a, b) {
        a.getRootView().appendChild(b);
      },
      setTooltipData: function(a, b) {
        this._removeAllChildren(b);
        var c = document.createElement("table"),
          d = document.createElement("tbody");
        b.appendChild(c), c.appendChild(d);
        for (var e in a) {
          var f = this._createRow(e, a[e]);
          d.appendChild(f);
        }
      },
      _createRow: function(a, b) {
        var c = document.createElement("tr"),
          d = document.createElement("td");
        (d.className = "tooltip-key"), (d.innerHTML = a + ":");
        var e = document.createElement("td");
        return (
          (e.className = "tooltip-value"),
          (e.innerHTML = b),
          c.appendChild(d),
          c.appendChild(e),
          c
        );
      },
      _removeAllChildren: function(a) {
        for (; a.hasChildNodes(); ) a.removeChild(a.lastChild);
      }
    }),
    (function(a) {
      var b,
        c,
        d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l =
          [].indexOf ||
          function(a) {
            for (var b = 0, c = this.length; c > b; b++)
              if (b in this && this[b] === a) return b;
            return -1;
          };
      (i = function() {
        var b, c, d, e;
        return null != a.WebGLRenderingContext
          ? ((e = ["WEBKIT", "MOZ", "MS", "O"]),
            (d = /^WEBKIT_(.*)|MOZ_(.*)|MS_(.*)|O_(.*)/),
            (b = WebGLRenderingContext.prototype.getExtension),
            (WebGLRenderingContext.prototype.getExtension = function(a) {
              var c, f, g, h, i;
              if (
                ((f = a.match(d)),
                null !== f && (a = f[1]),
                (c = b.call(this, a)),
                null === c)
              ) {
                for (h = 0, i = e.length; i > h; h++)
                  if (((g = e[h]), (c = b.call(this, g + "_" + a)), null !== c))
                    return c;
                return null;
              }
              return c;
            }),
            (c = WebGLRenderingContext.prototype.getSupportedExtensions),
            (WebGLRenderingContext.prototype.getSupportedExtensions = function() {
              var a, b, e, f, g, h;
              for (f = c.call(this), e = [], g = 0, h = f.length; h > g; g++)
                (a = f[g]),
                  (b = a.match(d)),
                  null !== b && (a = b[1]),
                  l.call(e, a) < 0 && e.push(a);
              return e;
            }))
          : void 0;
      }),
        (j = function() {
          var b, c, d, e, f, g, h, i, j, k, m, n, o, p;
          if (
            ((f = function() {
              var a, b, c;
              return (
                (a = document.createElement("canvas")),
                (a.width = 2),
                (a.height = 2),
                (b = a.getContext("2d")),
                (c = b.getImageData(0, 0, 2, 2)),
                c.data.set(
                  new Uint8ClampedArray([
                    0,
                    0,
                    0,
                    0,
                    255,
                    255,
                    255,
                    255,
                    0,
                    0,
                    0,
                    0,
                    255,
                    255,
                    255,
                    255
                  ])
                ),
                b.putImageData(c, 0, 0),
                a
              );
            }),
            f(),
            (c = function(a, b) {
              var c, d, e, g, h, i, j, k, l, m, n, o, p, q;
              if (
                ((i = a.createProgram()),
                (p = a.createShader(a.VERTEX_SHADER)),
                a.attachShader(i, p),
                a.shaderSource(
                  p,
                  "attribute vec2 position;\nvoid main(){\n    gl_Position = vec4(position, 0.0, 1.0);\n}"
                ),
                a.compileShader(p),
                !a.getShaderParameter(p, a.COMPILE_STATUS))
              )
                throw a.getShaderInfoLog(p);
              if (
                ((e = a.createShader(a.FRAGMENT_SHADER)),
                a.attachShader(i, e),
                a.shaderSource(
                  e,
                  "uniform sampler2D source;\nvoid main(){\n    gl_FragColor = texture2D(source, vec2(1.0, 1.0));\n}"
                ),
                a.compileShader(e),
                !a.getShaderParameter(e, a.COMPILE_STATUS))
              )
                throw a.getShaderInfoLog(e);
              if ((a.linkProgram(i), !a.getProgramParameter(i, a.LINK_STATUS)))
                throw a.getProgramInfoLog(i);
              return (
                a.useProgram(i),
                (d = function() {
                  return (
                    a.deleteShader(e),
                    a.deleteShader(p),
                    a.deleteProgram(i),
                    a.deleteBuffer(c),
                    a.deleteTexture(l),
                    a.deleteTexture(o),
                    a.deleteFramebuffer(g),
                    a.bindBuffer(a.ARRAY_BUFFER, null),
                    a.useProgram(null),
                    a.bindTexture(a.TEXTURE_2D, null),
                    a.bindFramebuffer(a.FRAMEBUFFER, null)
                  );
                }),
                (o = a.createTexture()),
                a.bindTexture(a.TEXTURE_2D, o),
                a.texImage2D(
                  a.TEXTURE_2D,
                  0,
                  a.RGBA,
                  2,
                  2,
                  0,
                  a.RGBA,
                  a.UNSIGNED_BYTE,
                  null
                ),
                a.texParameteri(a.TEXTURE_2D, a.TEXTURE_MAG_FILTER, a.LINEAR),
                a.texParameteri(a.TEXTURE_2D, a.TEXTURE_MIN_FILTER, a.LINEAR),
                (g = a.createFramebuffer()),
                a.bindFramebuffer(a.FRAMEBUFFER, g),
                a.framebufferTexture2D(
                  a.FRAMEBUFFER,
                  a.COLOR_ATTACHMENT0,
                  a.TEXTURE_2D,
                  o,
                  0
                ),
                (m = f()),
                (l = a.createTexture()),
                a.bindTexture(a.TEXTURE_2D, l),
                a.texImage2D(a.TEXTURE_2D, 0, a.RGBA, a.RGBA, b, m),
                a.texParameteri(a.TEXTURE_2D, a.TEXTURE_MAG_FILTER, a.LINEAR),
                a.texParameteri(a.TEXTURE_2D, a.TEXTURE_MIN_FILTER, a.LINEAR),
                (q = new Float32Array([
                  1,
                  1,
                  -1,
                  1,
                  -1,
                  -1,
                  1,
                  1,
                  -1,
                  -1,
                  1,
                  -1
                ])),
                (c = a.createBuffer()),
                a.bindBuffer(a.ARRAY_BUFFER, c),
                a.bufferData(a.ARRAY_BUFFER, q, a.STATIC_DRAW),
                (h = a.getAttribLocation(i, "position")),
                (n = a.getUniformLocation(i, "source")),
                a.enableVertexAttribArray(h),
                a.vertexAttribPointer(h, 2, a.FLOAT, !1, 0, 0),
                a.uniform1i(n, 0),
                a.drawArrays(a.TRIANGLES, 0, 6),
                (j = new Uint8Array(16)),
                a.readPixels(0, 0, 2, 2, a.RGBA, a.UNSIGNED_BYTE, j),
                (k = Math.abs(j[0] - 127) < 10),
                d(),
                k
              );
            }),
            (e = function(a, b) {
              var c;
              return (
                (c = a.createTexture()),
                a.bindTexture(a.TEXTURE_2D, c),
                a.texImage2D(a.TEXTURE_2D, 0, a.RGBA, 2, 2, 0, a.RGBA, b, null),
                0 === a.getError()
                  ? (a.deleteTexture(c), !0)
                  : (a.deleteTexture(c), !1)
              );
            }),
            (b = function(a, b) {
              var c, d, e;
              return (
                (e = a.createTexture()),
                a.bindTexture(a.TEXTURE_2D, e),
                a.texImage2D(a.TEXTURE_2D, 0, a.RGBA, 2, 2, 0, a.RGBA, b, null),
                (d = a.createFramebuffer()),
                a.bindFramebuffer(a.FRAMEBUFFER, d),
                a.framebufferTexture2D(
                  a.FRAMEBUFFER,
                  a.COLOR_ATTACHMENT0,
                  a.TEXTURE_2D,
                  e,
                  0
                ),
                (c = a.checkFramebufferStatus(a.FRAMEBUFFER)),
                a.deleteTexture(e),
                a.deleteFramebuffer(d),
                a.bindTexture(a.TEXTURE_2D, null),
                a.bindFramebuffer(a.FRAMEBUFFER, null),
                c === a.FRAMEBUFFER_COMPLETE ? !0 : !1
              );
            }),
            (j = []),
            (k = {}),
            (m = []),
            (d = function() {
              var a, d, f, g, h, i, l;
              (a = document.createElement("canvas")), (f = null);
              try {
                (f = a.getContext("experimental-webgl")),
                  null === f && (f = a.getContext("webgl"));
              } catch (n) {}
              return null != f &&
                ((i = f.getExtension("OES_texture_float")),
                null === i
                  ? e(f, f.FLOAT)
                    ? ((l = !0),
                      j.push("OES_texture_float"),
                      (k.OES_texture_float = { shim: !0 }))
                    : ((l = !1), m.push("OES_texture_float"))
                  : e(f, f.FLOAT)
                    ? ((l = !0), j.push("OES_texture_float"))
                    : ((l = !1), m.push("OES_texture_float")),
                l &&
                  ((d = f.getExtension("WEBGL_color_buffer_float")),
                  null === d
                    ? b(f, f.FLOAT)
                      ? (j.push("WEBGL_color_buffer_float"),
                        (k.WEBGL_color_buffer_float = {
                          shim: !0,
                          RGBA32F_EXT: 34836,
                          RGB32F_EXT: 34837,
                          FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 33297,
                          UNSIGNED_NORMALIZED_EXT: 35863
                        }))
                      : m.push("WEBGL_color_buffer_float")
                    : b(f, f.FLOAT)
                      ? j.push("WEBGL_color_buffer_float")
                      : m.push("WEBGL_color_buffer_float"),
                  (d = f.getExtension("OES_texture_float_linear")),
                  null === d
                    ? c(f, f.FLOAT)
                      ? (j.push("OES_texture_float_linear"),
                        (k.OES_texture_float_linear = { shim: !0 }))
                      : m.push("OES_texture_float_linear")
                    : c(f, f.FLOAT)
                      ? j.push("OES_texture_float_linear")
                      : m.push("OES_texture_float_linear")),
                (g = f.getExtension("OES_texture_half_float")),
                null === g
                  ? e(f, 36193)
                    ? ((h = !0),
                      j.push("OES_texture_half_float"),
                      (g = k.OES_texture_half_float = {
                        HALF_FLOAT_OES: 36193,
                        shim: !0
                      }))
                    : ((h = !1), m.push("OES_texture_half_float"))
                  : e(f, g.HALF_FLOAT_OES)
                    ? ((h = !0), j.push("OES_texture_half_float"))
                    : ((h = !1), m.push("OES_texture_half_float")),
                h)
                ? ((d = f.getExtension("EXT_color_buffer_half_float")),
                  null === d
                    ? b(f, g.HALF_FLOAT_OES)
                      ? (j.push("EXT_color_buffer_half_float"),
                        (k.EXT_color_buffer_half_float = {
                          shim: !0,
                          RGBA16F_EXT: 34842,
                          RGB16F_EXT: 34843,
                          FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 33297,
                          UNSIGNED_NORMALIZED_EXT: 35863
                        }))
                      : m.push("EXT_color_buffer_half_float")
                    : b(f, g.HALF_FLOAT_OES)
                      ? j.push("EXT_color_buffer_half_float")
                      : m.push("EXT_color_buffer_half_float"),
                  (d = f.getExtension("OES_texture_half_float_linear")),
                  null === d
                    ? c(f, g.HALF_FLOAT_OES)
                      ? (j.push("OES_texture_half_float_linear"),
                        (k.OES_texture_half_float_linear = { shim: !0 }))
                      : m.push("OES_texture_half_float_linear")
                    : c(f, g.HALF_FLOAT_OES)
                      ? j.push("OES_texture_half_float_linear")
                      : m.push("OES_texture_half_float_linear"))
                : void 0;
            }),
            null != a.WebGLRenderingContext)
          ) {
            for (d(), n = {}, o = 0, p = m.length; p > o; o++)
              (i = m[o]), (n[i] = !0);
            return (
              (g = WebGLRenderingContext.prototype.getExtension),
              (WebGLRenderingContext.prototype.getExtension = function(a) {
                var b;
                return (
                  (b = k[a]), void 0 === b ? (n[a] ? null : g.call(this, a)) : b
                );
              }),
              (h = WebGLRenderingContext.prototype.getSupportedExtensions),
              (WebGLRenderingContext.prototype.getSupportedExtensions = function() {
                var a, b, c, d, e, f, g;
                for (c = h.call(this), b = [], d = 0, f = c.length; f > d; d++)
                  (a = c[d]), void 0 === n[a] && b.push(a);
                for (e = 0, g = j.length; g > e; e++)
                  (a = j[e]), l.call(b, a) < 0 && b.push(a);
                return b;
              }),
              (WebGLRenderingContext.prototype.getFloatExtension = function(a) {
                var b,
                  c,
                  d,
                  e,
                  f,
                  g,
                  h,
                  j,
                  k,
                  l,
                  m,
                  n,
                  o,
                  p,
                  q,
                  r,
                  s,
                  t,
                  u,
                  v,
                  w,
                  x,
                  y,
                  z,
                  A,
                  B;
                for (
                  null == a.prefer && (a.prefer = ["half"]),
                    null == a.require && (a.require = []),
                    null == a["throws"] && (a["throws"] = !0),
                    p = this.getExtension("OES_texture_float"),
                    g = this.getExtension("OES_texture_half_float"),
                    n = this.getExtension("WEBGL_color_buffer_float"),
                    e = this.getExtension("EXT_color_buffer_half_float"),
                    o = this.getExtension("OES_texture_float_linear"),
                    f = this.getExtension("OES_texture_half_float_linear"),
                    m = {
                      texture: null !== p,
                      filterable: null !== o,
                      renderable: null !== n,
                      score: 0,
                      precision: "single",
                      half: !1,
                      single: !0,
                      type: this.FLOAT
                    },
                    d = {
                      texture: null !== g,
                      filterable: null !== f,
                      renderable: null !== e,
                      score: 0,
                      precision: "half",
                      half: !0,
                      single: !1,
                      type:
                        null != (z = null != g ? g.HALF_FLOAT_OES : void 0)
                          ? z
                          : null
                    },
                    c = [],
                    m.texture && c.push(m),
                    d.texture && c.push(d),
                    l = [],
                    r = 0,
                    u = c.length;
                  u > r;
                  r++
                ) {
                  for (
                    b = c[r], q = !0, A = a.require, s = 0, v = A.length;
                    v > s;
                    s++
                  )
                    (i = A[s]), b[i] === !1 && (q = !1);
                  q && l.push(b);
                }
                for (t = 0, w = l.length; w > t; t++)
                  for (
                    b = l[t], B = a.prefer, h = y = 0, x = B.length;
                    x > y;
                    h = ++y
                  )
                    (k = B[h]),
                      (j = Math.pow(2, a.prefer.length - h - 1)),
                      b[k] && (b.score += j);
                if (
                  (l.sort(function(a, b) {
                    return a.score === b.score
                      ? 0
                      : a.score < b.score
                        ? 1
                        : a.score > b.score
                          ? -1
                          : void 0;
                  }),
                  0 === l.length)
                ) {
                  if (a["throws"])
                    throw "No floating point texture support that is " +
                      a.require.join(", ");
                  return null;
                }
                return (
                  (l = l[0]),
                  {
                    filterable: l.filterable,
                    renderable: l.renderable,
                    type: l.type,
                    precision: l.precision
                  }
                );
              })
            );
          }
        }),
        i(),
        j(),
        (e = (function() {
          function a(a, b) {
            var c, d;
            (this.gl = a),
              (d = b.vertex),
              (c = b.fragment),
              (this.program = this.gl.createProgram()),
              (this.vs = this.gl.createShader(this.gl.VERTEX_SHADER)),
              (this.fs = this.gl.createShader(this.gl.FRAGMENT_SHADER)),
              this.gl.attachShader(this.program, this.vs),
              this.gl.attachShader(this.program, this.fs),
              this.compileShader(this.vs, d),
              this.compileShader(this.fs, c),
              this.link(),
              (this.value_cache = {}),
              (this.uniform_cache = {}),
              (this.attribCache = {});
          }
          return (
            (a.prototype.attribLocation = function(a) {
              var b;
              return (
                (b = this.attribCache[a]),
                void 0 === b &&
                  (b = this.attribCache[a] = this.gl.getAttribLocation(
                    this.program,
                    a
                  )),
                b
              );
            }),
            (a.prototype.compileShader = function(a, b) {
              if (
                (this.gl.shaderSource(a, b),
                this.gl.compileShader(a),
                !this.gl.getShaderParameter(a, this.gl.COMPILE_STATUS))
              )
                throw "Shader Compile Error: " + this.gl.getShaderInfoLog(a);
            }),
            (a.prototype.link = function() {
              if (
                (this.gl.linkProgram(this.program),
                !this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS))
              )
                throw "Shader Link Error: " +
                  this.gl.getProgramInfoLog(this.program);
            }),
            (a.prototype.use = function() {
              return this.gl.useProgram(this.program), this;
            }),
            (a.prototype.uniformLoc = function(a) {
              var b;
              return (
                (b = this.uniform_cache[a]),
                void 0 === b &&
                  (b = this.uniform_cache[a] = this.gl.getUniformLocation(
                    this.program,
                    a
                  )),
                b
              );
            }),
            (a.prototype["int"] = function(a, b) {
              var c, d;
              return (
                (c = this.value_cache[a]),
                c !== b &&
                  ((this.value_cache[a] = b),
                  (d = this.uniformLoc(a)),
                  d && this.gl.uniform1i(d, b)),
                this
              );
            }),
            (a.prototype.vec2 = function(a, b, c) {
              var d;
              return (
                (d = this.uniformLoc(a)), d && this.gl.uniform2f(d, b, c), this
              );
            }),
            (a.prototype["float"] = function(a, b) {
              var c, d;
              return (
                (c = this.value_cache[a]),
                c !== b &&
                  ((this.value_cache[a] = b),
                  (d = this.uniformLoc(a)),
                  d && this.gl.uniform1f(d, b)),
                this
              );
            }),
            a
          );
        })()),
        (b = (function() {
          function a(a) {
            (this.gl = a), (this.buffer = this.gl.createFramebuffer());
          }
          return (
            (a.prototype.destroy = function() {
              return this.gl.deleteFRamebuffer(this.buffer);
            }),
            (a.prototype.bind = function() {
              return (
                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.buffer), this
              );
            }),
            (a.prototype.unbind = function() {
              return this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null), this;
            }),
            (a.prototype.check = function() {
              var a;
              switch (
                (a = this.gl.checkFramebufferStatus(this.gl.FRAMEBUFFER))
              ) {
                case this.gl.FRAMEBUFFER_UNSUPPORTED:
                  throw "Framebuffer is unsupported";
                case this.gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                  throw "Framebuffer incomplete attachment";
                case this.gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                  throw "Framebuffer incomplete dimensions";
                case this.gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                  throw "Framebuffer incomplete missing attachment";
              }
              return this;
            }),
            (a.prototype.color = function(a) {
              return (
                this.gl.framebufferTexture2D(
                  this.gl.FRAMEBUFFER,
                  this.gl.COLOR_ATTACHMENT0,
                  a.target,
                  a.handle,
                  0
                ),
                this.check(),
                this
              );
            }),
            (a.prototype.depth = function(a) {
              return (
                this.gl.framebufferRenderbuffer(
                  this.gl.FRAMEBUFFER,
                  this.gl.DEPTH_ATTACHMENT,
                  this.gl.RENDERBUFFER,
                  a.id
                ),
                this.check(),
                this
              );
            }),
            (a.prototype.destroy = function() {
              return this.gl.deleteFramebuffer(this.buffer);
            }),
            a
          );
        })()),
        (f = (function() {
          function a(a, b) {
            var c, d;
            switch (
              ((this.gl = a),
              null == b && (b = {}),
              (this.channels = this.gl[
                (null != (c = b.channels) ? c : "rgba").toUpperCase()
              ]),
              "number" == typeof b.type
                ? (this.type = b.type)
                : (this.type = this.gl[
                    (null != (d = b.type) ? d : "unsigned_byte").toUpperCase()
                  ]),
              this.channels)
            ) {
              case this.gl.RGBA:
                this.chancount = 4;
                break;
              case this.gl.RGB:
                this.chancount = 3;
                break;
              case this.gl.LUMINANCE_ALPHA:
                this.chancount = 2;
                break;
              default:
                this.chancount = 1;
            }
            (this.target = this.gl.TEXTURE_2D),
              (this.handle = this.gl.createTexture());
          }
          return (
            (a.prototype.destroy = function() {
              return this.gl.deleteTexture(this.handle);
            }),
            (a.prototype.bind = function(a) {
              if ((null == a && (a = 0), a > 15))
                throw "Texture unit too large: " + a;
              return (
                this.gl.activeTexture(this.gl.TEXTURE0 + a),
                this.gl.bindTexture(this.target, this.handle),
                this
              );
            }),
            (a.prototype.setSize = function(a, b) {
              return (
                (this.width = a),
                (this.height = b),
                this.gl.texImage2D(
                  this.target,
                  0,
                  this.channels,
                  this.width,
                  this.height,
                  0,
                  this.channels,
                  this.type,
                  null
                ),
                this
              );
            }),
            (a.prototype.upload = function(a) {
              return (
                (this.width = a.width),
                (this.height = a.height),
                this.gl.texImage2D(
                  this.target,
                  0,
                  this.channels,
                  this.channels,
                  this.type,
                  a
                ),
                this
              );
            }),
            (a.prototype.linear = function() {
              return (
                this.gl.texParameteri(
                  this.target,
                  this.gl.TEXTURE_MAG_FILTER,
                  this.gl.LINEAR
                ),
                this.gl.texParameteri(
                  this.target,
                  this.gl.TEXTURE_MIN_FILTER,
                  this.gl.LINEAR
                ),
                this
              );
            }),
            (a.prototype.nearest = function() {
              return (
                this.gl.texParameteri(
                  this.target,
                  this.gl.TEXTURE_MAG_FILTER,
                  this.gl.NEAREST
                ),
                this.gl.texParameteri(
                  this.target,
                  this.gl.TEXTURE_MIN_FILTER,
                  this.gl.NEAREST
                ),
                this
              );
            }),
            (a.prototype.clampToEdge = function() {
              return (
                this.gl.texParameteri(
                  this.target,
                  this.gl.TEXTURE_WRAP_S,
                  this.gl.CLAMP_TO_EDGE
                ),
                this.gl.texParameteri(
                  this.target,
                  this.gl.TEXTURE_WRAP_T,
                  this.gl.CLAMP_TO_EDGE
                ),
                this
              );
            }),
            (a.prototype.repeat = function() {
              return (
                this.gl.texParameteri(
                  this.target,
                  this.gl.TEXTURE_WRAP_S,
                  this.gl.REPEAT
                ),
                this.gl.texParameteri(
                  this.target,
                  this.gl.TEXTURE_WRAP_T,
                  this.gl.REPEAT
                ),
                this
              );
            }),
            a
          );
        })()),
        (d = (function() {
          function a(a, c, d) {
            var e;
            (this.gl = a),
              (this.width = c),
              (this.height = d),
              (e = this.gl.getFloatExtension({ require: ["renderable"] })),
              (this.texture = new f(this.gl, { type: e.type })
                .bind(0)
                .setSize(this.width, this.height)
                .nearest()
                .clampToEdge()),
              (this.fbo = new b(this.gl)
                .bind()
                .color(this.texture)
                .unbind());
          }
          return (
            (a.prototype.use = function() {
              return this.fbo.bind();
            }),
            (a.prototype.bind = function(a) {
              return this.texture.bind(a);
            }),
            (a.prototype.end = function() {
              return this.fbo.unbind();
            }),
            (a.prototype.resize = function(a, b) {
              return (
                (this.width = a),
                (this.height = b),
                this.texture.bind(0).setSize(this.width, this.height)
              );
            }),
            a
          );
        })()),
        (k =
          "attribute vec4 position;\nvarying vec2 texcoord;\nvoid main(){\n    texcoord = position.xy*0.5+0.5;\n    gl_Position = position;\n}"),
        (h =
          "#ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp int;\n    precision highp float;\n#else\n    precision mediump int;\n    precision mediump float;\n#endif\nuniform sampler2D source;\nvarying vec2 texcoord;"),
        (c = (function() {
          function a(a, b, c, f) {
            var g, i, j;
            for (
              this.heatmap = a,
                this.gl = b,
                this.width = c,
                this.height = f,
                this.shader = new e(this.gl, {
                  vertex:
                    "attribute vec4 position, intensity;\nvarying vec2 off, dim;\nvarying float vIntensity;\nuniform vec2 viewport;\n\nvoid main(){\n    dim = abs(position.zw);\n    off = position.zw;\n    vec2 pos = position.xy + position.zw;\n    vIntensity = intensity.x;\n    gl_Position = vec4((pos/viewport)*2.0-1.0, 0.0, 1.0);\n}",
                  fragment:
                    "#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp int;\n    precision highp float;\n#else\n    precision mediump int;\n    precision mediump float;\n#endif\n varying vec2 off, dim;\n varying float vIntensity;\nvoid main(){\n    float falloff = (1.0 - smoothstep(0.0, 1.0, length(off/dim)));\n    float intensity = falloff*vIntensity;\n     gl_FragColor = vec4(intensity,0.0,0,1.0);\n }"
                }),
                this.clampShader = new e(this.gl, {
                  vertex: k,
                  fragment:
                    h +
                    "uniform float low, high;\nvoid main(){\n    gl_FragColor = vec4(clamp(texture2D(source, texcoord).rgb, low, high), 1.0);\n}"
                }),
                this.multiplyShader = new e(this.gl, {
                  vertex: k,
                  fragment:
                    h +
                    "uniform float value;\nvoid main(){\n    gl_FragColor = vec4(texture2D(source, texcoord).rgb*value, 1.0);\n}"
                }),
                this.blurShader = new e(this.gl, {
                  vertex: k,
                  fragment:
                    h +
                    "uniform vec2 viewport;\nvoid main(){\n    vec4 result = vec4(0.0);\n    for(int x=-1; x<=1; x++){\n        for(int y=-1; y<=1; y++){\n            vec2 off = vec2(x,y)/viewport;\n            //float factor = 1.0 - smoothstep(0.0, 1.5, length(off));\n            float factor = 1.0;\n            result += vec4(texture2D(source, texcoord+off).rgb*factor, factor);\n        }\n    }\n    gl_FragColor = vec4(result.rgb/result.w, 1.0);\n}"
                }),
                this.nodeBack = new d(this.gl, this.width, this.height),
                this.nodeFront = new d(this.gl, this.width, this.height),
                this.vertexBuffer = this.gl.createBuffer(),
                this.vertexSize = 8,
                this.maxPointCount = 10240,
                this.vertexBufferData = new Float32Array(
                  this.maxPointCount * this.vertexSize * 6
                ),
                this.vertexBufferViews = [],
                g = i = 0,
                j = this.maxPointCount;
              j >= 0 ? j > i : i > j;
              g = j >= 0 ? ++i : --i
            )
              this.vertexBufferViews.push(
                new Float32Array(
                  this.vertexBufferData.buffer,
                  0,
                  g * this.vertexSize * 6
                )
              );
            (this.bufferIndex = 0), (this.pointCount = 0);
          }
          return (
            (a.prototype.resize = function(a, b) {
              return (
                (this.width = a),
                (this.height = b),
                this.nodeBack.resize(this.width, this.height),
                this.nodeFront.resize(this.width, this.height)
              );
            }),
            (a.prototype.update = function() {
              var a, b;
              return this.pointCount > 0
                ? (this.gl.enable(this.gl.BLEND),
                  this.nodeFront.use(),
                  this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer),
                  this.gl.bufferData(
                    this.gl.ARRAY_BUFFER,
                    this.vertexBufferViews[this.pointCount],
                    this.gl.STREAM_DRAW
                  ),
                  (b = this.shader.attribLocation("position")),
                  (a = this.shader.attribLocation("intensity")),
                  this.gl.enableVertexAttribArray(1),
                  this.gl.vertexAttribPointer(b, 4, this.gl.FLOAT, !1, 32, 0),
                  this.gl.vertexAttribPointer(a, 4, this.gl.FLOAT, !1, 32, 16),
                  this.shader.use().vec2("viewport", this.width, this.height),
                  this.gl.drawArrays(this.gl.TRIANGLES, 0, 6 * this.pointCount),
                  this.gl.disableVertexAttribArray(1),
                  (this.pointCount = 0),
                  (this.bufferIndex = 0),
                  this.nodeFront.end(),
                  this.gl.disable(this.gl.BLEND))
                : void 0;
            }),
            (a.prototype.clear = function() {
              return (
                this.nodeFront.use(),
                this.gl.clear(this.gl.COLOR_BUFFER_BIT),
                this.nodeFront.end()
              );
            }),
            (a.prototype.clamp = function(a, b) {
              return (
                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.heatmap.quad),
                this.gl.vertexAttribPointer(0, 4, this.gl.FLOAT, !1, 0, 0),
                this.nodeFront.bind(0),
                this.nodeBack.use(),
                this.clampShader
                  .use()
                  ["int"]("source", 0)
                  ["float"]("low", a)
                  ["float"]("high", b),
                this.gl.drawArrays(this.gl.TRIANGLES, 0, 6),
                this.nodeBack.end(),
                this.swap()
              );
            }),
            (a.prototype.multiply = function(a) {
              return (
                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.heatmap.quad),
                this.gl.vertexAttribPointer(0, 4, this.gl.FLOAT, !1, 0, 0),
                this.nodeFront.bind(0),
                this.nodeBack.use(),
                this.multiplyShader
                  .use()
                  ["int"]("source", 0)
                  ["float"]("value", a),
                this.gl.drawArrays(this.gl.TRIANGLES, 0, 6),
                this.nodeBack.end(),
                this.swap()
              );
            }),
            (a.prototype.blur = function() {
              return (
                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.heatmap.quad),
                this.gl.vertexAttribPointer(0, 4, this.gl.FLOAT, !1, 0, 0),
                this.nodeFront.bind(0),
                this.nodeBack.use(),
                this.blurShader
                  .use()
                  ["int"]("source", 0)
                  .vec2("viewport", this.width, this.height),
                this.gl.drawArrays(this.gl.TRIANGLES, 0, 6),
                this.nodeBack.end(),
                this.swap()
              );
            }),
            (a.prototype.swap = function() {
              var a;
              return (
                (a = this.nodeFront),
                (this.nodeFront = this.nodeBack),
                (this.nodeBack = a)
              );
            }),
            (a.prototype.addVertex = function(a, b, c, d, e) {
              return (
                (this.vertexBufferData[this.bufferIndex++] = a),
                (this.vertexBufferData[this.bufferIndex++] = b),
                (this.vertexBufferData[this.bufferIndex++] = c),
                (this.vertexBufferData[this.bufferIndex++] = d),
                (this.vertexBufferData[this.bufferIndex++] = e),
                (this.vertexBufferData[this.bufferIndex++] = e),
                (this.vertexBufferData[this.bufferIndex++] = e),
                (this.vertexBufferData[this.bufferIndex++] = e)
              );
            }),
            (a.prototype.addPoint = function(a, b, c, d) {
              var e, f;
              return (
                null == c && (c = 50),
                null == d && (d = 0.2),
                this.pointCount >= this.maxPointCount - 1 && this.update(),
                (b = this.height - b),
                (e = c / 2),
                (f = c / 2),
                this.addVertex(a, b, -e, -f, d),
                this.addVertex(a, b, +e, -f, d),
                this.addVertex(a, b, -e, +f, d),
                this.addVertex(a, b, -e, +f, d),
                this.addVertex(a, b, +e, -f, d),
                this.addVertex(a, b, +e, +f, d),
                (this.pointCount += 1)
              );
            }),
            a
          );
        })()),
        (g = (function() {
          function b(b) {
            var d, g, i, j, l, m, n, o, p, q, r, s, t;
            (s = null != b ? b : {}),
              (this.canvas = s.canvas),
              (this.width = s.width),
              (this.height = s.height),
              (o = s.intensityToAlpha),
              (m = s.gradientTexture),
              (g = s.alphaRange),
              this.canvas || (this.canvas = document.createElement("canvas"));
            try {
              if (
                ((this.gl = this.canvas.getContext("experimental-webgl", {
                  depth: !1,
                  antialias: !1,
                  preserveDrawingBuffer: !0
                })),
                null === this.gl &&
                  ((this.gl = this.canvas.getContext("webgl", {
                    depth: !1,
                    antialias: !1,
                    preserveDrawingBuffer: !0
                  })),
                  null === this.gl))
              )
                throw "WebGL not supported";
            } catch (u) {
              throw ((j = u), "WebGL not supported");
            }
            null != a.WebGLDebugUtils &&
              (console.log("debugging mode"),
              (this.gl = WebGLDebugUtils.makeDebugContext(this.gl, function(
                a,
                b,
                c
              ) {
                throw WebGLDebugUtils.glEnumToString(a) +
                  " was caused by call to: " +
                  b;
              }))),
              this.gl.enableVertexAttribArray(0),
              this.gl.blendFunc(this.gl.ONE, this.gl.ONE),
              m
                ? ((r = this.gradientTexture = new f(this.gl, {
                    channels: "rgba"
                  })
                    .bind(0)
                    .setSize(2, 2)
                    .nearest()
                    .clampToEdge()),
                  "string" == typeof m
                    ? ((n = new Image()),
                      (n.onload = function() {
                        return r.bind().upload(n);
                      }),
                      (n.src = m))
                    : m.width > 0 && m.height > 0
                      ? r.upload(m)
                      : (m.onload = function() {
                          return r.upload(m);
                        }),
                  (l =
                    "uniform sampler2D gradientTexture;\nvec3 getColor(float intensity){\n    return texture2D(gradientTexture, vec2(intensity, 0.0)).rgb;\n}"))
                : ((r = null),
                  (l =
                    "vec3 getColor(float intensity){\n    vec3 blue = vec3(0.0, 0.0, 1.0);\n    vec3 cyan = vec3(0.0, 1.0, 1.0);\n    vec3 green = vec3(0.0, 1.0, 0.0);\n    vec3 yellow = vec3(1.0, 1.0, 0.0);\n    vec3 red = vec3(1.0, 0.0, 0.0);\n\n    vec3 color = (\n        fade(-0.25, 0.25, intensity)*blue +\n        fade(0.0, 0.5, intensity)*cyan +\n        fade(0.25, 0.75, intensity)*green +\n        fade(0.5, 1.0, intensity)*yellow +\n        smoothstep(0.75, 1.0, intensity)*red\n    );\n    return color;\n}")),
              null == o && (o = !0),
              o
                ? ((t = null != g ? g : [0, 1]),
                  (i = t[0]),
                  (d = t[1]),
                  (p =
                    "vec4 alphaFun(vec3 color, float intensity){\n    float alpha = smoothstep(" +
                    i.toFixed(8) +
                    ", " +
                    d.toFixed(8) +
                    ", intensity);\n    return vec4(color*alpha, alpha);\n }"))
                : (p =
                    "vec4 alphaFun(vec3 color, float intensity){\n    return vec4(color, 1.0);\n }"),
              (this.shader = new e(this.gl, {
                vertex: k,
                fragment:
                  h +
                  ("float linstep(float low, float high, float value){\n    return clamp((value-low)/(high-low), 0.0, 1.0);\n}\n\n float fade(float low, float high, float value){\n    float mid = (low+high)*0.5;\n    float range = (high-low)*0.5;\n    float x = 1.0 - clamp(abs(mid-value)/range, 0.0, 1.0);\n    return smoothstep(0.0, 1.0, x);\n}\n\n" +
                    l +
                    "\n" +
                    p +
                    "\n\n void main(){\n     float intensity = smoothstep(0.0, 1.0, texture2D(source, texcoord).r);\n    vec3 color = getColor(intensity);\n     gl_FragColor = alphaFun(color, intensity);\n }")
              })),
              null == this.width && (this.width = this.canvas.offsetWidth || 2),
              null == this.height &&
                (this.height = this.canvas.offsetHeight || 2),
              (this.canvas.width = this.width),
              (this.canvas.height = this.height),
              this.gl.viewport(0, 0, this.width, this.height),
              (this.quad = this.gl.createBuffer()),
              this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.quad),
              (q = new Float32Array([
                -1,
                -1,
                0,
                1,
                1,
                -1,
                0,
                1,
                -1,
                1,
                0,
                1,
                -1,
                1,
                0,
                1,
                1,
                -1,
                0,
                1,
                1,
                1,
                0,
                1
              ])),
              this.gl.bufferData(this.gl.ARRAY_BUFFER, q, this.gl.STATIC_DRAW),
              this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null),
              (this.heights = new c(this, this.gl, this.width, this.height));
          }
          return (
            (b.prototype.adjustSize = function() {
              var a, b;
              return (
                (b = this.canvas.offsetWidth || 2),
                (a = this.canvas.offsetHeight || 2),
                this.width !== b || this.height !== a
                  ? (this.gl.viewport(0, 0, b, a),
                    (this.canvas.width = b),
                    (this.canvas.height = a),
                    (this.width = b),
                    (this.height = a),
                    this.heights.resize(this.width, this.height))
                  : void 0
              );
            }),
            (b.prototype.display = function() {
              return (
                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.quad),
                this.gl.vertexAttribPointer(0, 4, this.gl.FLOAT, !1, 0, 0),
                this.heights.nodeFront.bind(0),
                this.gradientTexture && this.gradientTexture.bind(1),
                this.shader
                  .use()
                  ["int"]("source", 0)
                  ["int"]("gradientTexture", 1),
                this.gl.drawArrays(this.gl.TRIANGLES, 0, 6)
              );
            }),
            (b.prototype.update = function() {
              return this.heights.update();
            }),
            (b.prototype.clear = function() {
              return this.heights.clear();
            }),
            (b.prototype.clamp = function(a, b) {
              return (
                null == a && (a = 0),
                null == b && (b = 1),
                this.heights.clamp(a, b)
              );
            }),
            (b.prototype.multiply = function(a) {
              return null == a && (a = 0.95), this.heights.multiply(a);
            }),
            (b.prototype.blur = function() {
              return this.heights.blur();
            }),
            (b.prototype.addPoint = function(a, b, c, d) {
              return this.heights.addPoint(a, b, c, d);
            }),
            (b.prototype.addPoints = function(a) {
              var b, c, d, e;
              for (e = [], c = 0, d = a.length; d > c; c++)
                (b = a[c]),
                  e.push(this.addPoint(b.x, b.y, b.size, b.intensity));
              return e;
            }),
            b
          );
        })()),
        (a.createWebGLHeatmap = function(a) {
          return new g(a);
        });
    })(a),
    (c.HeatMap = function(a) {
      a || (a = {}),
        (this.radius = a.radius || 10),
        (this.maxValue = a.maxValue || 1),
        (this.minValue = a.minValue || 0),
        (this.width = a.width || 100),
        (this.height = a.height || 100),
        (this.canvasHeight = 100),
        (this.canvasWidth = parseInt(
          (this.canvasHeight * this.width) / this.height
        )),
        (this.positionX =
          a.positionX == b ? this.width / 2 : parseFloat(a.positionX)),
        (this.positionY =
          a.positionY == b ? this.height / 2 : parseFloat(a.positionY)),
        (this.heatmap = createWebGLHeatmap({
          canvas: null,
          width: this.canvasWidth,
          height: this.canvasHeight,
          intensityToAlpha: !1,
          alphaRange: [0, 1]
        }));
    }),
    mono.extend(c.HeatMap, Object, {
      createHeatMap: function() {},
      _getOriginal: function() {
        var a = this.positionX - this.width / 2,
          b = this.height / 2 + this.positionY;
        return { x: a, y: b };
      },
      _getOriginalX: function() {
        return this.positionX - this.width / 2;
      },
      _getOriginalY: function() {
        return this.height / 2 + this.positionY;
      },
      _transPositionX: function(a) {
        return (
          (parseFloat(a) - this._getOriginalX()) *
          (this.canvasWidth / this.width)
        );
      },
      _transPositionY: function(a) {
        return (
          (this._getOriginalY() - parseFloat(a)) *
          (this.canvasHeight / this.height)
        );
      },
      _transWidth: function(a) {
        var b = parseFloat(a);
        return 0 >= b ? 0 : (b * this.canvasWidth) / this.width;
      },
      _transHeight: function(a) {
        var b = parseFloat(a);
        return 0 >= b ? 0 : (b * this.canvasHeight) / this.height;
      },
      _generateNearPointsForArea: function(a, b, c, d, e) {
        if (c && d) {
          var f = 3 * parseInt(c * d),
            g = a - c / 2,
            h = b - d / 2;
          if (!(0 > g || 0 > h))
            for (var i = 0, j = 5; f > i; ) {
              var k = (2 * Math.random() - 1) * (j + c / 2),
                l = (2 * Math.random() - 1) * (j + d / 2),
                m = 0,
                n = 0;
              (m = a + k),
                (n = b + l),
                (m > g && g + c > m && n > h && h + d > n) ||
                  (this.heatmap.addPoint(m, n, this.radius / 2, e / 30), i++);
            }
        }
      },
      addPointWithArea: function(a) {
        if (a)
          if (a instanceof Array && a.length > 0)
            for (var b = 0; b < a.length; b++) arguments.callee(a[b]);
          else
            a.type && "circle" === a.type
              ? this._createCircleCloud(a)
              : this._createRectCloud(a);
      },
      _createCircleCloud: function(a) {
        a &&
          (parseFloat(a.x) || 0,
          parseFloat(a.y) || 0,
          parseFloat(a.radius) || 0);
      },
      _createRectCloud: function(a) {
        if (a) {
          var b = parseFloat(a.x) || 0,
            c = parseFloat(a.y) || 0,
            d = parseFloat(a.w) || 0,
            e = parseFloat(a.l) || 0,
            f = parseFloat(a.value) || 0,
            g = a.axis;
          if (
            ((d = this._transWidth(d)),
            (e = this._transHeight(e)),
            g && "z" == g)
          ) {
            var h = e;
            (e = d), (d = h);
          }
          if (!d && !e) return void this.addPoint(b, c, f);
          e || (e = d), d || (d = e);
          var i = this._transPositionX(b),
            j = this._transPositionY(c);
          this._generatePointsForArea(i, j, d, e, f);
        }
      },
      _generatePointsForArea: function(a, b, c, d, e) {
        if (c && d)
          for (
            var f = a - c / 2,
              g = b - d / 2,
              h = 0,
              i = parseInt(c * d),
              j = 1,
              k = 1;
            i > h && (j >= c && ((j = 1), k++), !(j >= c && k >= d));

          ) {
            var l = f + j,
              m = g + k;
            this.heatmap.addPoint(l, m, this.radius, e / 20), j++, h++;
          }
      },
      _generatePointsForArea_for_random: function(a, b, c, d, e) {
        if (c && d) {
          (c += 5), (d += 5);
          for (
            var f = a - c / 2, g = b - d / 2, h = 0, i = parseInt(c * d);
            i > h;

          ) {
            var j = f + Math.random() * c,
              k = g + Math.random() * d;
            this.heatmap.addPoint(j, k, this.radius, e / 30), h++;
          }
        }
      },
      _paintAtCoord: function(a, b, c) {
        for (var d = 0; d < 2 * this.radius; ) {
          var e = 2 * Math.random() - 1,
            f = 2 * Math.random() - 1,
            g = e * e + f * f;
          if (!(g > 1)) {
            var h = Math.sqrt(g);
            (e /= h),
              (f /= h),
              (e *= 1 - g),
              (f *= 1 - g),
              (d += 1),
              this.heatmap.addPoint(
                a + e * this.radius * 2,
                b + f * this.radius * 2,
                this.radius,
                c / 10
              );
          }
        }
      },
      addPoint: function(a, b, c, d) {
        (a = this._transPositionX(a)), (b = this._transPositionY(b));
        for (var e = 0; 20 > e; ) {
          var f = 2 * Math.random() - 1,
            g = 2 * Math.random() - 1,
            h = f * f + g * g;
          if (!(h > 1)) {
            var i = Math.sqrt(h);
            (f /= i),
              (g /= i),
              (f *= 1 - h),
              (g *= 1 - h),
              (e += 1),
              this.heatmap.addPoint(a + 10 * f, b + 5 * g, this.radius, c / 20);
          }
        }
      },
      addPoint1: function(a, c, d, e) {
        (a = this._transPositionX(a)),
          (c = this._transPositionY(c)),
          null != d &&
            d != b &&
            ((d =
              (parseFloat(d) - this.minValue) /
              (this.maxValue - this.minValue)),
            0 > d && (d = 0)),
          e ? this.heatmap.addPoint(a, c, e, d) : this._paintAtCoord(a, c, d);
      },
      update: function() {
        this.heatmap.adjustSize(),
          this.heatmap.update(),
          this.heatmap.display();
      },
      refresh: function(b) {
        var c =
            a.requestAnimationFrame ||
            a.mozRequestAnimationFrame ||
            a.webkitRequestAnimationFrame ||
            a.msRequestAnimationFrame,
          d = this;
        document.body.appendChild(this.heatmap.canvas),
          c(function() {
            d.update(), console.log(d.heatmap.canvas.toDataURL()), b && b();
          });
      },
      clear: function() {
        this.heatmap.clear();
      },
      getCanvas: function() {
        return this.heatmap.canvas;
      },
      getImage: function() {
        return this.heatmap.canvas
          ? this.heatmap.canvas.toDataURL()
          : void console.log("getImage error!");
      },
      getTemperatureBoard: function() {
        var a = new mono.Plane(this.width, this.height);
        a
          .setStyle("m.texture.repeat", new mono.Vec2(1, 1))
          .setStyle("m.type", "basic")
          .setStyle("m.side", "both"),
          a.setRotation((90 * Math.PI) / 180, 0, 0);
        var b = this;
        return (
          this.refresh(function() {
            a.setStyle("m.texture.image", b.getImage()),
              document.body.removeChild(b.heatmap.canvas);
          }),
          a.setPositionX(this.positionX),
          a.setPositionZ(this.positionY),
          a
        );
      }
    });
})(window);
